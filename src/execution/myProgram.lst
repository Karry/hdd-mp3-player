gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 6-20-2008  09:01:13
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;   HLAVNI SOUBOR 
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;  MP3 PREPRCAVAC
                                           ; ================
                                           ; 
                                           ; Program mp3 prehravace pouzivajici jako zdroj dat ATA disk.
                                           ; 
                                           ; Umi identifikovat disk, precist libovolny sektor, v MBR  najit oddily se systemem souboru FAT32, 
                                           ; nacist spousteci zaznam FAT32, praci s FAT32, komunikaci s vs1001 a prehravani mp3 pres vs1001.
                                           ;
                                           ;
                                           ; dodelat:
                                           ;	- podpora podadresaru pri prehravani
                                           ;	- podporu ID3v1
                                           ;	- najit a zabit chyby
                                           ;
                                           ; chyby o kterych vim:
                                           ;
                                           ; vyreseen chyby:
                                           ;	- Pri cteni SCI (registru VS1001k) dochazi k praskani na vystupu a obcas k resetovani dekoderu
                                           ;		...vyreseno postavenim konecne faze hardwaru
                                           ;	- pri cteni nekterych clusteru jsou precteny clustery jine
                                           ;		...tato chyba byla zpusobena chybnym scitanim (MPLAB SIM se chova jinak nez PIC - decf u picu nemeni priznak Carry!!!)
                                           ;	- Obcas se nechce vs1001k resetovat. Snad tomu pomuze mala hardwarova uprava.
                                           ;		...opravdu tomu znacne pomohlo pridani kondiku a odporu na reset jako u PICu
                                           ;
                                           ; srpen 2005 - ƒçerven 2006 Karry - lukas.karas@centrum.cz
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           
                                           
                                           ;**********************************************************
                                           ;   VERZE 1.3
                                           ;**********************************************************
                                           ; !!!!!!!! VSECHNY CASOVE SMYCKY JSOU POCITANY NA Fosc=20MHz !!!!!
                                           ; !!!!!!!! NASTAVENI USARTu a SPI TAKY !!!!!!!
                                           	LIST		p=PIC16F877A,C=132,n=60
                                           	__CONFIG	_WDT_OFF & _HS_OSC & _PWRTE_OFF & _BODEN_OFF & _LVP_OFF 
                                           			; LVP_OFF = RB3 jako digitalni I/O
                                           	errorlevel -302		; vypnuti Message [302]: Register in operand not in bank 0.
                                           	errorlevel -306		; vypnuti Message[306] : Crossing page boundary -- ensure page bits are set.
                                           						; ! zjednoduseni vypisu, musim ale davat pozor, z jake banky ctu a kam skacu
                                           ;**********************************************************
                                           #DEFINE SPI_SOFTWARE 1		; podmineny preklad. bud je SPI generovana softwarove (0) (jistejsi, pomalejsi]
                                           							; nebo je SPI generovana hardwarove (1)(rychlejsi, neni ale kontrola nad BSYNC)
                                           ;**********************************************************
                                           
                                           	include "P16F877A.inc" 	; definice blbosti kolem procesoru
                                                   LIST
                                           ; P16F877A.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                           	include "MP3.inc" 		; definice promennych, konstant a portu
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; DEFINICE PORTU
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;**********************************************************
                                           ; ZAPOJENI PORTU:
                                           ;       portA - adresove signaly ATA
                                           ; 				5     4     3      2    1    0
                                           ; 				CS1-  -     CS0-   DA2  DA1  DA0  
                                           ;				(signaly se znaminkem minus jsou aktivni v logicke 0 !!!)
                                           ;		portB - ATA datova sbernice (dolnich 8 bitu)
                                           ;               7   .. 0
                                           ;               DD7 .. DD0
                                           ;		portD - ATA datova sbernice (hornich 8 bitu)
                                           ;               15   .. 8
                                           ;               DD15 .. DD8 
                                           ;		portC - MP3 dekoder vs1001k a USART
                                           ; 				7          6        5  4  3    2     1  0
                                           ; 				USART out  USART in SI SO SCLK BSYNC CS DREQ
                                           ;		portE - ridici signaly ATA
                                           ;				2       1      0
                                           ;				DIOR-	DIOW-  RESET-
                                           ;				(signaly se znaminkem minus jsou aktivni v logicke 0 !!!)
                                           ;**********************************************************
                                           MP3_PORT		equ PORTC
                                           MP3_PORT_TRIS	equ TRISC
                                           ; BITY MP3_PORT
                                           #define MP3_SO		MP3_PORT,4	; serial output - tady dostavame z dekoderu data
                                           #define MP3_SI		MP3_PORT,5	; serial input  - pokud MP3_CS=1, tak posilame mp3 data, pokud =0, tak posilame prikaz
                                           #define MP3_SCLK	MP3_PORT,3	; clock - nabezna hrana urcuje platnost dat pri seriovem prenosu
                                           #define MP3_CS		MP3_PORT,1	; cable select  - pokud MP3_CS=1, tak po SI posilame mp3 data, pokud =0, tak posilame prikaz
                                           #define MP3_DREQ	MP3_PORT,0	; data request  - pokud =1, tak dekoder pozaduje dalsi mp3 data
                                           #define MP3_BSYNC	MP3_PORT,2	; pro synchronizaci - ma byt nastaven pri prvnim prenasenem bitu kazdeho bytu
                                           ;**********************************************************
                                           ; pokud jsem dobre pochopil dataSheat dekoderu vs1001, tak staci do nej jen cpat data, a kdyz skonci mp3, tak odeslat 1024 nulovych bytu,
                                           ; softwarove resetovat a posilat dalsi mp3...
                                           ;
                                           ; popis registru obvodu vs1001 najdete na strane 22 dataSheatu 
                                           ; v jeho registrech jsou k dispozici data z hlavicky mp3, zdali mp3 ma spravny format, 
                                           ; ovladani hlasitosti a dalsi spousty uzitecnych informaci
                                           ;**********************************************************
                                           ; PORTY DISKU
                                           ATA_ADDRESS 		equ PORTA
                                           ATA_CONTROL 		equ PORTE
                                           DATA_PORT_LOW 		equ PORTB
                                           DATA_PORT_HIGH 		equ PORTD
                                           
                                           ATA_ADDRESS_TRIS 	equ TRISA
                                           ATA_CONTROL_TRIS	equ TRISE
                                           DATA_PORT_LOW_TRIS 	equ TRISB
                                           DATA_PORT_HIGH_TRIS	equ TRISD
                                           
                                           ; bity ATA_ADDRESS portu
                                           #define ERROR_LED	ATA_ADDRESS,3
                                           ; bity ATA_CONTROL portu
                                           #define ATA_RESET_N	ATA_CONTROL,0
                                           #define ATA_DIOW_N	ATA_CONTROL,1
                                           #define ATA_DIOR_N	ATA_CONTROL,2
                                           
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; DEFINICE KONSTANT
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; ADRESY ATA REGISTRU:
                                           ;                                                                       / CHS adressing
                                           ;   +-----------+--------------+-------------------+-----------------+
                                           ;   | CS0- CS1- |  DA2 DA1 DA0 | READ              | WRITE           |   
                                           ;   +-----------+--------------+-------------------+-----------------+
                                           ;   | 1    1    |  x   x   x   | data bush h.imped (validace prikazu)|
                                           ;   +-----------+--------------+-------------------+-----------------+
                                           ;   | 1    0    |  1   1   0   | alternate status  | device control  |
                                           ;   +-----------+--------------+-------------------+-----------------+
                                           ;   | 0    1    |  0   0   0   | data              | data            |
                                           ;   | 0    1    |  0   0   1   | error             | features        |
                                           ;   | 0    1    |  0   1   0   |             sector count            |
                                           ;   | 0    1    |  0   1   1   |             LBA bits 0-7            |  sector number
                                           ;   | 0    1    |  1   0   0   |             LBA bits 8-15           |  cilinder LOW 
                                           ;   | 0    1    |  1   0   1   |             LBA bits 16-23          |  cilinder HIGH
                                           ;   | 0    1    |  1   1   0   |         device / LBA bits 24-27*    |  device, head
                                           ;   | 0    1    |  1   1   1   | status            | command         |
                                           ;   +-----------+--------------+-------------------+-----------------+
                                           ;   | 0    0    |  0   0   0   | invalid addres    | invalid addres  |
                                           ;   +-----------+--------------+-------------------+-----------------+
                                           ;
                                           ;   * 7 6 5 4   3     2     1     0 
                                           ;     1 L 1 DEV LBA27 LBA26 LBA25 LBA24
                                           ;  L=1 -> aresa je LBA , L=0 -> adresa je CHS
                                           ;  DEV=0 -> master , DEV=1 -> SLAVE
                                           ;
                                           ;  pokud disk podporuje LBA 48, tak je zadavani adresy trochu odlisne od LBA27
                                           ;**********************************************************
                                           ; toto jsou definice adres ATA registru. Staci udat jejich adresu na ATA_ADDRESS port a dat prikaz ke cteni ci zapisu (DIOR- / DIOW-)
                                           
                                           ;       portA - adresove signaly ATA
                                           ; 				5     4     3       2    1    0
                                           ; 				CS1-  -     CS0-    DA2  DA1  DA0  
                                           ;				(signaly se znaminkem minus jsou aktivni v logicke 0 !!!)
                                           D_STATUS_A    equ b'00011110'
                                           D_DEVICE_C    equ D_STATUS_A
                                           D_DATA_R      equ b'00100000'
                                           D_FEATURES    equ b'00100001'
                                           D_ERROR       equ D_FEATURES
                                           D_SECTOR_C    equ b'00100010'
                                           D_LBA1        equ b'00100011'	; LBA low
                                           D_LBA2        equ b'00100100'	; LBA middle
                                           D_LBA3        equ b'00100101'	; LBA high
                                           D_DEVICE      equ b'00100110'
                                           D_STATUS      equ b'00100111'
                                           D_COMMAND     equ D_STATUS
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; ROZLOZENI PAMETI PROGRAMU
                                           
                                           ; vis. main.asm
                                           
                                           ; Vsechny podprogramy by mely nechat nastaven PCLATH na hodnotu jak se do nich vstoupilo...
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; DEFINICE PROMENNYCH
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; MAPA PAMETI: (368 bytu)
                                           ; 	BANK 0: 	0x000 - 0x01F = specialni registry,
                                           ;				0x020 - 0x07F = misto (96bytu) pro nase registry:
                                           ;					0x020 - 0x02E -> registry a parametry HDD
                                           ;					0x02F         -> loundes (registr obsahujici aktualne nastaveny filtr)
                                           ;					0x030 - 0x032 -> --------------------------
                                           ;					0x033 - 0x034 -> velikost sektoru
                                           ;					0x035 - 0x03a -> 6bytu pro parametry podprogramu (musime zajistit, abychom nepouzivali registry, ktere pouzivaji i podprogramy!!!)
                                           ;					0x03B - 0x04C -> parametry FATky
                                           ;					0x04D - 0x050 -> registry pro praci s VS1001
                                           ;					0x051 - 0x056 -> registry pro reseni fragmentovanych souboru
                                           ;					0x057 - 0x058 -> citac necinosti, ktery odpocitava dobu do STAND-BY disku
                                           ;					0x059 - 0x05E -> registry pro trideni podle abecedy
                                           ;					0x05F         -> --------------------------
                                           ;					0x060 - 0x06F -> informace potrebne pro prehravani
                                           
                                           ;					0x070 - 0x072 -> 3 registry slouzici k zalohovani W, STATUS, FSR
                                           ;					0x073 - 0x076 -> registry pro prikazy a preruseni + zaloha pro PCLATH
                                           ;					0x077         -> ---------------------------
                                           ;					0x078 - 0x07F -> 8 bytu zasobniku prikazu (obsahujici data prikazu prisla po USARTU)
                                           ;
                                           ; 	BANK 1: 	0x080 - 0x09F = specialni registry,
                                           ;				0x0A0 - 0x0EF = volne misto (80bytu)
                                           ;					0x0A0 - 0x0AC -> parametry a navratove hodnoty z aritmeto/logickych podprogramu
                                           ;					0x0AD - 0x0EF -> --------------------------- (67bytu)
                                           ;
                                           ; 	BANK 2: 	0x100 - 0x10F = specialni registry,
                                           ;				0x110 - 0x16F = misto (96bytu) pro nase registry:
                                           ;					0x110 - 0x14F -> 64bytu BUFFER_2 (pro dlouhe nazvy souboru, tabulku oddilu, a treba pro cast fatky)
                                           ;					0x150         -> pri cteni dlouheho jmena potrebuju v bufferu2 65 bytu... (ten 65 je tady)
                                           ;					0x151 - 0x16F -> --------------------------- (31bytu)
                                           ;
                                           ; 	BANK 3: 	0x180 - 0x18F = specialni registry,
                                           ;				0x190 - 0x1EF = misto (96bytu) pro nase registry:
                                           ; 					0x190 - 0x1CF -> 64bytu BUFFER_1 (pro ruzna data pri cteni...)
                                           ;					0x1D0 - 0x1EF -> --------------------------- (32 bytu)
                                           
                                           ; prectena ci zapisovana data
                                           DATA_L 			equ 0x020 ; res 1
                                           DATA_H 			equ 0x021
                                           ; HODNOTY ATA REGISTRU 
                                           ATA_STATUS_A	equ 0x022
                                           DEVICE_C 		equ 0x023
                                           FEATURES 		equ 0x024
                                           ATA_ERROR		equ 0x025
                                           SECTOR_C 		equ 0x026
                                           LBA1			equ 0x027	; alias  SECTOR_N
                                           LBA2			equ 0x028	; alias  CILINDER_L
                                           LBA3			equ 0x029	; alias  CILINDER_H
                                           LBA4			equ 0x02a	; toto neni registr ATA, ale pouze posledni cast aktualni adresy
                                           DEVICE			equ 0x02b	; alias  DEVICE_H
                                           ATA_STATUS		equ 0x02c
                                           COMMAND 		equ 0x02d
                                           ;**********************************************************
                                           ; BITY ATA REGISTRU
                                                    ; ATA_STATUS register
                                           BSY				equ 7	; = 1 -> disk je zaneprazdneny, ostatni registry nemusi obsahovat pravdivou informaci
                                           DRDY			equ 6	; = 1 -> disk ready (pripraven k praci)
                                           DRQ				equ 3	; = 1 -> signalizuje, ze jsou pripravena data ke cteni 
                                           ERR				equ 0	; = 1 -> pri provadeni posledniho prikazu doslo k chybe
                                                    ; ATA_ERROR register
                                           ABRT			equ 2	; = 1 -> prikaz aborted (spatny optkode prikazu)
                                                    ; DEVICE_C (control) register
                                           SRST			equ 2	; nastavime-li, provedeme soft. reset disku
                                           nEIN			equ 1	; zakazuje preruseni disku (signal INTRQ)
                                           HOB				equ 7	; tento bit DEVICE CONTROL se nastavuje pouze pokud disk podporuje LBA 48 a cteme horni cast adresy LBA...
                                           ;**********************************************************
                                           ATA_ATTRIBUTES 	equ 0x02e 	; Parametry hardisku. 
                                           ;Bity maji nasledujici vyznam:
                                           ATA_OK			equ 0	; 0. bit = 1 -> disk je pritomen, zapnuty a funkcni :-)
                                           LBA_SUPPORT		equ 1	; 1. bit = 1 -> podpora LBA (pokud neni nastaven bit2, tak pouze LBA28 -> disk do 120GB)
                                           LBA48_SUPPORT	equ 2	; 2. bit = 1 -> podpora LBA 48 (disk je zrejme vetsi jak 120GB)
                                           BIG_SECTOR		equ 3	; 3. bit = 1 -> velikost sektoru je vetsi nez 256 !!! (s takovym diskem zatim tento program neumi)
                                           FAT32_LOAD		equ 4	; 4. bit = 1 -> FATka byla uspesne analyzovana a udaje o ni jsou pravdive
                                           STANDBY			equ 5	; 5. bit = 1 -> disk ve standby rezimu
                                           						; 6. bit  -> nepouzit
                                           APPLICABLE		equ 7	; 7. bit = 1 -> disk je pro nas pouzitelny (LBA, sektor o 512B)
                                           
                                           ;PARAM_MAX_LBA1	equ 0x02F		; [4B] maximalni hodnota LBA (velikost disku)	
                                           ;PARAM_MAX_LBA2	equ 0x030		; tady pozor, disky mohou byt adresovany az LBA 48, MBR je ale omezen na LBA 32 (2TB)
                                           ;PARAM_MAX_LBA3	equ 0x031		; tak by nemelo smysl vsech 48b kdyz by se nevyuzily. (Navic jsem disk vetsi nez 2TB nevidel :)
                                           ;PARAM_MAX_LBA4	equ 0x032		; (registr s indexem 1 ma nejnizsi vahu)
                                           ; Tyto registry nepotrebuju
                                           ;**********************************************************
                                           VS_LOUDNESS		equ 0x02F		; registr obsahujici hodnotu s nastavenym ekvalizerem
                                           ;				equ 0x030
                                           ;				equ 0x031
                                           ;				equ 0x032
                                           
                                           ;**********************************************************
                                           
                                           PARAM_SLOV_V_SEKTORU1	equ 0x33 ; [2B] disky mohou mit velikost sektoru vetsi nez 512 (256sl) 
                                           PARAM_SLOV_V_SEKTORU2	equ 0x34 
                                           ; taky informace k nicemu. pokud beztak neni 512, tak s diskem neumi program pracovat...
                                           
                                           ; pokud je to zapsano takto, nejvyznamejsi bity jsou niz v paneti (PARAM_MAX_LBA + X)
                                           ; pokud je zapsano jako skupina LBA1, LBA2, LBA3, LBA4, tak nejvyznamejsi bity jsou v LBA4
                                           ;**********************************************************
                                           ; pomocne registry pouzivane v podprogramech 
                                           ; !!! MUSIME ZAJISTIT ABY NEBYLY POUZIVANY VE VNORENYCH PODPROGRAMECH !!!
                                           TEMPW			equ 0x035
                                           TEMP1			equ 0x036
                                           TEMP2			equ 0x037
                                           TEMP3			equ 0x038
                                           TEMP4			equ 0x039
                                           TEMP5			equ 0x03A
                                           
                                           ; !!! pomocne promenne pro spozdovaci smycky jsou na stejnych mistech
                                           ; pouzito pro synchronizaci s prog. picdelay
                                           TMP1			equ 0x036
                                           TMP2			equ 0x037
                                           TMP0			equ 0x038
                                           ;**********************************************************
                                           ; registry pro praci s FATkou
                                           POZICE			equ 0x03B		; na ukladani aktualni pozice v slusteru, pripadne jine kokotiny
                                           CLUSTER1		equ 0x03C
                                           CLUSTER2		equ 0x03D
                                           CLUSTER3		equ 0x03E
                                           CLUSTER4		equ 0x03F
                                           
                                           POCATEK_DAT1	equ 0x040
                                           POCATEK_DAT2	equ 0x041
                                           POCATEK_DAT3	equ 0x042
                                           POCATEK_DAT4	equ 0x043
                                           
                                           POCATEK_FAT1	equ 0x044
                                           POCATEK_FAT2	equ 0x045
                                           POCATEK_FAT3	equ 0x046
                                           POCATEK_FAT4	equ 0x047
                                           
                                           ROOT_DIR_CL1	equ 0x048
                                           ROOT_DIR_CL2	equ 0x049
                                           ROOT_DIR_CL3	equ 0x04A
                                           ROOT_DIR_CL4	equ 0x04B
                                           
                                           CLUSTER_SIZE	equ 0x04C		; velikost clusteru (pocet sektoru na cluster)
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; DEFINICE PROMENNYCH a KONSTANT PRO PRACI S VS1001
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; adresy registru VS1001
                                           VSADDR_MODE			equ .0		; nastaveni VS1001
                                           VSADDR_STATUS		equ .1		; slouzi pouze pro zapnuti / vypnuti analogove casti (MUTE)
                                           VSADDR_CLOCKF		equ .3		; informuje dekoder o jeho krystalu. !! je nutne pro spravne dekodovani !!
                                           VSADDR_DECODE_TIME	equ .4		; obsahuje cas dekodovani aktualni MP3 !! neaktualizuje se pri skocich (previjeni)
                                           VSADDR_AUDATA		equ .5		; obsahuje informace o datovem toku a vzorkovaci frekvenci MP3
                                           	; bit 15 = 1 => STEREO; = 0 => MONO
                                           	; bity 12-9 obsahuji vzorkovaci frekvenci v Hz
                                           	;	0000 -> neznama vzorkovaci frekvence
                                           	;	0001 -> 44 100
                                           	;	0010 -> 48 000
                                           	;	0011 -> 32 000
                                           	;	0100 -> 22 050
                                           	;	0101 -> 24 000 
                                           	;	0110 -> 16 000
                                           	;	0111 -> 11 025
                                           	;	1000 -> 12 000
                                           	;	1001 ->  8 000
                                           	; bity 8-0 obsahuji bitrate v kbps 
                                           
                                           VSADDR_WRAM		equ .6			; Slouzi k zapisovani uzivatelskeho programu, dato se zapise na adresu v WRAMADDR
                                           VSADDR_WRAMADDR	equ .7			; Adresuje uzivatelskou pamet dekoderu
                                           VSADDR_HDAT0	equ .8			; Obsahuje informace ziskane z hlavicky MP3
                                           VSADDR_HDAT1	equ .9			; Obsahuje informace ziskane z hlavicky MP3
                                           VSADDR_AIADDR	equ .10			; Start uzivatelskeho programu (vis. datasheet)
                                           VSADDR_VOL		equ .11			; ovladani hlasitosti (pro oba kanaly) Horni byte je levy kanal, dolni byte je pravy kanal
                                           								; (hodnota 0000h znamena hlasitost na max., FF00h hraje pouze pravy kanal, FFFFh je ticho)
                                           VSADDR_AICTRL0	equ .13			; Registr pro ovladani uzivatelskeho programu
                                           VSADDR_AICTRL1	equ .14			; Registr pro ovladani uzivatelskeho programu
                                           ;**********************************************************
                                           ; registry pro praci s VS1001	
                                           ; dekoder VS1001 ma vsechny registry 16bitove, proto za jmeno pisu _L /_H (u nekterych registru potrebuji pouze jednu cast)
                                           VSREG_MODE_L	equ 0x04D
                                           VSREG_STATUS_L	equ 0x04E
                                           VSREG_VOL_L		equ 0x04F		; pravy kanal
                                           VSREG_VOL_H		equ 0x050		; levy kanal
                                           ;**********************************************************
                                           FRAGMENT1		equ 0x051
                                           FRAGMENT2		equ 0x052
                                           ;**********************************************************
                                           PREH_D_FRAGMENT1	equ 0x053
                                           PREH_D_FRAGMENT2	equ 0x054	; 16bit cislo, ktere udava kolik clusteru mp3 dat po sobe je na disku nefragmentovano
                                           		; pokazde kdyz prehrajeme cluster, tak toto cislo dekrementujeme. Kdyz dosahneme 0, tak zjistime dalsi 
                                           		; cluster a pocet nefragmentovanych clusteru. (jak dlouha je rada po sobe jdoucich clusteru)
                                           CITAC_NECINNOSTI1	equ 0x055	; v preruseni se pokazdych 100ms dekrementuje, dokud neni 0. v hlavni programove smycce 
                                           CITAC_NECINNOSTI2	equ 0x056 	; se testuje, a kdyz se rovna 0, posle disku prikaz SLEEP. v prikazu ke cteni z disku se do nej umisti konstanta.
                                           								; to cele zbusobi to, ze po nekolika minutach necinnosti se disk prepne do sleep
                                           KONST_NECINNOSTI1	equ 0x057
                                           KONST_NECINNOSTI2	equ 0x058
                                           ;**********************************************************
                                           ; registry pro ukladani nastaveni hledani
                                           HL_PARAMETRY		equ 0x059
                                           ;		0. bit = 0 > pokud hled√°me soubory, tak pouze MP3
                                           ;				 1 > pokud hled√°me soubory, vrac√≠ v≈°echny soubory
                                           ;		1. bit = 0 > hled√°me klasicky (nejdr√≠ve adres√°re, pot√© soubory
                                           ;				 1 > hled√°me pouze adres√°re, nebo soubory
                                           ;		2. bit = 0 > je-li nastaven 1. bit, hled√°me pouze adres√°≈ôe
                                           ;				 1 > je-li nastaven 1. bit, hled√°me pouze soubory
                                           ;		3. bit = 0 > hled√°me podle cisla zaznamu bud n√°sleduj√≠c√≠ ci predchozi zaznam
                                           ;				 1 > hled√°me prvn√≠ z√°znam v adres√°≈ôi
                                           ;		4. bit = 0 > hled√°me N√ÅSLEDUJ√çC√ç z√°znam
                                           ;				 1 > hled√°me P≈òEDCHOZ√ç z√°znam
                                           ;		5. bit = 0 > pokud hled√°me pouze soubory, tak vrac√≠ jako prvn√≠ z√°znam adres√°≈ô '..'
                                           ;				 1 > pokud hled√°me soubory, tak nevrac√≠ adres√°≈ô '..'
                                           ;		7. bit - tento bit nelze nastavit uzivatelem
                                           ;				= 0 > adresar je ROOT
                                           ;				= 1 > adresar neni ROOT
                                           
                                           HL_ADR_CL1			equ 0x05A
                                           HL_ADR_CL2			equ 0x05B
                                           HL_ADR_CL3			equ 0x05C
                                           HL_ADR_CL4			equ 0x05D	; v jakem adresari momentalne vyhledavame
                                           
                                           ZAZNAMU_vBUFFERU_DISKU	equ 0x05E	; sem nam procedura SKOC_NA_ZAZNAM vraci kolik po sobe
                                           			; jdoucich zaznamu nam nechala pripravenych v bufferu na disku
                                           			; (znacne totiz zrychluje praci, protoze pokud chceme cist nasledujici zaznam a mame ho jiz 
                                           			; v bufferu, memusime znova volat SKOC_NA_ZAZNAM ale rovnou FILE_INFO)
                                           ;XXXXXXXXX		equ 0x05F
                                           ;**********************************************************
                                           ; registry pro praci procedur v filesystem (dalsi registry pozivane proceduramy v filesystem jsou CLUSTER a POZICE)
                                           ZAZNAM1				equ 0x060
                                           ZAZNAM2				equ 0x061	; poradi zaznamu v adresari
                                           ;**********************************************************
                                           ; informace potrebne pro prehravani
                                           PREH_ADR_CL1		equ 0x062
                                           PREH_ADR_CL2		equ 0x063
                                           PREH_ADR_CL3		equ 0x064
                                           PREH_ADR_CL4		equ 0x065	; prni cluster adresare, ktery se prave prehrava...
                                           
                                           PREH_ZAZNAM1		equ 0x066
                                           PREH_ZAZNAM2		equ 0x067	; poradi zaznamu v adresari ktery se zrovna prehrava (soubor mp3)
                                           
                                           PREH_CITAC_PREV		equ 0x068	; pokud je mp3 previjena pomalu, sem se zapisuje kolik sektoru se jiz previnulo. 
                                           								; (P≈ôi pomal√©m p≈ôev√≠jen√≠ je pomƒõr p≈ôehran√Ωch sektor≈Ø ku p≈ôeskoƒçen√Ωm 5:20.)
                                           
                                           PREH_DATA_CL1		equ 0x069
                                           PREH_DATA_CL2		equ 0x06A
                                           PREH_DATA_CL3		equ 0x06B
                                           PREH_DATA_CL4		equ 0x06C	; aktualni cluster, ktery se prehrava
                                           PREH_DATA_POZICE	equ 0x06D	; sektor v clusteru, ktery se prehrava
                                           
                                           PREH_STAV0			equ 0x06E	; registr obsahuje informace o stavu aktualniho prehravani
                                           				; 0. bit = 	0 => stop nebo pausa (nic nehraje)
                                           				;			1 => play            (nejaky soubor je prehravan)
                                           				; 1. bit = 	0 => neni zadny soubor k prehravani (nastaveni bitu play nema zadny ucinek)
                                           				;			1 => je soubor pripraven k prehravani (muze byt ale pauza - nic nehraje)
                                           				; 2. bit = 	1 => je nastaven, kdyz se zmeni prehravany soubor nebo adresar (bez volani prikazu) do doby, nez prijde prikaz na dotaz STAVU... (81h)
                                           				; 3. bit = 	0 => po skonceni souboru se pokracuje v prehravani (zavisi na nastaveni repeatu)
                                           				; 			1 => po skonceni prehravani souboru se nic neprehrava (ceka se na prijeti prikazu k prehravani)
                                           				; 4. bit = 	0 => repeat off
                                           				;			1 => repeat on
                                           				; 5. bit =	0 => repeat adresare (prvni cluster adresare musi byt nastaven v PREH_ADDR_ZACATEK_CL[1-4] )
                                           				;			1 => repeat souboru (po skonceni prehravani souboru se ten samy soubor zacne prehravat znova)
                                           				; 6. bit =	0 => pri dosazeni posledni skladby v adresari se prestane prehravat
                                           				;			1 => ---------------- // -------------------- se zacnou prohledavat podadresare, ci nasledujici adresar
                                           				; 7. bit =  0 => po naƒçten√≠ odd√≠lu se nezaƒçne p≈ôehr√°vat
                                           				;			1 => po naƒçten√≠ odd√≠lu se zaƒçne p≈ôehr√°vat mp3, kterou se p≈ôi posledn√≠m p≈ôehr√°v√°ni skonƒçilo 
                                           				;				(mus√≠ ale na disku st√°le b√Ωt a nesm√≠ se mezit√≠m p≈ôehr√°vat z jin√©ho odd√≠lu)
                                           				;				Pokud posledn√≠ p≈ôehran√° skladba nebyla na disku nalezena, naƒçne se p≈ôehr√°vat prvn√≠ mp3 v ROOT adres√°≈ôi.
                                           PREH_STAV1			equ 0x06F
                                           				; 0. bit =  0 => normalni prehravani
                                           				;			1 => previjeni mp3 dopredu
                                           				; 1. bit =  0 => 
                                           				;			1 => rezervovano (pro previjeni dozadu)
                                           				; 2. bit =	zpusob previjeni,	0 => previji se rychle, potichu
                                           				;								1 => previji se pomalu, vzdy se po nejake dobe kratky usek souboru prehraje
                                           				; 3. bit =	0 => normalni nastaveni zvuku
                                           				;			1 => zvyrazneni basu a vysek (moznost dekoderu vs1001 "bass/treble enhancer")
                                           				; 4. bit =	0 => NO MUTE
                                           				;			1 => MUTE
                                           				; 5., 6., 7. bit 
                                           				;			=> rezervovano
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; registry pro potreby preruseni + prace s prikazy (jsou totiz dostupne odkudkoliv)
                                           TEMP_WORKING	equ 0x070
                                           TEMP_STATUS		equ 0x071
                                           TEMP_FSR		equ 0x072
                                           PRIJATYCH_DAT	equ 0x073		; ukazuje kolik je platnych dat v zasobniku prikazu (0 -> zasobnik je prazdny)
                                           PRIJATE_DATO	equ 0x074		; pomocna promenna v preruseni
                                           STAV_PRIKAZU	equ 0x075		; pomocny registr signalizujici stav prikazu umisteneho v zasobniku prikazu
                                           								; pokud zadna procedura nenastavi do 1, je prikaz v tuto chvili neplatny
                                           								; pokud prikaz je pro proceduru ale nama zatim dost parametru, muji tento byt nastavit take do 1
                                           TEMP_PCLATH		equ 0x076
                                           ; 0x078 - 0x07F		-> zasobnik prikazu (data prisla po USARTU)
                                           ;**********************************************************
                                           ; BANK_1	s touto bankou pracuji procedury provadejici 32 bitove 
                                           ; 			aritmeto/logicke operace
                                           OPERAND_X1		equ 0x0A0
                                           OPERAND_X2		equ 0x0A1
                                           OPERAND_X3		equ 0x0A2
                                           OPERAND_X4		equ 0x0A3
                                           
                                           OPERAND_Y1		equ 0x0A4
                                           OPERAND_Y2		equ 0x0A5
                                           OPERAND_Y3		equ 0x0A6
                                           OPERAND_Y4		equ 0x0A7
                                           
                                           VYSLEDEK1		equ 0x0A8
                                           VYSLEDEK2		equ 0x0A9
                                           VYSLEDEK3		equ 0x0AA
                                           VYSLEDEK4		equ 0x0AB
                                           
                                           PRETECENI		equ 0x0AC
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; MAKRA
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           BANK_0	macro					; prepnuti do banky 0 v pameti dat
00000c   1303     bcf	0x3, 0x6             		bcf     STATUS,RP1		; BANK0  RP1:RP0 = 00
00000d   1283     bcf	0x3, 0x5             		bcf     STATUS,RP0    
                                           		endm
                                           BANK_1	macro					; prepnuti do banky 1 v pameti dat
0001af   1303     bcf	0x3, 0x6             		bcf     STATUS,RP1		; BANK1  RP1:RP0 = 01
0001b0   1683     bsf	0x3, 0x5             		bsf     STATUS,RP0    
                                           		endm
                                           BANK_2	macro					; prepnuti do banky 2 v pameti dat
0001f7   1703     bsf	0x3, 0x6             		bsf     STATUS,RP1		; BANK2  RP1:RP0 = 10
0001f8   1283     bcf	0x3, 0x5             		bcf     STATUS,RP0    
                                           		endm
                                           BANK_3	macro					; prepnuti do banky 3 v pameti dat
0001fa   1703     bsf	0x3, 0x6             		bsf     STATUS,RP1		; BANK3  RP1:RP0 = 11
0001fb   1683     bsf	0x3, 0x5             		bsf     STATUS,RP0    
                                           		endm
                                           ; INDF_BANK_x slouzi k prepinani bank pro neprime adresovani pomoci INDF a FSR
                                           INDF_BANK_0	macro               
00000e   1383     bcf	0x3, 0x7             			bcf STATUS,IRP    
                                           			endm
                                           INDF_BANK_1	macro               
000488   1383     bcf	0x3, 0x7             			bcf STATUS,IRP    
                                           			endm
                                           INDF_BANK_2	macro             
000139   1783     bsf	0x3, 0x7             			bsf STATUS,IRP    
                                           			endm
                                           INDF_BANK_3	macro             
0002aa   1783     bsf	0x3, 0x7             			bsf STATUS,IRP    
                                           			endm
                                           ;**********************************************************
                                           PROG_PAGE_0	macro             
00001b   118a     bcf	0xa, 0x3             			bcf PCLATH,3
00001c   120a     bcf	0xa, 0x4             			bcf PCLATH,4
                                           			endm
                                           PROG_PAGE_1	macro             
000015   158a     bsf	0xa, 0x3             			bsf PCLATH,3
000016   120a     bcf	0xa, 0x4             			bcf PCLATH,4
                                           			endm
                                           PROG_PAGE_2	macro             
00002f   118a     bcf	0xa, 0x3             			bcf PCLATH,3
000030   160a     bsf	0xa, 0x4             			bsf PCLATH,4
                                           			endm
                                           PROG_PAGE_3	macro             
000018   158a     bsf	0xa, 0x3             			bsf PCLATH,3
000019   160a     bsf	0xa, 0x4             			bsf PCLATH,4
                                           			endm
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; PROGRAM
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ;**********************************************************
                                            org 0x0000					; PAGE 0
000000   2810     goto	0x10                  	goto START
                                            org 0x0004					; PAGE 0
000004   00f0     movwf	0x70               	movwf TEMP_WORKING
000005   0803     movf	0x3, w              	movfw STATUS
000006   00f1     movwf	0x71               	movwf TEMP_STATUS
000007   0804     movf	0x4, w              	movfw FSR
000008   00f2     movwf	0x72               	movwf TEMP_FSR
000009   080a     movf	0xa, w              	movfw PCLATH
00000a   00f6     movwf	0x76               	movwf TEMP_PCLATH
00000b   018a     clrf	0xa                 	clrf PCLATH
                                           	BANK_0
                                           	INDF_BANK_0
00000f   2acf     goto	0x2cf               	goto INTERRUPT
                                           ;**********************************************************
                                            org 0x0010					; PAGE 0
                                           	include "mp3.asm" 		; hlavni programova smycka
                                           START
000010   21c2     call	0x1c2               	call INIT_CONFIG	; nakonfiguruje preruseni, WDT, USART, pull ups...
000011   21af     call	0x1af               	call INIT_PORT		; nastavy trisy, a porty do vychozi polohy
                                           
000012   247d     call	0x47d               	call DELAY_25us 	; chvili pockame, protoze napjeti zdroje co mam doma (stary PC-AT zdroj)
000013   247d     call	0x47d               	call DELAY_25us 	; zezacatku dost kolisa a nepomuze tomu ani POR...
000014   247d     call	0x47d               	call DELAY_25us
                                           
                                           ;LOOP
                                           ;	movlw 'O'
                                           ;	call WR_USART
                                           ;	movlw 'K'
                                           ;	call WR_USART
                                           ;	call DELAY_200ms
                                           ;	call DELAY_200ms
                                           ;	goto LOOP
                                           
                                           
                                           	PROG_PAGE_1
000017   20be     call	0xbe                	call VS_INIT
                                           	PROG_PAGE_3
00001a   25f0     call	0x5f0               	call VS_LOAD_PLUGIN
                                           	PROG_PAGE_0
                                           
00001d   23c6     call	0x3c6               	call ATA_RESET				; resetujeme disk, koukneme zda tu nejakej mame
00001e   1c2e     btfss	0x2e, 0            	btfss ATA_ATTRIBUTES,ATA_OK
00001f   281d     goto	0x1d                	goto $-2					; pokud neni pripojen disk, tak se jej pokousime neustale najit...
000020   0000     nop                      	nop							; ...pokud tam zadny disk neni, tak bychom se stejne ani sem nemeli dostat, protoze budem porad cekat na WAIT_FOR_READY
                                           
000021   2432     call	0x432               	call IDENTIFY_DEVICE		; koukneme co disk umi
                                           
                                           CEK_PRIKAZ_01h
                                           	PROG_PAGE_1
000024   20dd     call	0xdd                	call CEKEJ_PRIKAZ
                                           	PROG_PAGE_0
                                           
000027   0878     movf	0x78, w             	movfw 0x078					; prvni byte prikazoveho zasobniku
000028   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; prikaz byl vybran -> prazdny zasobnik
000029   3c01     sublw	0x1                	sublw h'01'					; ...pokud to byl prikaz 01h...
00002a   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00002b   2822     goto	0x22                	goto CEK_PRIKAZ_01h
                                           
00002c   082e     movf	0x2e, w             	movfw ATA_ATTRIBUTES		; ...vodesleme zpet vlastnosti disku a jeho jmenovku (vis. popis protokolu)
00002d   229a     call	0x29a               	call WR_USART
00002e   22aa     call	0x2aa               	call ODESLI_MODEL_NUMBER	; odesleme jmeno disku 
                                           
                                           
                                           	PROG_PAGE_2
000031   2000     call	0                   	call SCAN_MBR				; najdeme oddily s FAT32 a jejich seznam dame do bufferu 2
                                           	PROG_PAGE_0
                                           CEK_PRIKAZ_02h_03h
                                           	PROG_PAGE_1
000036   20dd     call	0xdd                	call CEKEJ_PRIKAZ			; pockame si na prikaz
000037   01f5     clrf	0x75                	clrf STAV_PRIKAZU			; smazeme registr signalizujici platnost prikazu
000038   20e2     call	0xe2                	call PRIKAZ_02h				; testujeme zda prisel prikaz 02h, pokud ano tak jej provedeme a nastavime platnost prikazu
                                           	PROG_PAGE_2
00003b   21d3     call	0x1d3               	call PRIKAZ_03h				; ---//---
                                           	PROG_PAGE_0
00003e   1c75     btfss	0x75, 0            	btfss STAV_PRIKAZU,0		; Pokud si zadna z procedur prikaz neprevzala, ...
00003f   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; ...vymazeme zasobnik prikazu. (prikaz neni pro tuto chvili platny)
000040   1e2e     btfss	0x2e, 0x4          	btfss ATA_ATTRIBUTES,FAT32_LOAD	; cekame dokud nedojde k nasteni nejakeho oddilu
000041   2834     goto	0x34                	goto CEK_PRIKAZ_02h_03h		; pokud byl oddil vporadku nacten, pokracujeme...
                                           
                                           ;********************************************************************************************************************
                                           ;********************************************************************************************************************
                                           ;********************************************************************************************************************
                                           ;********************************************************************************************************************
                                           BIG_LOOP	
                                           	; Tady ta smycka beha po nacteni disku a nejake FATky porad dokola.
                                           	; Pri kazdem prubehu smyckou vyresime prikazy, ktere prisly, a pokud prehravame 
                                           	; nejakou mp3 tak dekoder nakrmime jednim sektorem...
                                           	; Mimo to je v teto smycce osefovano, ze kdyz skonci mp3, nacteme dalsi... (v zavislosti na nastaveni repeatu)
                                           	; pokud se dostaneme na konec slozky a je nastaveno vyhledavani dalsich slozek, tak nejakou najdeme...
                                           
000042   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
000043   39ff     andlw	0xff               	andlw h'FF'
000044   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000045   286b     goto	0x6b                	goto BIG_LOOP__NENI_PRIKAZ
                                           	
000046   01f5     clrf	0x75                	clrf STAV_PRIKAZU			; smazeme registr signalizujici platnost prikazu
                                           	; Pokud jsme tady, tak prisel nejaky prikaz, jdem predat prikaz jednotlivym proceduram
                                           	PROG_PAGE_1
000049   20e2     call	0xe2                	call PRIKAZ_02h				; testujeme zda prisel prikaz 02h, pokud ano tak jej provedeme a nastavime platnost prikazu
                                           	PROG_PAGE_2
00004c   21d3     call	0x1d3               	call PRIKAZ_03h				; --- // ---
                                           	PROG_PAGE_1
00004f   2108     call	0x108               	call PRIKAZ_04h				; --- // ---
000050   2115     call	0x115               	call PRIKAZ_05h				; --- // ---
000051   2146     call	0x146               	call PRIKAZ_06h				; --- // ---
000052   2168     call	0x168               	call PRIKAZ_07h				; --- // ---
000053   218f     call	0x18f               	call PRIKAZ_08h				; --- // ---
000054   21bd     call	0x1bd               	call PRIKAZ_09h				; --- // ---
000055   21f0     call	0x1f0               	call PRIKAZ_0Ah				; --- // ---
                                           	PROG_PAGE_2
000058   2312     call	0x312               	call PRIKAZ_0Bh				; --- // ---
000059   2334     call	0x334               	call PRIKAZ_0Ch				; --- // ---
00005a   2378     call	0x378               	call PRIKAZ_0Dh				; --- // ---
                                           	PROG_PAGE_1
                                           
00005d   221e     call	0x21e               	call PRIKAZ_80h				; --- // ---
00005e   228a     call	0x28a               	call PRIKAZ_81h				; --- // ---
00005f   22a9     call	0x2a9               	call PRIKAZ_82h				; --- // ---
000060   22bf     call	0x2bf               	call PRIKAZ_83h				; --- // ---
000061   22f3     call	0x2f3               	call PRIKAZ_84h				; --- // ---
                                           	PROG_PAGE_2
000064   2396     call	0x396               	call PRIKAZ_85h				; --- // ---
000065   23f3     call	0x3f3               	call PRIKAZ_86h				; --- // ---
000066   2402     call	0x402               	call PRIKAZ_87h				; --- // ---
                                           	PROG_PAGE_0
                                           	
000069   1c75     btfss	0x75, 0            	btfss STAV_PRIKAZU,0		; Pokud si zadna z procedur prikaz neprevzala, ...
00006a   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; ...vymazeme zasobnik prikazu. (prikaz neni pro tuto chvili platny)
                                           
                                           BIG_LOOP__NENI_PRIKAZ
00006b   0857     movf	0x57, w             	movfw KONST_NECINNOSTI1
00006c   0558     andwf	0x58, w            	andwf KONST_NECINNOSTI2,w
00006d   3cff     sublw	0xff               	sublw h'FF'
00006e   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
00006f   2874     goto	0x74                	goto BIG_LOOP__NO_STANDBY	; pokud je KONST_NECINNOSTI = h'FFFF', tak disk nechame porad zapnuty
                                           	
000070   0855     movf	0x55, w             	movfw CITAC_NECINNOSTI1
000071   0456     iorwf	0x56, w            	iorwf CITAC_NECINNOSTI2,w
000072   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000073   2419     call	0x419               	call ATA_STANDBY			; pokud z disku jsme jiz dlouho nic necetli, tak jej dame do STANDBY
                                           								; potrebna doba je v KONST_NECINNOSTI
                                           
                                           BIG_LOOP__NO_STANDBY
                                           
000074   1c6e     btfss	0x6e, 0            	btfss PREH_STAV0,0			; Pokud je zvoleno play,...
000075   2907     goto	0x107               	goto MP3_NOT_PLAY
                                           
000076   1cee     btfss	0x6e, 0x1          	btfss PREH_STAV0,1			; ...a je co prehravat...
000077   2907     goto	0x107               	goto MP3_NOT_PLAY
                                           	
000078   086d     movf	0x6d, w             	movfw PREH_DATA_POZICE
000079   024c     subwf	0x4c, w            	subwf CLUSTER_SIZE,W
00007a   1d03     btfss	0x3, 0x2           	btfss STATUS,Z				; ...podivame se zda jiz nejsme na konci clusteru...
00007b   28ca     goto	0xca                	goto SEND_MP3_DATA
                                           
00007c   0853     movf	0x53, w             	movfw PREH_D_FRAGMENT1		; ...pokud ano, podivame se zda nejsme na posledni casti fragmentu...
00007d   0454     iorwf	0x54, w            	iorwf PREH_D_FRAGMENT2,w
00007e   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00007f   28a0     goto	0xa0                	goto BIG_LOOP_DEC_FRAGMENT	; ...pokud ne, tak PREH_D_FRAGMENT1-- ; PREH_DATA_CL++
                                           
000080   0869     movf	0x69, w             	movfw PREH_DATA_CL1			; ...pokud jo, tak si najdeme dalsi cluster v retezci.
000081   00bc     movwf	0x3c               	movwf CLUSTER1
000082   086a     movf	0x6a, w             	movfw PREH_DATA_CL2
000083   00bd     movwf	0x3d               	movwf CLUSTER2
000084   086b     movf	0x6b, w             	movfw PREH_DATA_CL3
000085   00be     movwf	0x3e               	movwf CLUSTER3
000086   086c     movf	0x6c, w             	movfw PREH_DATA_CL4
000087   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
000088   01ed     clrf	0x6d                	clrf PREH_DATA_POZICE
000089   24eb     call	0x4eb               	call NEXT_CLUSTER
                                           	
00008a   1c3b     btfss	0x3b, 0            	btfss POZICE,0				; Pokud byl cluster posledni v retezci...
00008b   2892     goto	0x92                	goto BIG_LOOP_DALSI_FRAGMENT
                                           
00008c   2117     call	0x117               	call DALSI_SKLADBA			; ...tak najdeme dalsi soubor co se ma prehrat (pokud je nastaven repeat a dalsi kraviny)
                                           	; otestujeme zda se ma nejaka dalsi mp3 prehravat
00008d   1c6e     btfss	0x6e, 0            	btfss PREH_STAV0,0			; Je zvoleno play?
00008e   2907     goto	0x107               	goto MP3_NOT_PLAY
00008f   1cee     btfss	0x6e, 0x1          	btfss PREH_STAV0,1			; Je co prehravat?
000090   2907     goto	0x107               	goto MP3_NOT_PLAY
000091   28ca     goto	0xca                	goto SEND_MP3_DATA
                                           
                                           BIG_LOOP_DALSI_FRAGMENT
000092   083c     movf	0x3c, w             	movfw CLUSTER1
000093   00e9     movwf	0x69               	movwf PREH_DATA_CL1
000094   083d     movf	0x3d, w             	movfw CLUSTER2
000095   00ea     movwf	0x6a               	movwf PREH_DATA_CL2
000096   083e     movf	0x3e, w             	movfw CLUSTER3
000097   00eb     movwf	0x6b               	movwf PREH_DATA_CL3
000098   083f     movf	0x3f, w             	movfw CLUSTER4
000099   00ec     movwf	0x6c               	movwf PREH_DATA_CL4
                                           
00009a   2573     call	0x573               	call ZJISTI_FRAGMENT
                                           
00009b   0851     movf	0x51, w             	movfw FRAGMENT1
00009c   00d3     movwf	0x53               	movwf PREH_D_FRAGMENT1
00009d   0852     movf	0x52, w             	movfw FRAGMENT2
00009e   00d4     movwf	0x54               	movwf PREH_D_FRAGMENT2
                                           
                                           	;movlw 'F'
                                           	;call WR_USART
                                           
00009f   28ca     goto	0xca                	goto SEND_MP3_DATA
                                           BIG_LOOP_DEC_FRAGMENT
                                           	;----------------------------
0000a0   082f     movf	0x2f, w             	movfw VS_LOUDNESS
0000a1   39ff     andlw	0xff               	andlw h'FF'
0000a2   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z				; pokud je nastaven nejaky filter, tak jej reaktivujeme...
0000a3   28ba     goto	0xba                	goto BIG_LOOP_DEC_FRAGMENT_NO_PLUG
                                           
0000a4   300a     movlw	0xa                	movlw VSADDR_AIADDR
0000a5   00b6     movwf	0x36               	movwf TEMP1
0000a6   3000     movlw	0                  	movlw 0x00
0000a7   00b7     movwf	0x37               	movwf TEMP2	
0000a8   3042     movlw	0x42               	movlw 0x42
0000a9   00b8     movwf	0x38               	movwf TEMP3
                                           	PROG_PAGE_1
0000ac   201c     call	0x1c                	call VS_WR_REG				; nastavime zacatek uzivatelskeho programu (0x4200)
                                           	PROG_PAGE_0
                                           
0000af   300d     movlw	0xd                	movlw VSADDR_AICTRL0
0000b0   00b6     movwf	0x36               	movwf TEMP1
0000b1   082f     movf	0x2f, w             	movfw VS_LOUDNESS
0000b2   00b7     movwf	0x37               	movwf TEMP2	
0000b3   3000     movlw	0                  	movlw 0x00
0000b4   00b8     movwf	0x38               	movwf TEMP3
                                           	PROG_PAGE_1	
0000b7   201c     call	0x1c                	call VS_WR_REG				; nastavime pozadovany filter
                                           	PROG_PAGE_0
                                           
                                           BIG_LOOP_DEC_FRAGMENT_NO_PLUG
                                           	;----------------------------
                                           
                                           	; PREH_D_FRAGMENT1 --
0000ba   3001     movlw	0x1                	movlw .1
0000bb   02d3     subwf	0x53, f            	subwf PREH_D_FRAGMENT1,f
0000bc   1803     btfsc	0x3, 0             	btfsc STATUS,C
0000bd   28bf     goto	0xbf                	goto $+2
0000be   02d4     subwf	0x54, f            	subwf PREH_D_FRAGMENT2,f
                                           
                                           	; PREH_DATA_CL ++
0000bf   0ae9     incf	0x69, f             	incf PREH_DATA_CL1,f
0000c0   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0000c1   28c9     goto	0xc9                	goto $+8
0000c2   0aea     incf	0x6a, f             	incf PREH_DATA_CL2,f
0000c3   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0000c4   28c9     goto	0xc9                	goto $+5
0000c5   0aeb     incf	0x6b, f             	incf PREH_DATA_CL3,f
0000c6   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0000c7   28c9     goto	0xc9                	goto $+2
0000c8   0aec     incf	0x6c, f             	incf PREH_DATA_CL4,f
                                           
0000c9   01ed     clrf	0x6d                	clrf PREH_DATA_POZICE
                                           
                                           SEND_MP3_DATA
0000ca   1c6f     btfss	0x6f, 0            	btfss PREH_STAV1,0			; 0. bit = 1 => previjeni mp3 dopredu
0000cb   28e5     goto	0xe5                	goto NOT_MP3_REWIND_FORWARD
0000cc   14cd     bsf	0x4d, 0x1            	bsf VSREG_MODE_L,1			; fast forward on
                                           
0000cd   1d6f     btfss	0x6f, 0x2          	btfss PREH_STAV1,2			; 2. bit = 1 => previji se pomalu, vzdy se po nejake dobe kratky usek souboru prehraje	
0000ce   28d9     goto	0xd9                	goto MP3_REWIND_FORWARD
                                           
0000cf   0868     movf	0x68, w             	movfw PREH_CITAC_PREV		; MP3 previjime pomalu...
0000d0   3c14     sublw	0x14               	sublw .20					; ...podivame se kolik sektoru jsme previnuly...
0000d1   1803     btfsc	0x3, 0             	btfsc STATUS,C				; ...pokud jich je vic jak 20...
0000d2   28d9     goto	0xd9                	goto MP3_REWIND_FORWARD		; 
                                           	
0000d3   10cd     bcf	0x4d, 0x1            	bcf VSREG_MODE_L,1			; ...tak dalsi pustime normalne. (fast forward off)
                                           
0000d4   0868     movf	0x68, w             	movfw PREH_CITAC_PREV
0000d5   3c19     sublw	0x19               	sublw .25
0000d6   1d03     btfss	0x3, 0x2           	btfss STATUS,Z				; pokud jsme jich uz normalne pustily 5, ... (25-20)
0000d7   28d9     goto	0xd9                	goto MP3_REWIND_FORWARD
                                           
0000d8   01e8     clrf	0x68                	clrf PREH_CITAC_PREV		; ...vymazeme citac previjeni (zas nejaky sektory pustime rychle)
                                           MP3_REWIND_FORWARD
0000d9   3000     movlw	0                  	movlw VSADDR_MODE
0000da   00b6     movwf	0x36               	movwf TEMP1
0000db   084d     movf	0x4d, w             	movfw VSREG_MODE_L
0000dc   00b7     movwf	0x37               	movwf TEMP2
0000dd   01b8     clrf	0x38                	clrf TEMP3
                                           	PROG_PAGE_1	
0000e0   201c     call	0x1c                	call VS_WR_REG
                                           	PROG_PAGE_0
                                           	
0000e3   196f     btfsc	0x6f, 0x2          	btfsc PREH_STAV1,2			; 2. bit = 1 => previji se pomalu, vzdy se po nejake dobe kratky usek souboru prehraje	
0000e4   0ae8     incf	0x68, f             	incf PREH_CITAC_PREV,f
                                           NOT_MP3_REWIND_FORWARD
                                           
0000e5   0869     movf	0x69, w             	movfw PREH_DATA_CL1			; Mame zjisteny cluster a jeho cast, kterou mame prehravat...
0000e6   00bc     movwf	0x3c               	movwf CLUSTER1
0000e7   086a     movf	0x6a, w             	movfw PREH_DATA_CL2
0000e8   00bd     movwf	0x3d               	movwf CLUSTER2
0000e9   086b     movf	0x6b, w             	movfw PREH_DATA_CL3
0000ea   00be     movwf	0x3e               	movwf CLUSTER3
0000eb   086c     movf	0x6c, w             	movfw PREH_DATA_CL4
0000ec   00bf     movwf	0x3f               	movwf CLUSTER4
0000ed   086d     movf	0x6d, w             	movfw PREH_DATA_POZICE
0000ee   00bb     movwf	0x3b               	movwf POZICE
                                           
0000ef   2488     call	0x488               	call CLUSTER_TO_LBA			; zjistime si skutecnou polohu dat na disku...
0000f0   3001     movlw	0x1                	movlw .1
0000f1   00a6     movwf	0x26               	movwf SECTOR_C
0000f2   23e1     call	0x3e1               	call READ_SECTOR			; dame prikaz precist data...
                                           
0000f3   1487     bsf	0x7, 0x1             	bsf MP3_CS					; po SI posilam data
0000f4   3000     movlw	0                  	movlw .0					; posilame celkem 256 slov
0000f5   00b6     movwf	0x36               	movwf TEMP1		
                                           SEND_MP3_WORD
                                           	PROG_PAGE_1
0000f8   2097     call	0x97                	call WAIT_FOR_VSDREQ
                                           	PROG_PAGE_0
0000fb   2382     call	0x382               	call READ_DATA
0000fc   0820     movf	0x20, w             	movfw DATA_L
                                           	PROG_PAGE_1
0000ff   2000     call	0                   	call VS_WR_BYTE
000100   0821     movf	0x21, w             	movfw DATA_H
000101   2000     call	0                   	call VS_WR_BYTE
                                           	PROG_PAGE_0
000104   0bb6     decfsz	0x36, f           	decfsz TEMP1,f	
000105   28f6     goto	0xf6                	goto SEND_MP3_WORD
                                           
000106   0aed     incf	0x6d, f             	incf PREH_DATA_POZICE,f
                                           MP3_NOT_PLAY
                                           
000107   1c6e     btfss	0x6e, 0            	btfss PREH_STAV0,0			; Pokud je zvoleno play,...
000108   2842     goto	0x42                	goto BIG_LOOP
000109   18ee     btfsc	0x6e, 0x1          	btfsc PREH_STAV0,1			; ...neni co prehravat...
00010a   2842     goto	0x42                	goto BIG_LOOP
00010b   19ee     btfsc	0x6e, 0x3          	btfsc PREH_STAV0,3			; ...ma se pokracovat v prehravani...
00010c   2842     goto	0x42                	goto BIG_LOOP
00010d   1a6e     btfsc	0x6e, 0x4          	btfsc PREH_STAV0,4			; ...neni zvolen repeat...
00010e   2842     goto	0x42                	goto BIG_LOOP
00010f   1f6e     btfss	0x6e, 0x6          	btfss PREH_STAV0,6			; ...ma se pokracovat v prehravani v dalsich slozkach...
000110   2842     goto	0x42                	goto BIG_LOOP
                                           
                                           	; jdeme prozkoumavat podadresare v aktualnim adresari, nebo hledat dalsi adresare s MP3
                                           	PROG_PAGE_2
000113   2c10     goto	0x410               	goto HLEDEJ_ADRESAR
                                           HLEDEJ_ADRESAR_RETURN
                                           	PROG_PAGE_0
                                           
000116   2842     goto	0x42                	goto BIG_LOOP
                                           ;********************************************************************************************************************
                                           ;********************************************************************************************************************
                                           ;********************************************************************************************************************
                                           ;********************************************************************************************************************
                                           DALSI_SKLADBA
                                           	; tato procedura je volana, kdyz skonci mp3, aby nasla v adresari dalsi mp3 ktera se ma prehravat...
000117   224c     call	0x24c               	call ULOZ_KONFIGUTACI
                                           
                                           ;	bcf PREH_STAV0,0		; 0. bit = 	0 => stop nebo pauza (nic nehraje)
000118   10ee     bcf	0x6e, 0x1            	bcf PREH_STAV0,1		; 1. bit = 	0 => neni zadny soubor k prehravani (nastaveni bitu play nema zadny ucinek)
000119   116e     bcf	0x6e, 0x2            	bcf PREH_STAV0,2		; 2. bit = 	1 => je nastaven, kdyz se zmeni prehravany soubor (bez volani prikazu) do doby, nez prijde prikaz na dotaz STAVU... (81h)
00011a   106f     bcf	0x6f, 0              	bcf PREH_STAV1,0		; 0. bit =  0 => normalni prehravani (mp3 se nepreviji)
00011b   19ee     btfsc	0x6e, 0x3          	btfsc PREH_STAV0,3		; 3. bit = 	0 => po skonceni souboru se pokracuje v prehravani (zavisi na nastaveni repeatu)
00011c   0008     return                   	return
                                           
                                           ; PREH_STAV0
                                           ; 	4. bit = 	0 => repeat off
                                           ;				1 => repeat on
                                           ; 	5. bit =	0 => repeat adresare (prvni cluster adresare musi byt nastaven v PREH_ADDR_ZACATEK_CL[1-4] )
                                           ;				1 => repeat souboru (po skonceni prehravani souboru se ten samy soubor zacne prehravat znova)
00011d   1e6e     btfss	0x6e, 0x4          	btfss PREH_STAV0,4
00011e   2951     goto	0x151               	goto DALSI_SKLADBA_NO_R_S
00011f   1eee     btfss	0x6e, 0x5          	btfss PREH_STAV0,5
000120   2951     goto	0x151               	goto DALSI_SKLADBA_NO_R_S	
                                           DALSI_SKLADBA_REPAT_SOUBORU
000121   0862     movf	0x62, w             	movfw PREH_ADR_CL1
000122   00bc     movwf	0x3c               	movwf CLUSTER1
000123   0863     movf	0x63, w             	movfw PREH_ADR_CL2
000124   00bd     movwf	0x3d               	movwf CLUSTER2
000125   0864     movf	0x64, w             	movfw PREH_ADR_CL3
000126   00be     movwf	0x3e               	movwf CLUSTER3
000127   0865     movf	0x65, w             	movfw PREH_ADR_CL4
000128   00bf     movwf	0x3f               	movwf CLUSTER4
000129   0866     movf	0x66, w             	movfw PREH_ZAZNAM1
00012a   00e0     movwf	0x60               	movwf ZAZNAM1
00012b   0867     movf	0x67, w             	movfw PREH_ZAZNAM2
00012c   00e1     movwf	0x61               	movwf ZAZNAM2
                                           
                                           	PROG_PAGE_1
00012f   2361     call	0x361               	call SKOC_NA_ZAZNAM
                                           	PROG_PAGE_0
000132   183b     btfsc	0x3b, 0            	btfsc POZICE,0				; tento test by tu byt nemusel, protoze jsme jiz tento soubor hrali, jeden ale nikdy nevi...
000133   0008     return                   	return
                                           	PROG_PAGE_1
000136   23e1     call	0x3e1               	call FILE_INFO
                                           	PROG_PAGE_0
                                           
                                           	INDF_BANK_2
                                           	; ...nastavime jej jako prehravany soubor.
00013a   301c     movlw	0x1c               	movlw 0x1C					; 13. byte bufferu 2
00013b   0084     movwf	0x4                	movwf FSR
00013c   0800     movf	0, w                	movfw INDF
00013d   00e9     movwf	0x69               	movwf PREH_DATA_CL1
00013e   00bc     movwf	0x3c               	movwf CLUSTER1
00013f   0a84     incf	0x4, f              	incf FSR,f
000140   0800     movf	0, w                	movfw INDF
000141   00ea     movwf	0x6a               	movwf PREH_DATA_CL2
000142   00bd     movwf	0x3d               	movwf CLUSTER2
000143   0a84     incf	0x4, f              	incf FSR,f
000144   0800     movf	0, w                	movfw INDF
000145   00eb     movwf	0x6b               	movwf PREH_DATA_CL3
000146   00be     movwf	0x3e               	movwf CLUSTER3
000147   0a84     incf	0x4, f              	incf FSR,f
000148   0800     movf	0, w                	movfw INDF
000149   00ec     movwf	0x6c               	movwf PREH_DATA_CL4
00014a   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
00014b   2573     call	0x573               	call ZJISTI_FRAGMENT
                                           
00014c   0851     movf	0x51, w             	movfw FRAGMENT1
00014d   00d3     movwf	0x53               	movwf PREH_D_FRAGMENT1
00014e   0852     movf	0x52, w             	movfw FRAGMENT2
00014f   00d4     movwf	0x54               	movwf PREH_D_FRAGMENT2
                                           
000150   299d     goto	0x19d               	goto DALSI_SKLADBA_PLAY		; nic jineho nemusime nastavovat, protoze hrajeme ten samy soubor co predtim
                                           DALSI_SKLADBA_NO_R_S
                                           ; PREH_STAV0
                                           ; 	4. bit = 	0 => repeat off
                                           ;				1 => repeat on
                                           ; 	5. bit =	0 => repeat adresare (prvni cluster adresare musi byt nastaven v PREH_ADDR_ZACATEK_CL[1-4] )
                                           ;				1 => repeat souboru (po skonceni prehravani souboru se ten samy soubor zacne prehravat znova)
                                           	; tak ted jdem hledat dalsi soubor v adresari...
                                           	
                                           ; 	HL_PARAMETRY 	-- parametry hledani
                                           ;	HL_ADR_CL[1-4]	-- prnvi cluster prohledavaneho adresare
                                           ;	ZAZNAM[1-2]		-- zaznam od ktereho hledame
000151   3006     movlw	0x6                	movlw b'00000110'
000152   00d9     movwf	0x59               	movwf HL_PARAMETRY
000153   0862     movf	0x62, w             	movfw PREH_ADR_CL1
000154   00da     movwf	0x5a               	movwf HL_ADR_CL1
000155   0863     movf	0x63, w             	movfw PREH_ADR_CL2
000156   00db     movwf	0x5b               	movwf HL_ADR_CL2
000157   0864     movf	0x64, w             	movfw PREH_ADR_CL3
000158   00dc     movwf	0x5c               	movwf HL_ADR_CL3
000159   0865     movf	0x65, w             	movfw PREH_ADR_CL4
00015a   00dd     movwf	0x5d               	movwf HL_ADR_CL4
00015b   0866     movf	0x66, w             	movfw PREH_ZAZNAM1
00015c   00e0     movwf	0x60               	movwf ZAZNAM1
00015d   0867     movf	0x67, w             	movfw PREH_ZAZNAM2
00015e   00e1     movwf	0x61               	movwf ZAZNAM2
                                           	
                                           	PROG_PAGE_1
000161   2479     call	0x479               	call HLEDEJ
                                           	PROG_PAGE_0	
                                           
                                           	INDF_BANK_2
000165   3030     movlw	0x30               	movlw 0x30
000166   0084     movwf	0x4                	movwf FSR
000167   0800     movf	0, w                	movfw INDF
000168   3c06     sublw	0x6                	sublw h'06'
000169   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
00016a   2980     goto	0x180               	goto DALSI_SKLADBA_MAME_SOUBOR
                                           
                                           	; zadny dalsi mp3 soubor v adresari neni...
00016b   1e6e     btfss	0x6e, 0x4          	btfss PREH_STAV0,4				; ..podivame se, zda neni nastaven repeat slozky
00016c   0008     return                   	return
                                           
                                           	; je nastaven repeat slozky a uz neni co prehravat. Jdem hledat prvni mp3 ve slozce...
                                           
                                           	; HL_PARAMETRY
                                           	;		7. bit - tento bit nelze nastavit uzivatelem
                                           	;				= 0 > adresar je ROOT
                                           	;				= 1 > adresar neni ROOT	
00016d   3006     movlw	0x6                	movlw b'00000110'				; parametry hledani, pokud hledame prvni mp3 adresari ktery neni ROOT 
                                           									; (prvni zaznam je ukazatel na predchozi adresar)
00016e   1fd9     btfss	0x59, 0x7          	btfss HL_PARAMETRY,7
00016f   300e     movlw	0xe                	movlw b'00001110'				; parametry hledani, pokud hledame prvni mp3 v ROOT adresari (prvni zaznam)
000170   00d9     movwf	0x59               	movwf HL_PARAMETRY
                                           
000171   3001     movlw	0x1                	movlw h'01'						; prvni cluster prohledavaneho adresare mame jiz nastaven,
000172   00e0     movwf	0x60               	movwf ZAZNAM1					; parametry taky, ted jen zaznam od klereho hledame... 
000173   01e1     clrf	0x61                	clrf ZAZNAM2					; (pokud hledame v ROOTu, hledame prvni zaznam)
                                           
                                           	PROG_PAGE_1
000176   2479     call	0x479               	call HLEDEJ
                                           	PROG_PAGE_0	
                                           
                                           	INDF_BANK_2
00017a   3030     movlw	0x30               	movlw 0x30
00017b   0084     movwf	0x4                	movwf FSR
00017c   0800     movf	0, w                	movfw INDF
00017d   3c06     sublw	0x6                	sublw h'06'
00017e   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00017f   0008     return                   	return							; sem bychom se nemeli dostat, protoze kdyz uz neco hralo, tak tu nejaky soubor musi byt?!
                                           	;goto DALSI_SKLADBA_MAME_SOUBOR
                                           DALSI_SKLADBA_MAME_SOUBOR
                                           	INDF_BANK_2
000181   303c     movlw	0x3c               	movlw 0x3C
000182   0084     movwf	0x4                	movwf FSR
000183   0800     movf	0, w                	movfw INDF
000184   00e9     movwf	0x69               	movwf PREH_DATA_CL1
000185   00bc     movwf	0x3c               	movwf CLUSTER1
000186   0a84     incf	0x4, f              	incf FSR,f
000187   0800     movf	0, w                	movfw INDF
000188   00ea     movwf	0x6a               	movwf PREH_DATA_CL2
000189   00bd     movwf	0x3d               	movwf CLUSTER2
00018a   0a84     incf	0x4, f              	incf FSR,f
00018b   0800     movf	0, w                	movfw INDF
00018c   00eb     movwf	0x6b               	movwf PREH_DATA_CL3
00018d   00be     movwf	0x3e               	movwf CLUSTER3
00018e   0a84     incf	0x4, f              	incf FSR,f
00018f   0800     movf	0, w                	movfw INDF
000190   00ec     movwf	0x6c               	movwf PREH_DATA_CL4
000191   00bf     movwf	0x3f               	movwf CLUSTER4
000192   0a84     incf	0x4, f              	incf FSR,f
000193   0800     movf	0, w                	movfw INDF
000194   00e6     movwf	0x66               	movwf PREH_ZAZNAM1
000195   0a84     incf	0x4, f              	incf FSR,f
000196   0800     movf	0, w                	movfw INDF
000197   00e7     movwf	0x67               	movwf PREH_ZAZNAM2
                                           
000198   2573     call	0x573               	call ZJISTI_FRAGMENT
                                           
000199   0851     movf	0x51, w             	movfw FRAGMENT1
00019a   00d3     movwf	0x53               	movwf PREH_D_FRAGMENT1
00019b   0852     movf	0x52, w             	movfw FRAGMENT2
00019c   00d4     movwf	0x54               	movwf PREH_D_FRAGMENT2
                                           
                                           
                                           DALSI_SKLADBA_PLAY
00019d   01ed     clrf	0x6d                	clrf PREH_DATA_POZICE
00019e   146e     bsf	0x6e, 0              	bsf PREH_STAV0,0
00019f   14ee     bsf	0x6e, 0x1            	bsf PREH_STAV0,1			; nastavime si vlastosti prehravani: (PREH_STAV[0-1])
0001a0   156e     bsf	0x6e, 0x2            	bsf PREH_STAV0,2
                                           
                                           	PROG_PAGE_1
0001a3   204d     call	0x4d                	call VS_SOFT_RESET
                                           
0001a4   10cd     bcf	0x4d, 0x1            	bcf VSREG_MODE_L,1			; prehravame normalni rychlosti 
0001a5   106f     bcf	0x6f, 0              	bcf PREH_STAV1,0			; prehravame normalni rychlosti 
                                           	
0001a6   3000     movlw	0                  	movlw VSADDR_MODE
0001a7   00b6     movwf	0x36               	movwf TEMP1
0001a8   084d     movf	0x4d, w             	movfw VSREG_MODE_L
0001a9   00b7     movwf	0x37               	movwf TEMP2
0001aa   01b8     clrf	0x38                	clrf TEMP3
0001ab   201c     call	0x1c                	call VS_WR_REG
                                           	PROG_PAGE_0
                                           	
0001ae   0008     return                   	return
                                           ;********************************************************************************************************************
                                           INIT_PORT
                                           	BANK_1
                                           
0001b1   3091     movlw	0x91               	movlw b'10010001' 			; bity SO a DREQ jako vstupy (signaly z dekoderu)
0001b2   0087     movwf	0x7                	movwf MP3_PORT_TRIS
0001b3   3000     movlw	0                  	movlw b'00000000'			; adresovani disku jako vystupy
0001b4   0085     movwf	0x5                	movwf ATA_ADDRESS_TRIS		
0001b5   3000     movlw	0                  	movlw .0
0001b6   0089     movwf	0x9                	movwf ATA_CONTROL_TRIS		; ovladani disku jako vystupy
0001b7   30ff     movlw	0xff               	movlw 0xff
0001b8   0086     movwf	0x6                	movwf DATA_PORT_LOW_TRIS	; datovou sbernici jako vstupy
0001b9   0088     movwf	0x8                	movwf DATA_PORT_HIGH_TRIS	
                                           	BANK_0
                                           	
0001bc   3007     movlw	0x7                	movlw b'00000111'	; signal reset-, diow- a dior- jsou aktivni v log. 0 !!!
0001bd   0089     movwf	0x9                	movwf ATA_CONTROL
0001be   3037     movlw	0x37               	movlw b'00110111'	; CS1-, CS0- = 1 => datova sbernice disku je odpojena
0001bf   0085     movwf	0x5                	movwf ATA_ADDRESS
0001c0   0187     clrf	0x7                 	clrf MP3_PORT	
0001c1   0008     return                   	return
                                           ;**********************************************************
                                           INIT_CONFIG 	; nakonfiguruje preruseni, WDT, USART, pull ups....
                                           	BANK_0
0001c4   3031     movlw	0x31               	MOVLW b'00110001'	; preddelicka 1:8, timer1 on, interni osc
0001c5   0090     movwf	0x10               	MOVWF T1CON			; 
0001c6   018f     clrf	0xf                 	clrf TMR1H
0001c7   018e     clrf	0xe                 	clrf TMR1L
                                           
                                           	BANK_1
0001ca   30c7     movlw	0xc7               	movlw b'11000111'	; ...pull up a podobny koniny
                                           		; PORTB Pull-up Enable bit		1 = pull up enabled
                                           		; Interrupt Edge Select bit		1 = interrupt on rising edge of RB0/INT pin
                                           		; TMR0 Clock Source Select bit	0 = Internal instruction cycle clock (CLKO)
                                           		; TMR0 Source Edge Select bit	0 = Increment on low-to-high transition on RA4/T0CKI pin
                                           		; Prescaler Assignment bit		0 = Prescaler is assigned to the Timer0 module
                                           		; PS2:PS0: Prescaler Rate Select bits	111 = TMR0 Rate 1 : 256; WDT Rate 1 : 128
0001cb   0081     movwf	0x1                	movwf OPTION_REG
                                           	
0001cc   3020     movlw	0x20               	movlw b'00100000'	; povolime preruseni od USARTu (kdyz neco dostanem)
0001cd   008c     movwf	0xc                	movwf PIE1	
0001ce   3000     movlw	0                  	movlw b'00000000'	; ostatni vnejsi preruseni vymaskujeme
0001cf   008d     movwf	0xd                	movwf PIE2			
0001d0   140c     bsf	0xc, 0               	bsf PIE1, TMR1IE	; Enable Timer1 interrupt
                                           
0001d1   30c0     movlw	0xc0               	movlw b'11000000' 	; povolime preruseni na vnejsi zarizeni (USART)				
0001d2   008b     movwf	0xb                	movwf INTCON
                                           
0001d3   3026     movlw	0x26               	movlw b'00100110'	;konfigurace USARTu (asynchronni, 8bit, bez parity, rychle - (BRGH = 1))
0001d4   0098     movwf	0x18               	movwf TXSTA
                                           	BANK_0
0001d7   3090     movlw	0x90               	movlw b'10010000'	;zapnu USART
0001d8   0098     movwf	0x18               	movwf RCSTA
                                           	BANK_1
0001db   3040     movlw	0x40               	movlw .64 		; Fosc = 20 MHz, BRGH=1 => rychlost = 19231 bps
                                           	;movlw .129 	; Fosc = 20 MHz, BRGH=1 => rychlost =  9615 bps
                                           	;movlw .103 	; Fosc = 16 MHz, BRGH=1 => rychlost =  9615 bps
0001dc   0099     movwf	0x19               	movwf SPBRG	
                                           
0001dd   3007     movlw	0x7                	movlw b'00000111'
0001de   009f     movwf	0x1f               	movwf ADCON1		; vsechny vstupy (RA,RE) jako digitalni
                                           	BANK_0	
0001e1   019f     clrf	0x1f                	clrf ADCON0			; pro jistotu (vypneme A/D prevodniky)
                                           
                                           #IF SPI_SOFTWARE==1
                                           ;spi setup
                                           	BANK_1
0001e4   0194     clrf	0x14                	clrf SSPSTAT
0001e5   1714     bsf	0x14, 0x6            	bsf SSPSTAT,CKE
                                           	BANK_0
0001e8   0194     clrf	0x14                	clrf SSPCON			; SPI master, 5MHz clock
0001e9   1694     bsf	0x14, 0x5            	bsf SSPCON,SSPEN	; enable port
                                           #ENDIF
                                           ; mastaveni dulezitych registru
0001ea   01f3     clrf	0x73                	clrf PRIJATYCH_DAT	; zasobnik prikazu prazdny...
0001eb   3070     movlw	0x70               	movlw h'70'	
0001ec   00d7     movwf	0x57               	movwf KONST_NECINNOSTI1
0001ed   3017     movlw	0x17               	movlw h'17'			; 1770h = 6000d => pri 0.1s preruseni 10 minut
0001ee   00d8     movwf	0x58               	movwf KONST_NECINNOSTI2
                                           
0001ef   01e2     clrf	0x62                	clrf PREH_ADR_CL1
0001f0   01e3     clrf	0x63                	clrf PREH_ADR_CL2
0001f1   01e4     clrf	0x64                	clrf PREH_ADR_CL3
0001f2   01e5     clrf	0x65                	clrf PREH_ADR_CL4
0001f3   01e6     clrf	0x66                	clrf PREH_ZAZNAM1
0001f4   01e7     clrf	0x67                	clrf PREH_ZAZNAM2
0001f5   01ee     clrf	0x6e                	clrf PREH_STAV0
0001f6   01ef     clrf	0x6f                	clrf PREH_STAV1
                                           
                                           ; nacteni konfigurace z EEPROM
                                           	BANK_2
0001f9   018d     clrf	0xd                 	clrf EEADR
                                           	BANK_3
0001fc   140c     bsf	0xc, 0               	bsf EECON1,RD
                                           	BANK_2
0001ff   080c     movf	0xc, w              	movfw EEDATA
                                           	BANK_0
000202   00cf     movwf	0x4f               	movwf VSREG_VOL_L
                                           
                                           	BANK_2
000205   0a8d     incf	0xd, f              	incf EEADR,f
                                           	BANK_3
000208   140c     bsf	0xc, 0               	bsf EECON1,RD
                                           	BANK_2
00020b   080c     movf	0xc, w              	movfw EEDATA
                                           	BANK_0
00020e   00d0     movwf	0x50               	movwf VSREG_VOL_H
                                           	
                                           	BANK_2
000211   0a8d     incf	0xd, f              	incf EEADR,f
                                           	BANK_3
000214   140c     bsf	0xc, 0               	bsf EECON1,RD
                                           	BANK_2
000217   080c     movf	0xc, w              	movfw EEDATA
                                           	BANK_0
00021a   00ee     movwf	0x6e               	movwf PREH_STAV0
                                           
                                           	BANK_2
00021d   0a8d     incf	0xd, f              	incf EEADR,f
                                           	BANK_3
000220   140c     bsf	0xc, 0               	bsf EECON1,RD
                                           	BANK_2
000223   080c     movf	0xc, w              	movfw EEDATA
                                           	BANK_0
000226   00ef     movwf	0x6f               	movwf PREH_STAV1
000227   0008     return                   	return
                                           ;**********************************************************
                                           WR_EEPROM				; zap√≠≈°e data z EEDATA na m√≠sto EEADR
                                           	BANK_2
00022a   080c     movf	0xc, w              	movfw EEDATA
                                           	BANK_0
00022d   00b6     movwf	0x36               	movwf TEMP1			; zapisovanou hodnotu dame do TEMP1
                                           	BANK_3
000230   140c     bsf	0xc, 0               	bsf EECON1,RD
                                           	BANK_2
000233   020c     subwf	0xc, w             	subwf EEDATA,W		; podivame se, zda nechceme zapisovat hodnotu, ktera uz je zde ulozena...
                                           	BANK_0
000236   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000237   0008     return                   	return				; pokud ano, tak nic nezapisujeme a koncime
000238   0836     movf	0x36, w             	movfw TEMP1
                                           	BANK_2
00023b   008c     movwf	0xc                	movwf EEDATA
                                           	BANK_3	
00023e   138b     bcf	0xb, 0x7             	bcf INTCON,GIE		; Z√°kaz p≈ôeru≈°en√≠
00023f   150c     bsf	0xc, 0x2             	bsf EECON1,WREN		; Povolen√≠ z√°pisu
000240   3055     movlw	0x55               	movlw h'55'			; zapi≈° hodnotu
000241   008d     movwf	0xd                	movwf EECON2 		; do EECON2
000242   30aa     movlw	0xaa               	movlw h'AA'			; zapi≈° dal≈°√≠
000243   008d     movwf	0xd                	movwf EECON2 		; do EECON2
000244   148c     bsf	0xc, 0x1             	bsf EECON1,WR 		; Zah√°jen√≠ z√°pisu
000245   178b     bsf	0xb, 0x7             	bsf INTCON,GIE 		; Povol p≈ôeru≈°en√≠		
000246   188c     btfsc	0xc, 0x1           	btfsc EECON1,WR		; ƒçek√°me, ne≈æ se dokonƒç√≠ z√°pis
000247   2a46     goto	0x246               	goto $-1	
000248   120c     bcf	0xc, 0x4             	bcf EECON1,EEIF
                                           	BANK_0
00024b   0008     return                   	return
                                           ;**********************************************************
                                           ULOZ_KONFIGUTACI
                                           	; ulo≈æ√≠ do EEPROMy nataven√≠
                                           	BANK_2	
00024e   3000     movlw	0                  	movlw .0
00024f   008d     movwf	0xd                	movwf EEADR
                                           	BANK_0
000252   084f     movf	0x4f, w             	movfw VSREG_VOL_L
                                           	BANK_2
000255   008c     movwf	0xc                	movwf EEDATA
000256   2228     call	0x228               	call WR_EEPROM
                                           
                                           	BANK_2
000259   3001     movlw	0x1                	movlw .1
00025a   008d     movwf	0xd                	movwf EEADR
                                           	BANK_0
00025d   0850     movf	0x50, w             	movfw VSREG_VOL_H
                                           	BANK_2
000260   008c     movwf	0xc                	movwf EEDATA
000261   2228     call	0x228               	call WR_EEPROM
                                           
                                           	BANK_2
000264   3002     movlw	0x2                	movlw .2
000265   008d     movwf	0xd                	movwf EEADR
                                           	BANK_0
000268   086e     movf	0x6e, w             	movfw PREH_STAV0
                                           	BANK_2
00026b   008c     movwf	0xc                	movwf EEDATA
00026c   2228     call	0x228               	call WR_EEPROM
                                           
                                           	BANK_2
00026f   3003     movlw	0x3                	movlw .3
000270   008d     movwf	0xd                	movwf EEADR
                                           	BANK_0
000273   086f     movf	0x6f, w             	movfw PREH_STAV1
                                           	BANK_2
000276   008c     movwf	0xc                	movwf EEDATA
000277   2228     call	0x228               	call WR_EEPROM
                                           
                                           	INDF_BANK_0
000279   3004     movlw	0x4                	movlw .4
00027a   00b7     movwf	0x37               	movwf TEMP2
00027b   3040     movlw	0x40               	movlw 0x40					; POCATEK_DAT1
00027c   0084     movwf	0x4                	movwf FSR
                                           ULOZ_KONFIGUTACI_LOOP1
00027d   0837     movf	0x37, w             	movfw TEMP2
                                           	BANK_2
000280   008d     movwf	0xd                	movwf EEADR
000281   0800     movf	0, w                	movfw INDF
000282   008c     movwf	0xc                	movwf EEDATA
000283   0a84     incf	0x4, f              	incf FSR,f
000284   2228     call	0x228               	call WR_EEPROM
                                           	; BANK_2	; neni potreba, protoze z predchozi proceduru se vracime v BANCE 0
000285   0ab7     incf	0x37, f             	incf TEMP2,f
000286   0837     movf	0x37, w             	movfw TEMP2
000287   3c08     sublw	0x8                	sublw .8
000288   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000289   2a7d     goto	0x27d               	goto ULOZ_KONFIGUTACI_LOOP1
                                           
                                           	;INDF_BANK_0
                                           	;movlw .9
                                           	;movwf TEMP2
00028a   3062     movlw	0x62               	movlw 0x62					; PREH_ADR_CL1		equ 0x062
00028b   0084     movwf	0x4                	movwf FSR
                                           ULOZ_KONFIGUTACI_LOOP2
00028c   0837     movf	0x37, w             	movfw TEMP2
                                           	BANK_2
00028f   008d     movwf	0xd                	movwf EEADR
000290   0800     movf	0, w                	movfw INDF
000291   008c     movwf	0xc                	movwf EEDATA
000292   0a84     incf	0x4, f              	incf FSR,f
000293   2228     call	0x228               	call WR_EEPROM
                                           	; BANK_2	; neni potreba, protoze z predchozi proceduru se vracime v BANCE 0
000294   0ab7     incf	0x37, f             	incf TEMP2,f
000295   0837     movf	0x37, w             	movfw TEMP2
000296   3c13     sublw	0x13               	sublw .19
000297   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000298   2a8c     goto	0x28c               	goto ULOZ_KONFIGUTACI_LOOP2
                                           
                                           	
000299   0008     return                   	return
                                           ;**********************************************************
                                           WR_USART	; odesle slovo ve workingu po USARTu
                                           			; prijimani dat je reseno prez preruseni...
                                           	BANK_1	
00029c   1c98     btfss	0x18, 0x1          	btfss TXSTA,1 
00029d   2a9a     goto	0x29a               	goto WR_USART	; cekame do chvile nez bude pripraven transmit buffer 
                                           
                                           	BANK_0	
0002a0   0099     movwf	0x19               	movwf TXREG
0002a1   0008     return                   	return
                                           ;**********************************************************
                                           ; tento podprogram bude pro budouci praci zbytecny, je zde jen proto, abych na PC videl ze program byl spusten...
                                           ;POZDRAV  ; odesle po seriove lince pozdrav
                                           ;	movlw 'A'	
                                           ;	call WR_USART
                                           ;	movlw 'h'
                                           ;	call WR_USART
                                           ;	movlw 'o'
                                           ;	call WR_USART
                                           ;	movlw 'j'
                                           ;	call WR_USART
                                           ;	movlw '!'
                                           ;	call WR_USART
                                           ;	return
                                           ;**********************************************************
                                           ; odesle data, ktera jdou z disku USARTEM. Pocet dat je v reg. TEMP1
                                           ODESLI_DATA
0002a2   2382     call	0x382               	call READ_DATA	
0002a3   0820     movf	0x20, w             	movfw DATA_L
0002a4   229a     call	0x29a               	call WR_USART
0002a5   0821     movf	0x21, w             	movfw DATA_H
0002a6   229a     call	0x29a               	call WR_USART	
0002a7   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0002a8   2aa2     goto	0x2a2               	goto ODESLI_DATA
0002a9   0008     return                   	return
                                           ;**********************************************************
                                           ODESLI_MODEL_NUMBER	; Podprogram IDENTIFY_DEVICE nam do bufferu 1 hodil jmeno disku
                                           			; mi jej ted odesleme USARTem, aby mohl byt zobrazen na displeji
                                           	INDF_BANK_3	; BUFFER_1 je v bance 3
0002ab   3090     movlw	0x90               	movlw 0x90	; na adrese 90
0002ac   0084     movwf	0x4                	movwf FSR
0002ad   3014     movlw	0x14               	movlw .20	; budeme odesilat 20 slov (40 znaku)
0002ae   00b6     movwf	0x36               	movwf TEMP1
                                           ODESLI_MODEL_NUMBER_ODESILANI
0002af   0800     movf	0, w                	movfw INDF
0002b0   00b7     movwf	0x37               	movwf TEMP2	; data do bufferu byla vkladana stylem DATA_L, DATA_H, DATA_L, DATA_H...
0002b1   0a84     incf	0x4, f              	incf FSR,F	; ASCII hodnoty jsou ale razeny stylem DATA_H, DATA_L, DATA_H, DATA_L...
0002b2   0800     movf	0, w                	movfw INDF	; proto to pisu tak slozite...
0002b3   0a84     incf	0x4, f              	incf FSR,F
                                           	
0002b4   229a     call	0x29a               	call WR_USART
0002b5   0837     movf	0x37, w             	movfw TEMP2
0002b6   229a     call	0x29a               	call WR_USART	
                                           
0002b7   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0002b8   2aaf     goto	0x2af               	goto ODESLI_MODEL_NUMBER_ODESILANI
                                           
                                           	INDF_BANK_0	
0002ba   0008     return                   	return
                                           ;**********************************************************
                                           ODESLI_BUFF2_HIGH
                                           	; odesle z horni poloviny bufferu2 tolik bytu, kolik je v TEMP1
                                           	INDF_BANK_2	; BUFFER_2 je v bance 2
0002bc   3030     movlw	0x30               	movlw 0x30	; horni pulka od adresy 30h
0002bd   0084     movwf	0x4                	movwf FSR
                                           ODESLI_BUFF2_HIGH_ODESILANI
0002be   0800     movf	0, w                	movfw INDF
0002bf   229a     call	0x29a               	call WR_USART
0002c0   0a84     incf	0x4, f              	incf FSR,F	
0002c1   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0002c2   2abe     goto	0x2be               	goto ODESLI_BUFF2_HIGH_ODESILANI
                                           
                                           	INDF_BANK_0		
0002c4   0008     return                   	return
                                           ;**************************************************************************
                                           ODESLI_BUFFER2
                                           	; v TEMP1 ocakava hodnotu kolik bytu ma odeslat
                                           	INDF_BANK_2	; BUFFER_2 je v bance 2
0002c6   3010     movlw	0x10               	movlw 0x10	; na adrese 10
0002c7   0084     movwf	0x4                	movwf FSR
                                           ODESLI_BUFFER2_ODESILANI
0002c8   0800     movf	0, w                	movfw INDF
0002c9   229a     call	0x29a               	call WR_USART
0002ca   0a84     incf	0x4, f              	incf FSR,F	
0002cb   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0002cc   2ac8     goto	0x2c8               	goto ODESLI_BUFFER2_ODESILANI
                                           
                                           	INDF_BANK_0		
0002ce   0008     return                   	return
                                           ;**********************************************************
                                           INTERRUPT					; sem se skace po zavolani preruseni (uz jsou vyreseny ulohy dulezitych registru)
0002cf   1a8c     btfsc	0xc, 0x5           	btfsc PIR1,RCIF			; testujeme o jake preruseni jde
0002d0   2ae2     goto	0x2e2               	goto INTERRUPT_USART	; Pokud jde o preruseni od USARTU, skocime...
0002d1   180c     btfsc	0xc, 0             	btfsc PIR1,TMR1IF		; testujeme o jake preruseni jde
0002d2   2ad4     goto	0x2d4               	goto INTERRUPT_TIMER1	; Pokud jde o preruseni od TIMER1, skocime...
0002d3   2aee     goto	0x2ee               	goto END_OF_INTERRUPT	; Pokud jde o jine preruseni, koncime
                                           
                                           INTERRUPT_TIMER1
0002d4   100c     bcf	0xc, 0               	bcf PIR1,TMR1IF
0002d5   30df     movlw	0xdf               	movlw h'df'
0002d6   008e     movwf	0xe                	movwf TMR1L
0002d7   300b     movlw	0xb                	movlw h'0b'
0002d8   008f     movwf	0xf                	movwf TMR1H
                                           
                                           ;	movfw CITAC_NECINNOSTI1
                                           ;	iorwf CITAC_NECINNOSTI2,w
                                           ;	btfsc STATUS,Z
                                           ;	call WR_USART
                                           
0002d9   0855     movf	0x55, w             	movfw CITAC_NECINNOSTI1
0002da   0456     iorwf	0x56, w            	iorwf CITAC_NECINNOSTI2,w
0002db   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
0002dc   2aee     goto	0x2ee               	goto END_OF_INTERRUPT	; pokud je CITAC_NECINNOSTI = 0, nic se nedekrementuje
                                           	
0002dd   3001     movlw	0x1                	movlw .1
0002de   02d5     subwf	0x55, f            	subwf CITAC_NECINNOSTI1,f
0002df   1c03     btfss	0x3, 0             	btfss STATUS,C
0002e0   02d6     subwf	0x56, f            	subwf CITAC_NECINNOSTI2,f
                                           
0002e1   2aee     goto	0x2ee               	goto END_OF_INTERRUPT
                                           
                                           INTERRUPT_USART
0002e2   081a     movf	0x1a, w             	movfw RCREG				; !!! vynulovat p≈ô√≠znak !!!	
0002e3   00f4     movwf	0x74               	movwf PRIJATE_DATO
                                           
                                           ;	movlw '['
                                           ;	call WR_USART
                                           ;	movfw PRIJATE_DATO
                                           ;	call WR_USART
                                           ;	movlw ']'
                                           ;	call WR_USART
                                           
0002e4   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
0002e5   3c07     sublw	0x7                	sublw .7				; pokud je v zasobniku uz plno (PRIJATYCH_DAT=8), tak koncime
0002e6   1c03     btfss	0x3, 0             	btfss STATUS,C
0002e7   2aee     goto	0x2ee               	goto END_OF_INTERRUPT	; Zasobnik je plny, nic prijimat nebudeme
                                           
0002e8   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
0002e9   3e78     addlw	0x78               	addlw 0x78				; zacatek zasobniku prikazu
0002ea   0084     movwf	0x4                	movwf FSR
0002eb   0874     movf	0x74, w             	movfw PRIJATE_DATO		; prijmuta data -> do W
0002ec   0080     movwf	0                  	movwf INDF				; prijate dato na prvni volne misto v zasobniku
                                           	
0002ed   0af3     incf	0x73, f             	incf  PRIJATYCH_DAT,F	; pricteme k indikaci zasobniku
                                           
                                           END_OF_INTERRUPT			; sem skocime kdyz mame vsechny veci kolem preruseni vyrizeny
0002ee   0876     movf	0x76, w             	movfw TEMP_PCLATH
0002ef   008a     movwf	0xa                	movwf PCLATH
0002f0   0872     movf	0x72, w             	movfw TEMP_FSR
0002f1   0084     movwf	0x4                	movwf FSR
0002f2   0871     movf	0x71, w             	movfw TEMP_STATUS
0002f3   0083     movwf	0x3                	movwf STATUS
0002f4   0870     movf	0x70, w             	movfw TEMP_WORKING
0002f5   0009     retfie                   	retfie
                                           ;**********************************************************
                                           DELAY_2ms
                                           ; (Fosc = 20 MHz , instr. cyklus= 200 ns) 2 000us / 0.2  us = 10 000 instrukcnich cyklu
                                           ;Variables: TMP1, TMP0
                                           ;Delay 10001 cycles
0002f6   3010     movlw	0x10                       MOVLW 0x10  ;16 DEC
0002f7   00b6     movwf	0x36                       MOVWF TMP1
0002f8   30cf     movlw	0xcf                       MOVLW 0x0CF  ;207 DEC
0002f9   00b8     movwf	0x38                       MOVWF TMP0
0002fa   0bb8     decfsz	0x38, f                   DECFSZ TMP0,F
0002fb   2afa     goto	0x2fa                       GOTO $-1
0002fc   0bb6     decfsz	0x36, f                   DECFSZ TMP1,F
0002fd   2af8     goto	0x2f8                       GOTO $-5
                                           ;End of Delay
0002fe   0008     return                   	return
                                           ;**********************************************************
                                           DELAY_200ms
                                           ; (Fosc = 20 MHz , instr. cyklus= 200 ns) 200 000us / 0.2  us = 1 000 000 instrukcnich cyklu
                                           ;Variables: TMP2, TMP1, TMP0
                                           ;Delay 1000000 cycles
0002ff   3015     movlw	0x15                       MOVLW 0x15  ;21 DEC
000300   00b7     movwf	0x37                       MOVWF TMP2
000301   3059     movlw	0x59                       MOVLW 0x59  ;89 DEC
000302   00b6     movwf	0x36                       MOVWF TMP1
000303   30b1     movlw	0xb1                       MOVLW 0x0B1  ;177 DEC
000304   00b8     movwf	0x38                       MOVWF TMP0
000305   0bb8     decfsz	0x38, f                   DECFSZ TMP0,F
000306   2b05     goto	0x305                       GOTO $-1
000307   0bb6     decfsz	0x36, f                   DECFSZ TMP1,F
000308   2b03     goto	0x303                       GOTO $-5
000309   0bb7     decfsz	0x37, f                   DECFSZ TMP2,F
00030a   2b01     goto	0x301                       GOTO $-9
                                           ;End of Delay
00030b   0008     return                   	return
                                           ;**********************************************************
                                           	include "ata.asm" 		; podprogramy na ovladani ATA disku
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           ; OBSLUZNE PODPROGRAMY PRO ATA
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           
                                           ;**********************************************************
                                           ; cteni a zapis ATA registru 
                                           ;**********************************************************
                                           RD_STATUS   
00030c   3027     movlw	0x27               	movlw D_STATUS      ; Status 
00030d   138b     bcf	0xb, 0x7             	bcf INTCON,GIE      
00030e   235f     call	0x35f               	call RUTR 
00030f   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
000310   00ac     movwf	0x2c               	movwf ATA_STATUS
000311   0008     return                   	return
                                           ;*****************************************
                                           ;RD_ERROR
                                           ;	movlw D_ERROR      ; Error
                                           ;	call RUTR
                                           ;	movwf ATA_ERROR
                                           ;	return
                                           ;*****************************************
                                           ;RD_STATUS_A     
                                           ;	movlw D_STATUS_A    ; Alternate Status 
                                           ;	call RUTR 
                                           ;	movwf ATA_STATUS_A
                                           ;	return
                                           ;*****************************************
                                           ;RD_SC
                                           ;	movlw D_SECTOR_C    ; Sector Count
                                           ;	call RUTR
                                           ;	movwf SECTOR_C
                                           ;	return
                                           ;*****************************************
                                           ;RD_LBA1
                                           ;	movlw D_LBA1    ; Sector Number 
                                           ;	call RUTR                
                                           ;	movwf LBA1 
                                           ;	return
                                           ;*****************************************
                                           ;RD_LBA2
                                           ;	movlw D_LBA2  ; Cylinder Low
                                           ;	call RUTR
                                           ;	movwf LBA2
                                           ;	return
                                           ;*****************************************
                                           ;RD_LBA3
                                           ;	movlw D_LBA3  ; Cylinder High   
                                           ;	call RUTR
                                           ;	movwf LBA3
                                           ;	return
                                           ;*****************************************
                                           RD_DEVICE
000312   3026     movlw	0x26               	movlw D_DEVICE  ; Device Head
000313   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
000314   235f     call	0x35f               	call RUTR 
000315   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
000316   00ab     movwf	0x2b               	movwf DEVICE
000317   0008     return                   	return
                                           ;*****************************************
                                           ;*****************************************
                                           WR_DC
000318   0823     movf	0x23, w             	movf DEVICE_C,w     ; Device Control
000319   00b5     movwf	0x35               	movwf TEMPW
00031a   301e     movlw	0x1e               	movlw D_DEVICE_C
00031b   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
00031c   236c     call	0x36c               	call RUTW
00031d   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
00031e   0008     return                   	return
                                           ;*****************************************
                                           WR_COMMAND          
00031f   082d     movf	0x2d, w             	movf COMMAND,w      ; Command       
000320   00b5     movwf	0x35               	movwf TEMPW
000321   3027     movlw	0x27               	movlw D_COMMAND
000322   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
000323   236c     call	0x36c               	call RUTW
000324   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
000325   0008     return                   	return
                                           ;*****************************************
                                           WR_SC	                 
000326   0826     movf	0x26, w                 movf SECTOR_C,w     ; Sector Count
000327   00b5     movwf	0x35               	movwf TEMPW
000328   3022     movlw	0x22               	movlw D_SECTOR_C     
000329   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
00032a   236c     call	0x36c               	call RUTW
00032b   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
00032c   0008     return                   	return
                                           ;*****************************************
                                           WR_LBA1
00032d   0827     movf	0x27, w             	movf LBA1,w     
00032e   00b5     movwf	0x35               	movwf TEMPW
00032f   3023     movlw	0x23               	movlw D_LBA1    
000330   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
000331   236c     call	0x36c               	call RUTW
000332   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
000333   0008     return                   	return
                                           ;*****************************************
                                           WR_LBA2
000334   0828     movf	0x28, w             	movf LBA2,w   ; Cylinder Low
000335   00b5     movwf	0x35               	movwf TEMPW
000336   3024     movlw	0x24               	movlw D_LBA2
000337   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
000338   236c     call	0x36c               	call RUTW
000339   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
00033a   0008     return                   	return
                                           ;*****************************************
                                           WR_LBA3
00033b   0829     movf	0x29, w             	movf LBA3,w   ; Cylinder High
00033c   00b5     movwf	0x35               	movwf TEMPW
00033d   3025     movlw	0x25               	movlw D_LBA3
00033e   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
00033f   236c     call	0x36c               	call RUTW
000340   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
000341   0008     return                   	return
                                           ;*****************************************
                                           WR_DEVICE
000342   082b     movf	0x2b, w             	movf DEVICE,w     ; Device Head 
000343   00b5     movwf	0x35               	movwf TEMPW
000344   3026     movlw	0x26               	movlw D_DEVICE
000345   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
000346   236c     call	0x36c               	call RUTW
000347   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
000348   0008     return                   	return
                                           ;*****************************************
                                           WR_FEATURES
000349   0824     movf	0x24, w             	movf FEATURES,w     ; Features
00034a   00b5     movwf	0x35               	movwf TEMPW
00034b   3021     movlw	0x21               	movlw D_FEATURES
00034c   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
00034d   236c     call	0x36c               	call RUTW
00034e   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
00034f   0008     return                   	return
                                           ;*****************************************
                                           ; zapise vsechny registry potrebne k vykonani prikazu (adresove registry a prikaz)
                                           WR_BLOCK
                                           ;	call WAIT_FOR_READY_FOR_COMMAND
000350   230c     call	0x30c               	call RD_STATUS
000351   182c     btfsc	0x2c, 0            	btfsc ATA_STATUS,ERR
000352   2b57     goto	0x357               	goto $+5					; Nastal error disku. Co budeme delat? S*r*m* na to a jdeme dal
000353   1bac     btfsc	0x2c, 0x7          	btfsc ATA_STATUS,BSY
000354   2b50     goto	0x350               	goto $-4					; Bsy <> 0, cekame dal 
000355   1f2c     btfss	0x2c, 0x6          	btfss ATA_STATUS,DRDY
000356   2b50     goto	0x350               	goto $-6
                                           
000357   2349     call	0x349               	call WR_FEATURES
000358   2326     call	0x326               	call WR_SC
000359   232d     call	0x32d               	call WR_LBA1
00035a   2334     call	0x334               	call WR_LBA2
00035b   233b     call	0x33b               	call WR_LBA3
00035c   2342     call	0x342               	call WR_DEVICE
00035d   231f     call	0x31f               	call WR_COMMAND
00035e   0008     return                   	return
                                           ;*****************************************
                                           ; ve workingu mame adresu registru ktery mame precist, 
                                           ; pak v nem vracime jeho hodnotu...
                                           RUTR          
00035f   0085     movwf	0x5                	movwf ATA_ADDRESS 		   ; adresa pozadovaneho registru
                                           
                                           	BANK_1
000362   30ff     movlw	0xff                   movlw 0xFF
000363   0086     movwf	0x6                    movwf DATA_PORT_LOW_TRIS   ; z datove zbernice cteme
000364   0088     movwf	0x8                    movwf DATA_PORT_HIGH_TRIS
                                           	BANK_0
                                           
000367   1109     bcf	0x9, 0x2             	bcf ATA_DIOR_N
000368   0000     nop                          nop							; PIO delay min. 120ns (PIO 4) 	
000369   0806     movf	0x6, w                  movfw DATA_PORT_LOW			; Read DD0..D7 IDE
00036a   1509     bsf	0x9, 0x2             	bsf ATA_DIOR_N
                                           
00036b   0008     return                       return
                                           ;**********************************************************
                                           ; ve workingu mame adresu registru ktery mame zapsat,
                                           ; a v reg. TEMPW hodnotu kterou mame do tohoto registru zapsat
                                           RUTW
00036c   0085     movwf	0x5                	movwf ATA_ADDRESS
                                           
                                           	BANK_1
00036f   3000     movlw	0                      movlw 0x0
000370   0086     movwf	0x6                    movwf DATA_PORT_LOW_TRIS   ; do datove sbernice zapisujeme
000371   0088     movwf	0x8                    movwf DATA_PORT_HIGH_TRIS
                                           	BANK_0
                                           
000374   0835     movf	0x35, w                 movf TEMPW,w        
000375   0086     movwf	0x6                    movwf DATA_PORT_LOW			; Write DD0..DD7 IDE 
000376   0188     clrf	0x8                 	clrf DATA_PORT_HIGH
                                           
000377   1089     bcf	0x9, 0x1             	bcf ATA_DIOW_N
000378   0000     nop                      	nop
000379   1489     bsf	0x9, 0x1             	bsf ATA_DIOW_N
                                                     
                                           	BANK_1
00037c   30ff     movlw	0xff                   movlw 0xff
00037d   0086     movwf	0x6                    movwf DATA_PORT_LOW_TRIS   ; datova sbernice na cteni
00037e   0088     movwf	0x8                    movwf DATA_PORT_HIGH_TRIS
                                           	BANK_0
                                           
000381   0008     return                   	return
                                           ;**********************************************************
                                           READ_DATA
                                           ;	call WAIT_FOR_DATA	; tento odskok do dalsich podprogramu si nemohu, dovolit, protoze mam jen 8urovnovy STACK
                                           	; Wait: ( Bsy=0 AND Drq=1 ) OR err=1
                                           	; 7   6    5  4   3   2    1   0
                                           	; BSY DRDY DF DSC DRQ CORR IDX ERR
                                           	; (cekame az disk bude mit pro nas prichystana data)
000382   3027     movlw	0x27               	movlw D_STATUS      ; Status 
000383   138b     bcf	0xb, 0x7             	bcf INTCON,GIE
000384   235f     call	0x35f               	call RUTR 
000385   178b     bsf	0xb, 0x7             	bsf INTCON,GIE
000386   00ac     movwf	0x2c               	movwf ATA_STATUS
000387   182c     btfsc	0x2c, 0            	btfsc ATA_STATUS,ERR
000388   2b8d     goto	0x38d               	goto READ_DATA_CTEME		; Nastal error disku. Co budeme delat? S*r*m* na to a data precteme...
                                           
000389   1bac     btfsc	0x2c, 0x7          	btfsc ATA_STATUS,BSY
00038a   2b82     goto	0x382               	goto READ_DATA				; Bsy <> 0, cekame dal 
                                           	
00038b   1dac     btfss	0x2c, 0x3          	btfss ATA_STATUS,DRQ
00038c   2b82     goto	0x382               	goto READ_DATA				; Drq <> 1, cekame dal 
                                           	
                                           READ_DATA_CTEME
00038d   0857     movf	0x57, w             	movfw KONST_NECINNOSTI1
00038e   00d5     movwf	0x55               	movwf CITAC_NECINNOSTI1
00038f   0858     movf	0x58, w             	movfw KONST_NECINNOSTI2
000390   00d6     movwf	0x56               	movwf CITAC_NECINNOSTI2		; disk je vypinan po urcite dobe necinosti
000391   12ae     bcf	0x2e, 0x5            	bcf ATA_ATTRIBUTES,STANDBY
                                           
000392   3020     movlw	0x20                   movlw D_DATA_R
000393   0085     movwf	0x5                	movwf ATA_ADDRESS
                                           
                                           	BANK_1
000396   30ff     movlw	0xff                   movlw 0xFF
000397   0086     movwf	0x6                    movwf DATA_PORT_LOW_TRIS   ; z datove zbernice cteme
000398   0088     movwf	0x8                    movwf DATA_PORT_HIGH_TRIS
                                           	BANK_0
                                           
00039b   1109     bcf	0x9, 0x2             	bcf ATA_DIOR_N
00039c   0000     nop                          nop							; PIO delay min. 120ns (PIO 4) 	
00039d   0000     nop                      	nop
00039e   0806     movf	0x6, w                  movfw DATA_PORT_LOW			; Read DD0..D7 IDE
00039f   00a0     movwf	0x20               	movwf DATA_L
0003a0   0808     movf	0x8, w                  movfw DATA_PORT_HIGH		; Read DD8..D15 IDE
0003a1   00a1     movwf	0x21               	movwf DATA_H
0003a2   1509     bsf	0x9, 0x2             	bsf ATA_DIOR_N
                                           
0003a3   0008     return                       return
                                           ;**********************************************************
                                           ; stava se, ze obcas nas zajima jen cast vracenych dat, tak ty ktere nas nezajimaji, preskocime
                                           ; ocakava parametr v registru TEMP1 (kolik slov ma preskocit)
                                           ; pokud TEMP1 = 0 tak preskoci 256 slov
                                           PRESKOC
0003a4   2382     call	0x382               	call READ_DATA
0003a5   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0003a6   2ba4     goto	0x3a4               	goto PRESKOC
0003a7   0008     return                   	return
                                           ;**********************************************************
                                           ; rekne disku na ze pristi instrukce, registry, data.... budou pro mastera
                                           SELECT_DEVICE
0003a8   30e0     movlw	0xe0               	movlw b'11100000'	; adresy budou v LBA, budeme pracovat s masterem
0003a9   00ab     movwf	0x2b               	movwf DEVICE
0003aa   2342     call	0x342               	call WR_DEVICE
0003ab   0008     return                   	return
                                           ;**********************************************************
                                           ZAPIS_DO_BUFFERU_1	; buffer1 ma 64B a je v bance 3 na adrese 0x190 - 0x1CF
                                           					; jako parametr dostanem TEMP1, kde je pocet bytu k zapisu
                                           					; maximalni hodnota v TEMP1 muze byt 32 (1 slovo = 2 byty)
                                           	INDF_BANK_3		; neprime adresovani na banku 3
0003ad   3090     movlw	0x90               	movlw 0x90		; adresa ja 190, devaty byt urcuje banku (0,1 / 2,3) fsr je tedy 90
0003ae   0084     movwf	0x4                	movwf FSR		
                                           ZAPIS_DO_BUFFERU_1__ZAPIS
0003af   2382     call	0x382               	call READ_DATA
                                           	
0003b0   0820     movf	0x20, w             	movfw DATA_L
0003b1   0080     movwf	0                  	movwf INDF
0003b2   0a84     incf	0x4, f              	incf FSR,F
0003b3   0821     movf	0x21, w             	movfw DATA_H
0003b4   0080     movwf	0                  	movwf INDF
0003b5   0a84     incf	0x4, f              	incf FSR,F
                                           
0003b6   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0003b7   2baf     goto	0x3af               	goto ZAPIS_DO_BUFFERU_1__ZAPIS
                                           
                                           	INDF_BANK_0	
0003b9   0008     return                   	return
                                           ;**********************************************************
                                           CLEAR_BUFFER2		; BUFFER2 je 64bytu dat v bance 2 na adrese 0x110 - 0x14F
                                           					; pouziva TEMP1
0003ba   3040     movlw	0x40               	movlw .64
0003bb   00b6     movwf	0x36               	movwf TEMP1
                                           	INDF_BANK_2		; neprime adresovani na banku 2
0003bd   3010     movlw	0x10               	movlw 0x10
0003be   0084     movwf	0x4                	movwf FSR
0003bf   3000     movlw	0                  	movlw .0
                                           
                                           CLEAR_BEFFER2__CLEAR
0003c0   0080     movwf	0                  	movwf INDF
0003c1   0a84     incf	0x4, f              	incf FSR,F
0003c2   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0003c3   2bc0     goto	0x3c0               	goto CLEAR_BEFFER2__CLEAR
                                           
                                           	INDF_BANK_0		; neprime adresovani na banku 0
0003c5   0008     return                   	return
                                           ;**********************************************************
                                           ATA_RESET
                                           	; Resetuje disk zjisti, zda vubec nejaky disk je pripojen
0003c6   01ae     clrf	0x2e                	clrf ATA_ATTRIBUTES	; registr obsahujici bity rikajici co disk umi
                                           
0003c7   1009     bcf	0x9, 0               	bcf ATA_RESET_N		; resetujeme disk
0003c8   247d     call	0x47d               	call DELAY_25us		; signal reset musi byt min. 25us
0003c9   1409     bsf	0x9, 0               	bsf ATA_RESET_N		; koncime s resetem disku
                                           
0003ca   2482     call	0x482               	call WAIT_FOR_READY	; vynulujeme device bit v DEVICE registru (disk musi byt master!), ...
0003cb   23a8     call	0x3a8               	call SELECT_DEVICE	; ...nastavime bit L - LBA addressing
                                           
0003cc   2482     call	0x482               	call WAIT_FOR_READY
0003cd   3002     movlw	0x2                   	movlw b'00000010'	; zakazeme preruseni (ted mam na mysli signal INTRQ z disku)
0003ce   00a3     movwf	0x23                  	movwf DEVICE_C		; bit nIEN = 1 -> zakazeme preruseni disku (stejne nemame signal INTRQ pripojen)
0003cf   2318     call	0x318               	call WR_DC			; zapiseme hodnotu do registru DEVICE CONTROL
                                           
0003d0   30e0     movlw	0xe0               	movlw b'11100000'	; adresy budou v LBA, budeme pracovat s masterem
0003d1   00ab     movwf	0x2b               	movwf DEVICE
0003d2   01a6     clrf	0x26                	clrf SECTOR_C
0003d3   01a7     clrf	0x27                	clrf LBA1	
0003d4   01a8     clrf	0x28                	clrf LBA2
0003d5   01a9     clrf	0x29                	clrf LBA3
0003d6   01a4     clrf	0x24                	clrf FEATURES
0003d7   3000     movlw	0                  	movlw h'00'			; code prikazu nop
0003d8   00ad     movwf	0x2d               	movwf COMMAND
0003d9   2350     call	0x350               	call WR_BLOCK		; ted provedeme prvni prikaz (nop) a podivame se co nam disk vrati
                                           
0003da   2482     call	0x482               	call WAIT_FOR_READY
0003db   2312     call	0x312               	call RD_DEVICE		; Precteme reg. device. Pokud je disk OK, tak by nam mel vratit to, co jsme do nej predtim zapsaly
0003dc   082b     movf	0x2b, w             	movfw DEVICE
0003dd   3ce0     sublw	0xe0               	sublw b'11100000'
0003de   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z		; pokud DEVICE <> b'11100000', tak tu bud disk nemame, nebo je nejakej rozsypanej, nebo je spatne svicivanej (treba SLAVE)
0003df   142e     bsf	0x2e, 0              	bsf ATA_ATTRIBUTES,ATA_OK	; 0. bit = 1 -> disk je pritomen, zapnuty a funkcni...
                                           
0003e0   0008     return                   	return		
                                           ;**********************************************************
                                           READ_SECTOR
                                           	; Tento podprogram prevezme parametry SECTOR_C (kolik sec. mame precist)
                                           	; a LBA1 - LBA4, kde je ulozena LBA adresa sectoru od ktereho mame cist
                                           	; Postara se o spravne zadani adresy do disku (LBA28 / LBA48) a zavolani prikazu ke cteni...
                                           	; Samotne cteni se musi obslouzit v jine casti programu (podle toho co cteme...)
                                           
                                           ;	call WAIT_FOR_READY
                                           	; Cekame az Bsy bit = 0 
0003e1   230c     call	0x30c               	call RD_STATUS
0003e2   182c     btfsc	0x2c, 0            	btfsc ATA_STATUS,ERR
0003e3   2be6     goto	0x3e6               	goto $+3					; Nastal error disku. Co budeme delat? S*r*m* na to a jdeme dal
0003e4   1bac     btfsc	0x2c, 0x7          	btfsc ATA_STATUS,BSY
0003e5   2be1     goto	0x3e1               	goto $-4					; Bsy <> 0, cekame dal 
                                           
                                           
                                           ;	call SELECT_DEVICE
0003e6   30e0     movlw	0xe0               	movlw b'11100000'	; adresy budou v LBA, budeme pracovat s masterem
0003e7   00ab     movwf	0x2b               	movwf DEVICE
0003e8   2342     call	0x342               	call WR_DEVICE
                                           
                                           ;	call WAIT_FOR_READY_FOR_COMMAND
0003e9   230c     call	0x30c               	call RD_STATUS
0003ea   182c     btfsc	0x2c, 0            	btfsc ATA_STATUS,ERR
0003eb   2bf0     goto	0x3f0               	goto $+5					; Nastal error disku. Co budeme delat? S*r*m* na to a jdeme dal
0003ec   1bac     btfsc	0x2c, 0x7          	btfsc ATA_STATUS,BSY
0003ed   2be9     goto	0x3e9               	goto $-4					; Bsy <> 0, cekame dal 
0003ee   1f2c     btfss	0x2c, 0x6          	btfss ATA_STATUS,DRDY
0003ef   2be9     goto	0x3e9               	goto $-6
                                           
0003f0   192e     btfsc	0x2e, 0x2          	btfsc ATA_ATTRIBUTES,LBA48_SUPPORT
0003f1   2c01     goto	0x401               	goto READ_SECTOR_LBA48
                                           
                                           READ_SECTOR_LBA27		; zadavani adresy v LBA28 je celkem jednoduche, LBA bity 24-27 jsou obsazene v dolnich 4 bitech DEVICE reg.
0003f2   01a4     clrf	0x24                	clrf FEATURES
0003f3   2349     call	0x349               	call WR_FEATURES
0003f4   2326     call	0x326               	call WR_SC
0003f5   232d     call	0x32d               	call WR_LBA1
0003f6   2334     call	0x334               	call WR_LBA2
0003f7   233b     call	0x33b               	call WR_LBA3
0003f8   082a     movf	0x2a, w             	movfw LBA4			; Z nejvyssi casti adresy...
0003f9   390f     andlw	0xf                	andlw b'00001111'	; ...pouzijeme pouze dolni 4bity...
0003fa   38e0     iorlw	0xe0               	iorlw b'11100000'	; ...horni 3bity nastavime (LBA adresovani, master)...
0003fb   00ab     movwf	0x2b               	movwf DEVICE		; ...a zapiseme do DEVICE.
0003fc   2342     call	0x342               	call WR_DEVICE
0003fd   3020     movlw	0x20               	movlw 0x20			; Read sector. OPCODE - 20h (with retries) or 21h (without retries)
0003fe   00ad     movwf	0x2d               	movwf COMMAND		; ...podle me to znamena ze prikaz 20h se bude pri neuspechu pokouset znova o cteni....
0003ff   231f     call	0x31f               	call WR_COMMAND		; ...protoze se v novejsich spicifacich jiz prikaz 21h nevyskytuje, pouzivam ke cteni 20h.
000400   0008     return                   	return
                                           
                                           READ_SECTOR_LBA48
                                           	; !!! Pripominam ze to co zde pisu (o LBA48) vim ze specifikace ATA8, v praxi jsem LBA48 na zadnem disku jeste nezkousel !!!
                                           	; Zadavani adresy pri LBA48 se o neco lisi nez LBA28. Do registru LBA 1,2,3 se data zadavaji 2x. 
                                           	; Prvi zadavani znamena horni cast adresy, druhe zadavani dolni cast adresy.
                                           	; Znova sem pisu ze v tomto programu vyuzijeme jen LBA o 32bitech (2TB) a ne celych LBA48
000401   3000     movlw	0                  	movlw .0
000402   00b5     movwf	0x35               	movwf TEMPW
000403   3022     movlw	0x22               	movlw D_SECTOR_C    ; vyssi cast parametru SECTOR_C = 0
000404   236c     call	0x36c               	call RUTW	
000405   2326     call	0x326               	call WR_SC			; nizci cast parametru SECTOR_C
                                           
000406   3000     movlw	0                  	movlw .0
000407   00b5     movwf	0x35               	movwf TEMPW
000408   3025     movlw	0x25               	movlw D_LBA3		; LBA bity 47:40
000409   236c     call	0x36c               	call RUTW
00040a   3000     movlw	0                  	movlw .0
00040b   00b5     movwf	0x35               	movwf TEMPW
00040c   3024     movlw	0x24               	movlw D_LBA2		; LBA bity 39:32
00040d   236c     call	0x36c               	call RUTW
00040e   082a     movf	0x2a, w             	movfw LBA4
00040f   00b5     movwf	0x35               	movwf TEMPW
000410   3023     movlw	0x23               	movlw D_LBA1		; LBA bity 31:24
000411   236c     call	0x36c               	call RUTW
                                           
000412   233b     call	0x33b               	call WR_LBA3		; LBA bity 23:16
000413   2334     call	0x334               	call WR_LBA2		; LBA bity 15:8
000414   232d     call	0x32d               	call WR_LBA1		; LBA bity  7:0
000415   3024     movlw	0x24               	movlw h'24'			; pri LBA48 se musi pouzit tohoto prikazu ke cteni (READ SECTOR(S) EXT - 24h, PIO data-in)
000416   00ad     movwf	0x2d               	movwf COMMAND
000417   231f     call	0x31f               	call WR_COMMAND
000418   0008     return                   	return
                                           ;**********************************************************
                                           ATA_STANDBY
000419   1aae     btfsc	0x2e, 0x5          	btfsc ATA_ATTRIBUTES,STANDBY
00041a   0008     return                   	return						; pokud disk jiz je ve standby, nebudeme posilat prikaz
                                           								; tento bit je nulovan pri cteni z disku
                                           
00041b   01a4     clrf	0x24                	clrf FEATURES
00041c   01a6     clrf	0x26                	clrf SECTOR_C
00041d   01a7     clrf	0x27                	clrf LBA1
00041e   01a8     clrf	0x28                	clrf LBA2
00041f   01a9     clrf	0x29                	clrf LBA3
                                           
000420   3096     movlw	0x96               	movlw h'96'
000421   00ad     movwf	0x2d               	movwf COMMAND
                                           
000422   230c     call	0x30c               	call RD_STATUS
000423   182c     btfsc	0x2c, 0            	btfsc ATA_STATUS,ERR
000424   2c29     goto	0x429               	goto $+5					; Nastal error disku. Co budeme delat? S*r*m* na to a jdeme dal
000425   1bac     btfsc	0x2c, 0x7          	btfsc ATA_STATUS,BSY
000426   2c22     goto	0x422               	goto $-4					; Bsy <> 0, cekame dal 
000427   1f2c     btfss	0x2c, 0x6          	btfss ATA_STATUS,DRDY
000428   2c22     goto	0x422               	goto $-6
                                           
000429   2349     call	0x349               	call WR_FEATURES
00042a   2326     call	0x326               	call WR_SC
00042b   232d     call	0x32d               	call WR_LBA1
00042c   2334     call	0x334               	call WR_LBA2
00042d   233b     call	0x33b               	call WR_LBA3
00042e   2342     call	0x342               	call WR_DEVICE
00042f   231f     call	0x31f               	call WR_COMMAND
000430   16ae     bsf	0x2e, 0x5            	bsf ATA_ATTRIBUTES,STANDBY
000431   0008     return                   	return
                                           ;**********************************************************
                                           IDENTIFY_DEVICE
                                           	; ted uz vime, ze mame pripojen nejaky disk, tento podprogram provede prikaz 
                                           	; identify device a zjisti co je disk zac. Nektere dulezite informace ulozi 
                                           	; (nastavi byty v ATA_ATTRIBUTES) a jmenovku disku hodi do bufferu
                                           
                                           	; rekneme disku, ze s nim chcem pracovat (s masterem)
000432   2482     call	0x482               	call WAIT_FOR_READY
000433   23a8     call	0x3a8               	call SELECT_DEVICE
                                           	
                                           	; podivame se zda tu vubec disk je a co podporuje (LBA)
000434   2482     call	0x482               	call WAIT_FOR_READY	; celame nez bude disk opet ready pro dalsi prikazy
                                           
000435   30e0     movlw	0xe0               	movlw b'11100000'	; adresy budou v LBA, budeme pracovat s masterem
000436   00ab     movwf	0x2b               	movwf DEVICE
000437   01a6     clrf	0x26                	clrf SECTOR_C
000438   01a7     clrf	0x27                	clrf LBA1	
000439   01a8     clrf	0x28                	clrf LBA2
00043a   01a9     clrf	0x29                	clrf LBA3
00043b   01a4     clrf	0x24                	clrf FEATURES
00043c   30ec     movlw	0xec               	movlw 0xEC			; code prikazu IDENTIFY DEVICE
00043d   00ad     movwf	0x2d               	movwf COMMAND
00043e   2350     call	0x350               	call WR_BLOCK
                                           
                                           	; pokud se neco nepodelalo, dostanem 256 16ti bitovych slov kde je napsano co disk umi a co je to zac...
                                           	; slova cisluji od nuly, (tzn. ze slov je 0-255)
00043f   301b     movlw	0x1b               	movlw .27		; prvnich 27 slov je pro nas nepotrebnych
000440   00b6     movwf	0x36               	movwf TEMP1
000441   23a4     call	0x3a4               	call PRESKOC
                                           	
                                           	; [27-46] model mumber (ASCI retezec s nazvem disku)
                                           	; tady precteme 20 slov a rovnou je odesleme do pric
                                           		; pokud nekde od disku dostavame ASCII retezec jsou data nasledujici: 
                                           		; pr. disk nam posila string ‚ÄúCopyright‚Äù
                                           		;		1. DATA_H = 'C' 
                                           		; 		1. DATA_l = 'o'
                                           		;		2. DATA_H = 'P' 
                                           		; 		2. DATA_l = 'y'
000442   3014     movlw	0x14               	movlw .20		; dalsich 20 slov obsahuje 40 s ASCII znaku s nazvem disku
000443   00b6     movwf	0x36               	movwf TEMP1
000444   23ac     call	0x3ac               	call ZAPIS_DO_BUFFERU_1
                                           		
                                           	; ted jsme uz precetli 47 slov z 256 :-)
000445   3002     movlw	0x2                	movlw .2		; dalsi 2 slova jsou nam k nicemu
000446   00b6     movwf	0x36               	movwf TEMP1
000447   23a4     call	0x3a4               	call PRESKOC
                                           		
000448   2382     call	0x382               	call READ_DATA	; slovo 49 - capabilities (schopnosti)
                                           			; 15:14 Reserved for the IDENTIFY PACKET DEVICE command.
                                           			;    13 1 = Standby timer values as specified in this standard are supported
                                           			;       0 = Standby timer values shall be managed by the device
                                           			;    12 Reserved for the IDENTIFY PACKET DEVICE command.
                                           			;    11 1 = IORDY supported
                                           			;       0 = IORDY may be supported
                                           			;    10 1 = IORDY may be disabled
                                           			;     9 1 = LBA supported
                                           			;     8 1 = DMA supported.
                                           			;   7:0 Retired	
000449   18a1     btfsc	0x21, 0x1          	btfsc DATA_H,1	;bit 9 = 1 -> LBA supported
00044a   14ae     bsf	0x2e, 0x1            	bsf ATA_ATTRIBUTES,LBA_SUPPORT
                                           
                                           	;precetli jsme 50 slov
00044b   300a     movlw	0xa                	movlw .10
00044c   00b6     movwf	0x36               	movwf TEMP1
00044d   23a4     call	0x3a4               	call PRESKOC
                                           	
00044e   2382     call	0x382               	call READ_DATA	; 60
00044f   0820     movf	0x20, w             	movfw DATA_L
                                           ;	movwf PARAM_MAX_LBA1		; nejnizsi cast adresy
000450   0821     movf	0x21, w             	movfw DATA_H
                                           ;	movwf PARAM_MAX_LBA2	
                                           	
000451   2382     call	0x382               	call READ_DATA	; 61
000452   0820     movf	0x20, w             	movfw DATA_L
                                           ;	movwf PARAM_MAX_LBA3
000453   0821     movf	0x21, w             	movfw DATA_H
                                           ;	movwf PARAM_MAX_LBA4		; nejvyssi cast adresy
                                           	
                                           	;precetli jsme 62 slov, zbyva 194
000454   3015     movlw	0x15               	movlw .21
000455   00b6     movwf	0x36               	movwf TEMP1
000456   23a4     call	0x3a4               	call PRESKOC
                                           
                                           	; 83 slov, na rade je slovo 83 (pripominam ze slova jsou cislovana od nuly)
000457   2382     call	0x382               	call READ_DATA	; 83 - command supported. Tady nas zajima bit 10 - 1 = 48-bit Address feature set supported
000458   1921     btfsc	0x21, 0x2          	btfsc DATA_H,2	; pokud disk umi LBA 48 pripiseme tuto skutecnost do ATA_ATTRIBUTES
000459   152e     bsf	0x2e, 0x2            	bsf ATA_ATTRIBUTES,LBA48_SUPPORT
                                           
                                           	;precetli jsme 84 slov
00045a   3010     movlw	0x10               	movlw .16
00045b   00b6     movwf	0x36               	movwf TEMP1
00045c   23a4     call	0x3a4               	call PRESKOC
                                           		
00045d   1d2e     btfss	0x2e, 0x2          	btfss ATA_ATTRIBUTES,LBA48_SUPPORT
00045e   2c66     goto	0x466               	goto INIT_ATA__NOT_SUPPORT_LBA48
                                           			; pokud je podporovano LBA 48, nachazi se ve slovech [100-103] skutecny pocet sektoru 
                                           			; do slov 60-61 by se sice vesel pocet sektoru u disku do 2TB, podle standardu se tam ale zapisuje pouze hodnota max pro LBA 28 (cca 120 GB)
                                           			; mi precteme ale jen nejnizsi 2 slova, predpokladam totiz ze disk neni vetsi jak 2TB
00045f   2382     call	0x382               			call READ_DATA	; 100
000460   0820     movf	0x20, w             			movfw DATA_L
                                           ;			movwf PARAM_MAX_LBA1		; nejnizsi cast adresy
000461   0821     movf	0x21, w             			movfw DATA_H
                                           ;			movwf PARAM_MAX_LBA2	
                                           
000462   2382     call	0x382               			call READ_DATA	; 101
000463   0820     movf	0x20, w             			movfw DATA_L
                                           ;			movwf PARAM_MAX_LBA3
000464   0821     movf	0x21, w             			movfw DATA_H
                                           ;			movwf PARAM_MAX_LBA4		; nejvyssi cast adresy			
000465   2c69     goto	0x469               		goto INIT_ATA__DALSI
                                           INIT_ATA__NOT_SUPPORT_LBA48
000466   3002     movlw	0x2                	movlw .2	; 100, 101
000467   00b6     movwf	0x36               	movwf TEMP1
000468   23a4     call	0x3a4               	call PRESKOC	
                                           INIT_ATA__DALSI
                                           	; precetli jsme 102 slov
000469   3004     movlw	0x4                	movlw .4	; 102, 103, 104, 105
00046a   00b6     movwf	0x36               	movwf TEMP1
00046b   23a4     call	0x3a4               	call PRESKOC
                                           
00046c   2382     call	0x382               	call READ_DATA	; slovo 106 - pokud bit 15=0 a bit 14=1, tak obsahuje pravdive informace
                                           						; pro nas je podstatne, ze pokud je bit 12 = 1, tak sektor je vetsi nez 256 slov
                                           						; pokud je sektor vetsi nez 256 slov, je jeho velikost ve slovech [117-118]
00046d   1ba1     btfsc	0x21, 0x7          	btfsc DATA_H,7
00046e   2c73     goto	0x473               	goto INIT_ATA__DALSI2
00046f   1f21     btfss	0x21, 0x6          	btfss DATA_H,6
000470   2c73     goto	0x473               	goto INIT_ATA__DALSI2
000471   1a21     btfsc	0x21, 0x4          	btfsc DATA_H,4
000472   15ae     bsf	0x2e, 0x3            	bsf ATA_ATTRIBUTES,BIG_SECTOR
                                           INIT_ATA__DALSI2
                                           	; precteno 107, zbyva 149
000473   3095     movlw	0x95               	movlw .149	; 107 - 256
000474   00b6     movwf	0x36               	movwf TEMP1
000475   23a4     call	0x3a4               	call PRESKOC
                                           		
                                           	; ted vime co mame za disk, tak se na to jdem podivat...
                                           	; pokud disk splnuje vsechny nase pozadavky, tak nastavime 7 bit v ATA_ATTRIBUTES
000476   13ae     bcf	0x2e, 0x7            	bcf ATA_ATTRIBUTES,APPLICABLE	
000477   1cae     btfss	0x2e, 0x1          	btfss ATA_ATTRIBUTES,LBA_SUPPORT
000478   0008     return                   	return
                                           	; pokud jsme tady, disk podporuje LBA (dneska se jich uz moc nevidi, co by LBA neumeli)
000479   19ae     btfsc	0x2e, 0x3          	btfsc ATA_ATTRIBUTES,BIG_SECTOR
00047a   0008     return                   	return
                                           	; mazec, disk ma velikost sektoru 256 slov, vetsi naroky na disk nemam :-)
00047b   17ae     bsf	0x2e, 0x7            	bsf ATA_ATTRIBUTES,APPLICABLE ; disk umi to co potrebujeme...	
                                           
00047c   0008     return                   	return
                                           ;**************************************************************************
                                           ;**********************************************************
                                           ; CEKACI PROCEDURY
                                           ;**********************************************************
                                           DELAY_25us
                                           	; pouziva TEMP1
                                           	; (Fosc = 20 MHz , instr. cyklus= 0.20 us) 25us / 0.20 us = 125 instrukcnich cyklu
                                           	; (Fosc = 16 MHz , instr. cyklus= 0.25 us) 25us / 0.25 us = 100 instrukcnich cyklu
                                           	; (Fosc = 04 MHz , instr. cyklus= 1.00 us) 25us / 1.00 us =  25 instrukcnich cyklu	
00047d   302a     movlw	0x2a                       MOVLW 0x2A		;42 DEC -> Delay 127 cycles
                                                   ;MOVLW 0x21		;33 DEC -> Delay 100 cycles
                                                   ;MOVLW 0x08		;25 DEC -> Delay  25 cycles
00047e   00b6     movwf	0x36                       MOVWF TEMP1
00047f   0bb6     decfsz	0x36, f                   DECFSZ TEMP1,F
000480   2c7f     goto	0x47f                       GOTO $-1
                                           	;End of Delay
000481   0008     return                   	return
                                           ;**************************************************************************
                                           WAIT_FOR_READY
                                           	; Cekame az Bsy bit = 0 
                                           	; (cekame az disk nebude zaneprazdnen)
000482   230c     call	0x30c               	call RD_STATUS
000483   082c     movf	0x2c, w             	movfw ATA_STATUS
000484   3980     andlw	0x80               	andlw b'10000000'
000485   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000486   0008     return                   	return
000487   2c82     goto	0x482               	goto WAIT_FOR_READY
                                           ;**************************************************************************
                                           ;WAIT_FOR_READY_FOR_COMMAND
                                           ;	call WAIT_FOR_READY
                                           ;	btfss ATA_STATUS,DRDY
                                           ;	goto WAIT_FOR_READY_FOR_COMMAND
                                           ;	return
                                           ;**************************************************************************
                                           	include "fat32.asm" 	; podprogramy na nacteni a praci s FAT32
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           ; OBSLUZNE PODPROGRAMY PRO FAT32
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           
                                           ;**************************************************************************
                                           CLUSTER_TO_LBA
                                           	; vezme hodnoty v CLUSTER[1-4] a POZICE (sektor v clusteru) a do LBA 1-4 vypocita skutecnou pozici na disku
                                           	; pro spravnou funkci musi byt POZICE < CLUSTER_SIZE (POZICE muze byt v rozsahu 0 .. CLUSTER_SIZE - 1)
                                           	; LBA := POCATEK_DAT + (CLUSTER * CLUSTER_SIZE) + POZICE
                                           	INDF_BANK_1 				; neprime adresovani do banku1
000489   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
00048a   0084     movwf	0x4                	movwf FSR
00048b   083c     movf	0x3c, w             	movfw CLUSTER1
00048c   0080     movwf	0                  	movwf INDF
00048d   0a84     incf	0x4, f              	incf FSR,F
00048e   083d     movf	0x3d, w             	movfw CLUSTER2
00048f   0080     movwf	0                  	movwf INDF
000490   0a84     incf	0x4, f              	incf FSR,F
000491   083e     movf	0x3e, w             	movfw CLUSTER3
000492   0080     movwf	0                  	movwf INDF
000493   0a84     incf	0x4, f              	incf FSR,F
000494   083f     movf	0x3f, w             	movfw CLUSTER4
000495   0080     movwf	0                  	movwf INDF
000496   0a84     incf	0x4, f              	incf FSR,F
                                           
                                           	; Nejdriv se koukneme zda-li CLUSTER se nerovna 0, to bychom pak vratily 
                                           	; pozici na prvnim clusteru root adresare...
000497   273e     call	0x73e               	call NULA						; if (X =  0) then PRETECENI := 0 else PRETECENI := 1
                                           	BANK_1
00049a   182c     btfsc	0x2c, 0            	btfsc PRETECENI,0
00049b   2cac     goto	0x4ac               	goto CLUSTER_TO_LBA_NO_ROOT
                                           	BANK_0
00049e   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
00049f   0084     movwf	0x4                	movwf FSR
0004a0   0848     movf	0x48, w             	movfw ROOT_DIR_CL1
0004a1   0080     movwf	0                  	movwf INDF
0004a2   0a84     incf	0x4, f              	incf FSR,F
0004a3   0849     movf	0x49, w             	movfw ROOT_DIR_CL2
0004a4   0080     movwf	0                  	movwf INDF
0004a5   0a84     incf	0x4, f              	incf FSR,F
0004a6   084a     movf	0x4a, w             	movfw ROOT_DIR_CL3
0004a7   0080     movwf	0                  	movwf INDF
0004a8   0a84     incf	0x4, f              	incf FSR,F
0004a9   084b     movf	0x4b, w             	movfw ROOT_DIR_CL4
0004aa   0080     movwf	0                  	movwf INDF
0004ab   0a84     incf	0x4, f              	incf FSR,F
                                           		
                                           CLUSTER_TO_LBA_NO_ROOT
                                           	BANK_0
                                           	; CLUSTER_SIZE je vzdy exponentem 2 (1,2,4,8,16,32,64,128), proto tento jednoduchy zapis
0004ae   18cc     btfsc	0x4c, 0x1          	btfsc CLUSTER_SIZE,1		; 2
0004af   2697     call	0x697               	call POSUNDOLEVA_1			; X := X * 2
0004b0   194c     btfsc	0x4c, 0x2          	btfsc CLUSTER_SIZE,2		; 4
0004b1   269f     call	0x69f               	call POSUNDOLEVA_2			; X := X * 4
0004b2   19cc     btfsc	0x4c, 0x3          	btfsc CLUSTER_SIZE,3		; 8
0004b3   26a8     call	0x6a8               	call POSUNDOLEVA_3			; X := X * 8
0004b4   1a4c     btfsc	0x4c, 0x4          	btfsc CLUSTER_SIZE,4		; 16
0004b5   26b2     call	0x6b2               	call POSUNDOLEVA_4			; X := X * 4
0004b6   1acc     btfsc	0x4c, 0x5          	btfsc CLUSTER_SIZE,5		; 32
0004b7   26bd     call	0x6bd               	call POSUNDOLEVA_5			; X := X * 32
0004b8   1b4c     btfsc	0x4c, 0x6          	btfsc CLUSTER_SIZE,6		; 64
0004b9   26c9     call	0x6c9               	call POSUNDOLEVA_6			; X := X * 64
0004ba   1bcc     btfsc	0x4c, 0x7          	btfsc CLUSTER_SIZE,7		; 128
0004bb   26d6     call	0x6d6               	call POSUNDOLEVA_7			; X := X * 128
                                           	
0004bc   0840     movf	0x40, w             	movfw POCATEK_DAT1
0004bd   0080     movwf	0                  	movwf INDF					; OPERAND_Y
0004be   0a84     incf	0x4, f              	incf FSR,F
0004bf   0841     movf	0x41, w             	movfw POCATEK_DAT2
0004c0   0080     movwf	0                  	movwf INDF
0004c1   0a84     incf	0x4, f              	incf FSR,F
0004c2   0842     movf	0x42, w             	movfw POCATEK_DAT3
0004c3   0080     movwf	0                  	movwf INDF
0004c4   0a84     incf	0x4, f              	incf FSR,F
0004c5   0843     movf	0x43, w             	movfw POCATEK_DAT4
0004c6   0080     movwf	0                  	movwf INDF
0004c7   0a84     incf	0x4, f              	incf FSR,F
                                           
0004c8   2629     call	0x629               	call SOUCET					; VYSLEDEK := POCATEK_DAT + (CLUSTER * CLUSTER_SIZE)
                                           
                                           	; zbyva tedy k vysledku pricist POZICE a dat nasledny vysledek do LBA	 
0004c9   083b     movf	0x3b, w             	movfw POZICE
                                           	BANK_1
0004cc   00a4     movwf	0x24               	movwf OPERAND_Y1
0004cd   01a5     clrf	0x25                	clrf OPERAND_Y2
0004ce   01a6     clrf	0x26                	clrf OPERAND_Y3
0004cf   01a7     clrf	0x27                	clrf OPERAND_Y4
0004d0   0828     movf	0x28, w             	movfw VYSLEDEK1
0004d1   00a0     movwf	0x20               	movwf OPERAND_X1
0004d2   0829     movf	0x29, w             	movfw VYSLEDEK2
0004d3   00a1     movwf	0x21               	movwf OPERAND_X2
0004d4   082a     movf	0x2a, w             	movfw VYSLEDEK3
0004d5   00a2     movwf	0x22               	movwf OPERAND_X3
0004d6   082b     movf	0x2b, w             	movfw VYSLEDEK4
0004d7   00a3     movwf	0x23               	movwf OPERAND_X4	
                                           	BANK_0
0004da   2629     call	0x629               	call SOUCET
                                           
                                           	INDF_BANK_1 				; neprime adresovani do banku1
0004dc   30a8     movlw	0xa8               	movlw 0xA8					; VYSLEDEK
0004dd   0084     movwf	0x4                	movwf FSR
0004de   0800     movf	0, w                	movfw INDF
0004df   00a7     movwf	0x27               	movwf LBA1
0004e0   0a84     incf	0x4, f              	incf FSR,F
0004e1   0800     movf	0, w                	movfw INDF
0004e2   00a8     movwf	0x28               	movwf LBA2
0004e3   0a84     incf	0x4, f              	incf FSR,F
0004e4   0800     movf	0, w                	movfw INDF
0004e5   00a9     movwf	0x29               	movwf LBA3
0004e6   0a84     incf	0x4, f              	incf FSR,F
0004e7   0800     movf	0, w                	movfw INDF
0004e8   00aa     movwf	0x2a               	movwf LBA4
0004e9   0a84     incf	0x4, f              	incf FSR,F
                                           	
0004ea   0008     return                   	return
                                           ;**************************************************************************
                                           NEXT_CLUSTER
                                           	; V CLUSTER prijme cislo clusteru, podiva se do FATky na disku a v CLUSTER vrati 
                                           	; hodnotu clustru, ktery nasleduje v retezu clusteru.
                                           	; Pokud pozadovany cluster byl posledni v retezu vrati v reg. POZICE konstantu FFh
                                           	; Pokud soucasny cluster je prazdny (coz by se stat nemelo) vrati taky v POZICE FFh
                                           	; Jinak, pokud s vse povede, dame do POZICE 0
                                           
                                           	; ! PODPROGRAM NETESTUJE ZDA NEBYLO ZADANO VETSI CISLO NEZ JE POCET CLUSTERU !!!
                                           	
0004eb   01bb     clrf	0x3b                	clrf POZICE
                                           	; LBA := [(CLUSTER * 4) / 512 ] + POCATEK_FAT
                                           	; LBA := ( CLUSTER / 128 ) + POCATEK_FAT
                                           	; offset := CLUSTER mod 128 
                                           	INDF_BANK_1 				; neprime adresovani do banku1
0004ed   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
0004ee   0084     movwf	0x4                	movwf FSR
0004ef   083c     movf	0x3c, w             	movfw CLUSTER1
0004f0   0080     movwf	0                  	movwf INDF
0004f1   0a84     incf	0x4, f              	incf FSR,F
0004f2   083d     movf	0x3d, w             	movfw CLUSTER2
0004f3   0080     movwf	0                  	movwf INDF
0004f4   0a84     incf	0x4, f              	incf FSR,F
0004f5   083e     movf	0x3e, w             	movfw CLUSTER3
0004f6   0080     movwf	0                  	movwf INDF
0004f7   0a84     incf	0x4, f              	incf FSR,F
0004f8   083f     movf	0x3f, w             	movfw CLUSTER4
0004f9   0080     movwf	0                  	movwf INDF
                                           
                                           	; Nejdriv se koukneme zda-li CLUSTER se nerovna 0, to pak musime jako cluster brat prvni cluster ROOT adr.
0004fa   273e     call	0x73e               	call NULA						; if (X =  0) then PRETECENI := 0 else PRETECENI := 1
                                           	BANK_1
0004fd   182c     btfsc	0x2c, 0            	btfsc PRETECENI,0
0004fe   2d0f     goto	0x50f               	goto NEXT_CLUSTER_NO_ROOT
                                           	BANK_0
000501   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
000502   0084     movwf	0x4                	movwf FSR
000503   0848     movf	0x48, w             	movfw ROOT_DIR_CL1
000504   0080     movwf	0                  	movwf INDF
000505   0a84     incf	0x4, f              	incf FSR,F
000506   0849     movf	0x49, w             	movfw ROOT_DIR_CL2
000507   0080     movwf	0                  	movwf INDF
000508   0a84     incf	0x4, f              	incf FSR,F
000509   084a     movf	0x4a, w             	movfw ROOT_DIR_CL3
00050a   0080     movwf	0                  	movwf INDF
00050b   0a84     incf	0x4, f              	incf FSR,F
00050c   084b     movf	0x4b, w             	movfw ROOT_DIR_CL4
00050d   0080     movwf	0                  	movwf INDF
00050e   0a84     incf	0x4, f              	incf FSR,F
                                           		
                                           NEXT_CLUSTER_NO_ROOT
                                           	BANK_0
                                           	
000511   272f     call	0x72f               	call POSUNDOPRAVA_7	; X := X div 128  ; PRETECENI := X mod 128
000512   30ac     movlw	0xac               	movlw 0xAC					; PRETECENI
000513   0084     movwf	0x4                	movwf FSR
000514   0800     movf	0, w                	movfw INDF
000515   00b6     movwf	0x36               	movwf TEMP1
                                           
000516   30a4     movlw	0xa4               	movlw 0xA4					; OPERAND_Y
000517   0084     movwf	0x4                	movwf FSR
000518   0844     movf	0x44, w             	movfw POCATEK_FAT1
000519   0080     movwf	0                  	movwf INDF
00051a   0a84     incf	0x4, f              	incf FSR,F
00051b   0845     movf	0x45, w             	movfw POCATEK_FAT2
00051c   0080     movwf	0                  	movwf INDF
00051d   0a84     incf	0x4, f              	incf FSR,F
00051e   0846     movf	0x46, w             	movfw POCATEK_FAT3
00051f   0080     movwf	0                  	movwf INDF
000520   0a84     incf	0x4, f              	incf FSR,F
000521   0847     movf	0x47, w             	movfw POCATEK_FAT4
000522   0080     movwf	0                  	movwf INDF
000523   0a84     incf	0x4, f              	incf FSR,F
                                           
000524   2629     call	0x629               	call SOUCET
                                           	
000525   0800     movf	0, w                	movfw INDF					; FSR ukazuje na VYSLEDEK
000526   00a7     movwf	0x27               	movwf LBA1
000527   0a84     incf	0x4, f              	incf FSR,F
000528   0800     movf	0, w                	movfw INDF
000529   00a8     movwf	0x28               	movwf LBA2
00052a   0a84     incf	0x4, f              	incf FSR,F
00052b   0800     movf	0, w                	movfw INDF
00052c   00a9     movwf	0x29               	movwf LBA3
00052d   0a84     incf	0x4, f              	incf FSR,F
00052e   0800     movf	0, w                	movfw INDF
00052f   00aa     movwf	0x2a               	movwf LBA4
000530   0a84     incf	0x4, f              	incf FSR,F
                                           	
000531   01a4     clrf	0x24                	clrf FEATURES
000532   3001     movlw	0x1                	movlw .1
000533   00a6     movwf	0x26               	movwf SECTOR_C
000534   23e1     call	0x3e1               	call READ_SECTOR
                                           
000535   1003     bcf	0x3, 0               	bcf STATUS,C				; TEMP1 := CLUSTER mod 128 (TEMP1 je v intervalu 0..127)
000536   0d36     rlf	0x36, w              	rlf TEMP1,W					; W := TEMP1 * 2
000537   00b6     movwf	0x36               	movwf TEMP1
000538   39ff     andlw	0xff               	andlw h'FF'
000539   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00053a   23a4     call	0x3a4               	call PRESKOC				; pokud je zaznam o clusteru na nulte pozici v sektoru, nic preskakovat nebudem...
                                           
                                           
00053b   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
00053c   0084     movwf	0x4                	movwf FSR		
00053d   2382     call	0x382               	call READ_DATA	
00053e   0820     movf	0x20, w             	movfw DATA_L
00053f   0080     movwf	0                  	movwf INDF
000540   00bc     movwf	0x3c               	movwf CLUSTER1
000541   0a84     incf	0x4, f              	incf FSR,F
000542   0821     movf	0x21, w             	movfw DATA_H
000543   0080     movwf	0                  	movwf INDF
000544   00bd     movwf	0x3d               	movwf CLUSTER2
000545   0a84     incf	0x4, f              	incf FSR,F	
000546   2382     call	0x382               	call READ_DATA	
000547   0820     movf	0x20, w             	movfw DATA_L
000548   0080     movwf	0                  	movwf INDF
000549   00be     movwf	0x3e               	movwf CLUSTER3
00054a   0a84     incf	0x4, f              	incf FSR,F
00054b   0821     movf	0x21, w             	movfw DATA_H
00054c   0080     movwf	0                  	movwf INDF
00054d   00bf     movwf	0x3f               	movwf CLUSTER4
00054e   0a84     incf	0x4, f              	incf FSR,F
                                           
                                           	; ted mame hodnotu clusteru ktery nam byl na pocatku predan v reg. CLUSTER, podivame se zda nebyl nasledkem 
                                           	; nejake chyby prazdny, nebo zda neni posledni v alokacnim retezu
00054f   273e     call	0x73e               	call NULA						; if (OPERAND_X =  0) then PRETECENI := 0 else PRETECENI := 1
                                           	BANK_1
000552   182c     btfsc	0x2c, 0            	btfsc PRETECENI,0
000553   2d59     goto	0x559               	goto NEXT_CLUSTER_NEPRAZDNY
                                           	BANK_0
000556   30ff     movlw	0xff               	movlw h'FF'
000557   00bb     movwf	0x3b               	movwf POZICE
000558   2d70     goto	0x570               	goto NEXT_CLUSTER_KONEC			; Nevim sice jak by se toto mohlo stat, ale cluster byl prazdny, proto neni jiz co resit..
                                           NEXT_CLUSTER_NEPRAZDNY
                                           	BANK_0
                                           	; Ted se podivame zda cluster nebyl posledni v alokacnim retezu -> cluster >= 0x0FFFFFF7
00055b   30f7     movlw	0xf7               	movlw 0xF7
00055c   0080     movwf	0                  	movwf INDF
00055d   0a84     incf	0x4, f              	incf FSR,F
00055e   30ff     movlw	0xff               	movlw 0xFF
00055f   0080     movwf	0                  	movwf INDF
000560   0a84     incf	0x4, f              	incf FSR,F
000561   30ff     movlw	0xff               	movlw 0xFF
000562   0080     movwf	0                  	movwf INDF
000563   0a84     incf	0x4, f              	incf FSR,F
000564   300f     movlw	0xf                	movlw 0x0F
000565   0080     movwf	0                  	movwf INDF
000566   0a84     incf	0x4, f              	incf FSR,F
                                           	
000567   2655     call	0x655               	call ROZDIL						; VYSLEDEK := X - Y 
                                           									; pri podteceni PRETECENI = 1 ( VYSLEDEK < 0 => PRETECENI = 1 )
                                           	BANK_1
00056a   182c     btfsc	0x2c, 0            	btfsc PRETECENI,0
00056b   2d70     goto	0x570               	goto NEXT_CLUSTER_KONEC
                                           	BANK_0
00056e   30ff     movlw	0xff               	movlw h'FF'
00056f   00bb     movwf	0x3b               	movwf POZICE
                                           NEXT_CLUSTER_KONEC
                                           	BANK_0
000572   0008     return                   	return
                                           ;**************************************************************************
                                           ZJISTI_FRAGMENT
                                           ; v CLUSTER[1-4] prijme cislo clusteru a do FRAGMENT[1-2] umisti kolik clusteru 
                                           ; po tomto clusteru nasledujich tvori jeden fragment
                                           ; (pokud je retezec tvoren pouze z tohoto clusteru, je vraceno cislo 0)
                                           
                                           ; Pokud soucasny cluster je prazdny (coz by se stat nemelo) vrati v POZICE FFh
                                           ; Jinak, pokud s vse povede, dame do POZICE 0
                                           
                                           ; ! PODPROGRAM NENI POUZITELNY PRO CLUSTER 0 (prvni cluster ROOT adresare)
                                           ; ! PODPROGRAM NETESTUJE ZDA NEBYLO ZADANO VETSI CISLO NEZ JE POCET CLUSTERU !!!
                                           	
000573   01bb     clrf	0x3b                	clrf POZICE
000574   01d2     clrf	0x52                	clrf FRAGMENT2
                                           	;movlw .1
                                           	;movwf FRAGMENT1
000575   01d1     clrf	0x51                	clrf FRAGMENT1
                                           	; LBA := [(CLUSTER * 4) / 512 ] + POCATEK_FAT
                                           	; LBA := ( CLUSTER / 128 ) + POCATEK_FAT
                                           	; offset := CLUSTER mod 128 
                                           	INDF_BANK_1 				; neprime adresovani do banku1
000577   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
000578   0084     movwf	0x4                	movwf FSR
000579   083c     movf	0x3c, w             	movfw CLUSTER1
00057a   00da     movwf	0x5a               	movwf HL_ADR_CL1			; v HL_ADR_CL[1-4] mam hodnotu clusteru na predchozim zaznamu, proto si prvni cluster dame sem
00057b   0080     movwf	0                  	movwf INDF
00057c   0a84     incf	0x4, f              	incf FSR,F
00057d   083d     movf	0x3d, w             	movfw CLUSTER2
00057e   00db     movwf	0x5b               	movwf HL_ADR_CL2
00057f   0080     movwf	0                  	movwf INDF
000580   0a84     incf	0x4, f              	incf FSR,F
000581   083e     movf	0x3e, w             	movfw CLUSTER3
000582   00dc     movwf	0x5c               	movwf HL_ADR_CL3
000583   0080     movwf	0                  	movwf INDF
000584   0a84     incf	0x4, f              	incf FSR,F
000585   083f     movf	0x3f, w             	movfw CLUSTER4
000586   00dd     movwf	0x5d               	movwf HL_ADR_CL4
000587   0080     movwf	0                  	movwf INDF
                                           
000588   272f     call	0x72f               	call POSUNDOPRAVA_7			; X := X div 128  ; PRETECENI := X mod 128
000589   30ac     movlw	0xac               	movlw 0xAC					; PRETECENI
00058a   0084     movwf	0x4                	movwf FSR
00058b   0800     movf	0, w                	movfw INDF
00058c   00ba     movwf	0x3a               	movwf TEMP5					; TEMP5 := CLUSTER mod 128 (TEMP5 je v intervalu 0..127)
                                           ;	bcf STATUS,C				
                                           ;	rlf TEMP2,W					; W := TEMP1 * 2
                                           
00058d   30a4     movlw	0xa4               	movlw 0xA4					; OPERAND_Y
00058e   0084     movwf	0x4                	movwf FSR
00058f   0844     movf	0x44, w             	movfw POCATEK_FAT1
000590   0080     movwf	0                  	movwf INDF
000591   0a84     incf	0x4, f              	incf FSR,F
000592   0845     movf	0x45, w             	movfw POCATEK_FAT2
000593   0080     movwf	0                  	movwf INDF
000594   0a84     incf	0x4, f              	incf FSR,F
000595   0846     movf	0x46, w             	movfw POCATEK_FAT3
000596   0080     movwf	0                  	movwf INDF
000597   0a84     incf	0x4, f              	incf FSR,F
000598   0847     movf	0x47, w             	movfw POCATEK_FAT4
000599   0080     movwf	0                  	movwf INDF
00059a   0a84     incf	0x4, f              	incf FSR,F
                                           
00059b   2629     call	0x629               	call SOUCET
                                           	
00059c   0800     movf	0, w                	movfw INDF					; FSR ukazuje na VYSLEDEK
00059d   00a7     movwf	0x27               	movwf LBA1
00059e   0a84     incf	0x4, f              	incf FSR,F
00059f   0800     movf	0, w                	movfw INDF
0005a0   00a8     movwf	0x28               	movwf LBA2
0005a1   0a84     incf	0x4, f              	incf FSR,F
0005a2   0800     movf	0, w                	movfw INDF
0005a3   00a9     movwf	0x29               	movwf LBA3
0005a4   0a84     incf	0x4, f              	incf FSR,F
0005a5   0800     movf	0, w                	movfw INDF
0005a6   00aa     movwf	0x2a               	movwf LBA4
0005a7   0a84     incf	0x4, f              	incf FSR,F
                                           
0005a8   01a4     clrf	0x24                	clrf FEATURES
0005a9   3001     movlw	0x1                	movlw .1
0005aa   00a6     movwf	0x26               	movwf SECTOR_C
0005ab   23e1     call	0x3e1               	call READ_SECTOR
                                           
0005ac   1003     bcf	0x3, 0               	bcf STATUS,C
0005ad   0d3a     rlf	0x3a, w              	rlf TEMP5,w
0005ae   00b6     movwf	0x36               	movwf TEMP1					; TEMP1 := TEMP5 * 2
0005af   083a     movf	0x3a, w             	movfw TEMP5
0005b0   39ff     andlw	0xff               	andlw h'FF'
0005b1   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0005b2   23a4     call	0x3a4               	call PRESKOC				; pokud je zaznam o clusteru na nulte pozici v sektoru, nic preskakovat nebudem...
                                           								; preskakujeme pouze na zacatku, pak jdou hezky za sebou
0005b3   2db8     goto	0x5b8               	goto ZJISTI_FRAGMENT_CLUSTER
                                           ZJISTI_FRAGMENT_CTI_SECTOR
                                           
0005b4   01a4     clrf	0x24                	clrf FEATURES
0005b5   3001     movlw	0x1                	movlw .1
0005b6   00a6     movwf	0x26               	movwf SECTOR_C
0005b7   23e1     call	0x3e1               	call READ_SECTOR
                                           
                                           ZJISTI_FRAGMENT_CLUSTER
0005b8   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
0005b9   0084     movwf	0x4                	movwf FSR		
0005ba   2382     call	0x382               	call READ_DATA	
0005bb   0820     movf	0x20, w             	movfw DATA_L
0005bc   0080     movwf	0                  	movwf INDF
0005bd   0a84     incf	0x4, f              	incf FSR,F
0005be   0821     movf	0x21, w             	movfw DATA_H
0005bf   0080     movwf	0                  	movwf INDF
0005c0   0a84     incf	0x4, f              	incf FSR,F	
0005c1   2382     call	0x382               	call READ_DATA	
0005c2   0820     movf	0x20, w             	movfw DATA_L
0005c3   0080     movwf	0                  	movwf INDF
0005c4   0a84     incf	0x4, f              	incf FSR,F
0005c5   0821     movf	0x21, w             	movfw DATA_H
0005c6   0080     movwf	0                  	movwf INDF
0005c7   0a84     incf	0x4, f              	incf FSR,F
                                           
                                           
                                           	; ted mame hodnotu clusteru v OPERAND_X. pokud je posledni v retezci, nebo je prazdny, tak koncime
0005c8   273e     call	0x73e               	call NULA						; if (OPERAND_X =  0) then PRETECENI := 0 else PRETECENI := 1
                                           	BANK_1
0005cb   182c     btfsc	0x2c, 0            	btfsc PRETECENI,0
0005cc   2dd0     goto	0x5d0               	goto ZJISTI_FRAGMENT_NEPRAZDNY
                                           	BANK_0
0005cf   2e26     goto	0x626               	goto ZJISTI_FRAGMENT_KONEC			; Nevim sice jak by se toto mohlo stat, ale cluster byl prazdny, proto neni jiz co resit..
                                           ZJISTI_FRAGMENT_NEPRAZDNY
                                           	BANK_0
                                           
                                           	; Ted se podivame zda cluster nebyl posledni v alokacnim retezu -> cluster >= 0x0FFFFFF7
0005d2   30f7     movlw	0xf7               	movlw 0xF7
0005d3   0080     movwf	0                  	movwf INDF
0005d4   0a84     incf	0x4, f              	incf FSR,F
0005d5   30ff     movlw	0xff               	movlw 0xFF
0005d6   0080     movwf	0                  	movwf INDF
0005d7   0a84     incf	0x4, f              	incf FSR,F
0005d8   30ff     movlw	0xff               	movlw 0xFF
0005d9   0080     movwf	0                  	movwf INDF
0005da   0a84     incf	0x4, f              	incf FSR,F
0005db   300f     movlw	0xf                	movlw 0x0F
0005dc   0080     movwf	0                  	movwf INDF
0005dd   0a84     incf	0x4, f              	incf FSR,F
                                           	
0005de   2655     call	0x655               	call ROZDIL						; VYSLEDEK := X - Y 
                                           									; pri podteceni PRETECENI = 1 ( VYSLEDEK < 0 => PRETECENI = 1 )
                                           	BANK_1
0005e1   1c2c     btfss	0x2c, 0            	btfss PRETECENI,0				; pokud je vysledek zaporny, je neni cluster posledni a my pokracujeme...
0005e2   2e26     goto	0x626               	goto ZJISTI_FRAGMENT_KONEC
                                           	BANK_0
                                           
0005e5   30a4     movlw	0xa4               	movlw 0xA4						; OPERAND_Y
0005e6   0084     movwf	0x4                	movwf FSR		
0005e7   085a     movf	0x5a, w             	movfw HL_ADR_CL1				; v HL_ADR_CL[1-4] mam hodnotu clusteru na predchozim zaznamu
0005e8   0080     movwf	0                  	movwf INDF
0005e9   0a84     incf	0x4, f              	incf FSR,F
0005ea   085b     movf	0x5b, w             	movfw HL_ADR_CL2
0005eb   0080     movwf	0                  	movwf INDF
0005ec   0a84     incf	0x4, f              	incf FSR,F
0005ed   085c     movf	0x5c, w             	movfw HL_ADR_CL3
0005ee   0080     movwf	0                  	movwf INDF
0005ef   0a84     incf	0x4, f              	incf FSR,F
0005f0   085d     movf	0x5d, w             	movfw HL_ADR_CL4
0005f1   0080     movwf	0                  	movwf INDF
                                           
                                           
0005f2   2655     call	0x655               	call ROZDIL						; VYSLEDEK := SOUCASNY_CL - PREDCHOZI_CL
                                           									; vysledek se musi rovnat 1
                                           	BANK_1
0005f5   082b     movf	0x2b, w             	movfw VYSLEDEK4
0005f6   042a     iorwf	0x2a, w            	iorwf VYSLEDEK3,W
0005f7   0429     iorwf	0x29, w            	iorwf VYSLEDEK2,W
0005f8   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0005f9   2e26     goto	0x626               	goto ZJISTI_FRAGMENT_KONEC
0005fa   0828     movf	0x28, w             	movfw VYSLEDEK1
0005fb   3c01     sublw	0x1                	sublw .1
0005fc   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0005fd   2e26     goto	0x626               	goto ZJISTI_FRAGMENT_KONEC
                                           	BANK_0
                                           
                                           	; OK, ted vime, ze predchozi cluster byl o jednu mensi, nez soucasny...
                                           	; podivame se zda neni FRAGMENT moc velky...
000600   1bd2     btfsc	0x52, 0x7          	btfsc FRAGMENT2,7
000601   2e26     goto	0x626               	goto ZJISTI_FRAGMENT_KONEC
                                           	
                                           	; FRAGMENT++
000602   0ad1     incf	0x51, f             	incf FRAGMENT1,f
000603   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000604   0ad2     incf	0x52, f             	incf FRAGMENT2,f
                                           
000605   30a0     movlw	0xa0               	movlw 0xA0						; OPERAND_X
000606   0084     movwf	0x4                	movwf FSR		
000607   0800     movf	0, w                	movfw INDF
000608   00da     movwf	0x5a               	movwf HL_ADR_CL1				; v HL_ADR_CL[1-4] mam hodnotu clusteru na predchozim zaznamu
000609   0a84     incf	0x4, f              	incf FSR,F
00060a   0800     movf	0, w                	movfw INDF
00060b   00db     movwf	0x5b               	movwf HL_ADR_CL2
00060c   0a84     incf	0x4, f              	incf FSR,F
00060d   0800     movf	0, w                	movfw INDF
00060e   00dc     movwf	0x5c               	movwf HL_ADR_CL3
00060f   0a84     incf	0x4, f              	incf FSR,F
000610   0800     movf	0, w                	movfw INDF
000611   00dd     movwf	0x5d               	movwf HL_ADR_CL4
                                           
                                           
000612   0aba     incf	0x3a, f             	incf TEMP5,f
000613   083a     movf	0x3a, w             	movfw TEMP5
000614   3c80     sublw	0x80               	sublw .128
000615   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000616   2db8     goto	0x5b8               	goto ZJISTI_FRAGMENT_CLUSTER
                                           
000617   01ba     clrf	0x3a                	clrf TEMP5
                                           
                                           	; LBA++
000618   3001     movlw	0x1                	movlw .1
000619   07a7     addwf	0x27, f            	addwf LBA1,f
00061a   1c03     btfss	0x3, 0             	btfss STATUS,C
00061b   2e23     goto	0x623               	goto ZJISTI_FRAGMENT_INC_KONEC
00061c   07a8     addwf	0x28, f            	addwf LBA2,f
00061d   1c03     btfss	0x3, 0             	btfss STATUS,C
00061e   2e23     goto	0x623               	goto ZJISTI_FRAGMENT_INC_KONEC
00061f   07a9     addwf	0x29, f            	addwf LBA3,f
000620   1c03     btfss	0x3, 0             	btfss STATUS,C
000621   2e23     goto	0x623               	goto ZJISTI_FRAGMENT_INC_KONEC
000622   07aa     addwf	0x2a, f            	addwf LBA4,f
                                           ZJISTI_FRAGMENT_INC_KONEC
                                           
                                           	BANK_0
000625   2db4     goto	0x5b4               	goto ZJISTI_FRAGMENT_CTI_SECTOR
                                           
                                           ZJISTI_FRAGMENT_KONEC
                                           	BANK_0
000628   0008     return                   	return
                                           ;**************************************************************************
                                           	include "aritmetic.asm"	; podprogramy vykonavajici zakladni aritmetologicke operace
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           ; Obsahuje podrogramy realizujici zakladni aritmeticke operace
                                           ; pouzivane v mp3 preprcavaci. Vsechny operace se provadi 
                                           ; s 32bitovymi cisly.
                                           ; 
                                           ; Pro praci aritmetickych procedur je rezervovana BANKA 1 !!!!!
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           SOUCET
                                           ; provede soucet hodnoty v registrech OPERAND_X[1..4] 
                                           ; s hodnotou v OPERAND_Y[1..4] a umisti do VYSLEDEK[1..4] 
                                           ; pokud dojde k preteceni, nastavi se PRETECENI do 1
                                           ; (byty s indexem 1 maji nejnizsi vahu)
                                           	BANK_1
00062b   01ac     clrf	0x2c                	clrf PRETECENI
                                           
00062c   0820     movf	0x20, w             	movfw OPERAND_X1
00062d   0724     addwf	0x24, w            	addwf OPERAND_Y1,W
00062e   00a8     movwf	0x28               	movwf VYSLEDEK1
00062f   1803     btfsc	0x3, 0             	btfsc STATUS,C
000630   14ac     bsf	0x2c, 0x1            		bsf PRETECENI,1
                                           
000631   0821     movf	0x21, w             	movfw OPERAND_X2
000632   0725     addwf	0x25, w            	addwf OPERAND_Y2,W
000633   00a9     movwf	0x29               	movwf VYSLEDEK2
000634   3001     movlw	0x1                	movlw .1
000635   1803     btfsc	0x3, 0             	btfsc STATUS,C
000636   142c     bsf	0x2c, 0              		bsf PRETECENI,0
000637   18ac     btfsc	0x2c, 0x1          	btfsc PRETECENI,1
000638   07a9     addwf	0x29, f            		addwf VYSLEDEK2,F
000639   1803     btfsc	0x3, 0             	btfsc STATUS,C
00063a   142c     bsf	0x2c, 0              		bsf PRETECENI,0
00063b   10ac     bcf	0x2c, 0x1            	bcf PRETECENI,1
                                           
00063c   0822     movf	0x22, w             	movfw OPERAND_X3
00063d   0726     addwf	0x26, w            	addwf OPERAND_Y3,W
00063e   00aa     movwf	0x2a               	movwf VYSLEDEK3
00063f   3001     movlw	0x1                	movlw .1
000640   1803     btfsc	0x3, 0             	btfsc STATUS,C
000641   14ac     bsf	0x2c, 0x1            		bsf PRETECENI,1
000642   182c     btfsc	0x2c, 0            	btfsc PRETECENI,0
000643   07aa     addwf	0x2a, f            		addwf VYSLEDEK3,F
000644   1803     btfsc	0x3, 0             	btfsc STATUS,C
000645   14ac     bsf	0x2c, 0x1            		bsf PRETECENI,1
000646   102c     bcf	0x2c, 0              	bcf PRETECENI,0
                                           
000647   0823     movf	0x23, w             	movfw OPERAND_X4
000648   0727     addwf	0x27, w            	addwf OPERAND_Y4,W
000649   00ab     movwf	0x2b               	movwf VYSLEDEK4
00064a   3001     movlw	0x1                	movlw .1
00064b   1803     btfsc	0x3, 0             	btfsc STATUS,C
00064c   142c     bsf	0x2c, 0              		bsf PRETECENI,0
00064d   18ac     btfsc	0x2c, 0x1          	btfsc PRETECENI,1
00064e   07ab     addwf	0x2b, f            		addwf VYSLEDEK4,F
00064f   1803     btfsc	0x3, 0             	btfsc STATUS,C
000650   142c     bsf	0x2c, 0              		bsf PRETECENI,0
000651   10ac     bcf	0x2c, 0x1            	bcf PRETECENI,1	
                                           
                                           	BANK_0
000654   0008     return                   	return
                                           ;**********************************************************
                                           ;**********************************************************
                                           ROZDIL	; VYSLEDEK := X - Y
                                           		; pri podteceni PRETECENI = 1 ( VYSLEDEK < 0 => PRETECENI = 1 )
                                           	BANK_1
000657   01ac     clrf	0x2c                	clrf PRETECENI
                                           
000658   0824     movf	0x24, w             	movfw OPERAND_Y1
000659   0220     subwf	0x20, w            	subwf OPERAND_X1,W	; W = X - Y	
00065a   00a8     movwf	0x28               	movwf VYSLEDEK1
00065b   1c03     btfss	0x3, 0             	btfss STATUS,C
00065c   14ac     bsf	0x2c, 0x1            		bsf PRETECENI,1
                                           	
00065d   0825     movf	0x25, w             	movfw OPERAND_Y2
00065e   0221     subwf	0x21, w            	subwf OPERAND_X2,W	; W = X - Y	
00065f   00a9     movwf	0x29               	movwf VYSLEDEK2
000660   3001     movlw	0x1                	movlw .1
000661   1c03     btfss	0x3, 0             	btfss STATUS,C
000662   142c     bsf	0x2c, 0              		bsf PRETECENI,0
000663   18ac     btfsc	0x2c, 0x1          	btfsc PRETECENI,1
000664   02a9     subwf	0x29, f            		subwf VYSLEDEK2,F
000665   1c03     btfss	0x3, 0             	btfss STATUS,C
000666   142c     bsf	0x2c, 0              		bsf PRETECENI,0
000667   10ac     bcf	0x2c, 0x1            	bcf PRETECENI,1	
                                           	
000668   0826     movf	0x26, w             	movfw OPERAND_Y3
000669   0222     subwf	0x22, w            	subwf OPERAND_X3,W	; W = X - Y	
00066a   00aa     movwf	0x2a               	movwf VYSLEDEK3
00066b   3001     movlw	0x1                	movlw .1
00066c   1c03     btfss	0x3, 0             	btfss STATUS,C
00066d   14ac     bsf	0x2c, 0x1            		bsf PRETECENI,1
00066e   182c     btfsc	0x2c, 0            	btfsc PRETECENI,0
00066f   02aa     subwf	0x2a, f            		subwf VYSLEDEK3,F
000670   1c03     btfss	0x3, 0             	btfss STATUS,C
000671   14ac     bsf	0x2c, 0x1            		bsf PRETECENI,1
000672   102c     bcf	0x2c, 0              	bcf PRETECENI,0
                                           	
000673   0827     movf	0x27, w             	movfw OPERAND_Y4
000674   0223     subwf	0x23, w            	subwf OPERAND_X4,W	; W = X - Y	
000675   00ab     movwf	0x2b               	movwf VYSLEDEK4
000676   3001     movlw	0x1                	movlw .1
000677   1c03     btfss	0x3, 0             	btfss STATUS,C
000678   142c     bsf	0x2c, 0              		bsf PRETECENI,0
000679   18ac     btfsc	0x2c, 0x1          	btfsc PRETECENI,1
00067a   02ab     subwf	0x2b, f            		subwf VYSLEDEK4,F
00067b   1c03     btfss	0x3, 0             	btfss STATUS,C
00067c   142c     bsf	0x2c, 0              		bsf PRETECENI,0
00067d   10ac     bcf	0x2c, 0x1            	bcf PRETECENI,1	
                                           	
                                           	BANK_0
000680   0008     return                   	return
                                           ;**********************************************************
                                           DEKREMENTUJ	; X := X - 1
                                           	BANK_1
000683   3001     movlw	0x1                	movlw .1
                                           
000684   02a0     subwf	0x20, f            	subwf OPERAND_X1,f
000685   1803     btfsc	0x3, 0             	btfsc STATUS,C
000686   2e8e     goto	0x68e               	goto DEKREMENTUJ_KONEC
                                           	
000687   02a1     subwf	0x21, f            	subwf OPERAND_X2,f
000688   1803     btfsc	0x3, 0             	btfsc STATUS,C
000689   2e8e     goto	0x68e               	goto DEKREMENTUJ_KONEC
                                           
00068a   02a2     subwf	0x22, f            	subwf OPERAND_X3,f
00068b   1803     btfsc	0x3, 0             	btfsc STATUS,C
00068c   2e8e     goto	0x68e               	goto DEKREMENTUJ_KONEC
                                           
00068d   02a3     subwf	0x23, f            	subwf OPERAND_X4,f
                                           DEKREMENTUJ_KONEC
                                           	BANK_0
000690   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA	; X := (X * 2) mod 0xFFFFFFFF , PRETECENI := (X * 2) div 0xFFFFFFFF
                                           			; tento podprogram nepouzivat, primo v hlavnim programu
                                           			; musi se nastavit BANK_1 a vymazat PRETECENI!!!
                                           			; (je pouze pro pouziti v nasobicich podprogramech)
                                           			; pouzivat jen POSUNDOLEVA_1, 2, 3, 4 
000691   0da0     rlf	0x20, f              	rlf OPERAND_X1,F
000692   0da1     rlf	0x21, f              	rlf OPERAND_X2,F
000693   0da2     rlf	0x22, f              	rlf OPERAND_X3,F
000694   0da3     rlf	0x23, f              	rlf OPERAND_X4,F
000695   0dac     rlf	0x2c, f              	rlf PRETECENI,F	
000696   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA_1	; X := X * 2
                                           				; X > 0xFFFF FFFF => PRETECENI obsahuje bity navic
                                           	BANK_1
000699   01ac     clrf	0x2c                	clrf PRETECENI
00069a   1003     bcf	0x3, 0               	bcf STATUS,C
                                           	
00069b   2691     call	0x691               	call POSUNDOLEVA
                                           
                                           	BANK_0
00069e   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA_2	; X := X * 4
                                           				; X > 0xFFFF FFFF => PRETECENI obsahuje bity navic
                                           	BANK_1
0006a1   01ac     clrf	0x2c                	clrf PRETECENI
0006a2   1003     bcf	0x3, 0               	bcf STATUS,C
                                           	
0006a3   2691     call	0x691               	call POSUNDOLEVA
0006a4   2691     call	0x691               	call POSUNDOLEVA
                                           
                                           	BANK_0
0006a7   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA_3	; X := X * 8
                                           				; X > 0xFFFF FFFF => PRETECENI obsahuje bity navic
                                           	BANK_1
0006aa   01ac     clrf	0x2c                	clrf PRETECENI
0006ab   1003     bcf	0x3, 0               	bcf STATUS,C
                                           	
0006ac   2691     call	0x691               	call POSUNDOLEVA
0006ad   2691     call	0x691               	call POSUNDOLEVA
0006ae   2691     call	0x691               	call POSUNDOLEVA
                                           
                                           	BANK_0
0006b1   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA_4	; X := X * 16
                                           				; X > 0xFFFF FFFF => PRETECENI obsahuje bity navic
                                           	BANK_1
0006b4   01ac     clrf	0x2c                	clrf PRETECENI
0006b5   1003     bcf	0x3, 0               	bcf STATUS,C
                                           	
0006b6   2691     call	0x691               	call POSUNDOLEVA
0006b7   2691     call	0x691               	call POSUNDOLEVA
0006b8   2691     call	0x691               	call POSUNDOLEVA
0006b9   2691     call	0x691               	call POSUNDOLEVA
                                           
                                           	BANK_0
0006bc   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA_5	; X := X * 32
                                           				; X > 0xFFFF FFFF => PRETECENI obsahuje bity navic
                                           	BANK_1
0006bf   01ac     clrf	0x2c                	clrf PRETECENI
0006c0   1003     bcf	0x3, 0               	bcf STATUS,C
                                           	
0006c1   2691     call	0x691               	call POSUNDOLEVA
0006c2   2691     call	0x691               	call POSUNDOLEVA
0006c3   2691     call	0x691               	call POSUNDOLEVA
0006c4   2691     call	0x691               	call POSUNDOLEVA
0006c5   2691     call	0x691               	call POSUNDOLEVA
                                           
                                           	BANK_0
0006c8   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA_6	; X := X * 64
                                           				; X > 0xFFFF FFFF => PRETECENI obsahuje bity navic
                                           	BANK_1
0006cb   01ac     clrf	0x2c                	clrf PRETECENI
0006cc   1003     bcf	0x3, 0               	bcf STATUS,C
                                           	
0006cd   2691     call	0x691               	call POSUNDOLEVA
0006ce   2691     call	0x691               	call POSUNDOLEVA
0006cf   2691     call	0x691               	call POSUNDOLEVA
0006d0   2691     call	0x691               	call POSUNDOLEVA
0006d1   2691     call	0x691               	call POSUNDOLEVA
0006d2   2691     call	0x691               	call POSUNDOLEVA
                                           
                                           	BANK_0
0006d5   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOLEVA_7	; X := X * 128
                                           				; X > 0xFFFF FFFF => PRETECENI obsahuje bity navic
                                           	BANK_1
0006d8   01ac     clrf	0x2c                	clrf PRETECENI
0006d9   1003     bcf	0x3, 0               	bcf STATUS,C
                                           	
0006da   2691     call	0x691               	call POSUNDOLEVA
0006db   2691     call	0x691               	call POSUNDOLEVA
0006dc   2691     call	0x691               	call POSUNDOLEVA
0006dd   2691     call	0x691               	call POSUNDOLEVA
0006de   2691     call	0x691               	call POSUNDOLEVA
0006df   2691     call	0x691               	call POSUNDOLEVA
0006e0   2691     call	0x691               	call POSUNDOLEVA
                                           
                                           	BANK_0
0006e3   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA	; X := X div 2 , PRETECENI := X mod 2
                                           			; tento podprogram nepouzivat, primo v hlavnim programu
                                           			; musi se nastavit BANK_1 a vymazat PRETECENI!!!
                                           			; (je pouze pro pouziti v nasobicich podprogramech)
                                           			; pouzivat jen POSUNDOPRAVA_1, 2, 3, 4 
0006e4   1003     bcf	0x3, 0               	bcf STATUS,C
0006e5   0ca3     rrf	0x23, f              	rrf OPERAND_X4,F
0006e6   0ca2     rrf	0x22, f              	rrf OPERAND_X3,F
0006e7   0ca1     rrf	0x21, f              	rrf OPERAND_X2,F
0006e8   0ca0     rrf	0x20, f              	rrf OPERAND_X1,F
0006e9   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA_1	; X := X div 2
                                           				; PRETECENI := X mod 2
                                           	BANK_1
0006ec   0820     movf	0x20, w             	movfw OPERAND_X1
0006ed   3901     andlw	0x1                	andlw b'00000001'
0006ee   00ac     movwf	0x2c               	movwf PRETECENI		; PRETECENI := X mod 2
                                           	
0006ef   26e4     call	0x6e4               	call POSUNDOPRAVA
                                           
                                           	BANK_0
0006f2   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA_2	; X := X div 4
                                           				; PRETECENI := X mod 4
                                           	BANK_1
0006f5   0820     movf	0x20, w             	movfw OPERAND_X1
0006f6   3903     andlw	0x3                	andlw b'00000011'
0006f7   00ac     movwf	0x2c               	movwf PRETECENI		; PRETECENI := X mod 4
                                           	
0006f8   26e4     call	0x6e4               	call POSUNDOPRAVA
0006f9   26e4     call	0x6e4               	call POSUNDOPRAVA
                                           
                                           	BANK_0
0006fc   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA_3	; X := X div 8
                                           				; PRETECENI := X mod 8
                                           	BANK_1
0006ff   0820     movf	0x20, w             	movfw OPERAND_X1
000700   3907     andlw	0x7                	andlw b'00000111'
000701   00ac     movwf	0x2c               	movwf PRETECENI		; PRETECENI := X mod 8
                                           	
000702   26e4     call	0x6e4               	call POSUNDOPRAVA
000703   26e4     call	0x6e4               	call POSUNDOPRAVA
000704   26e4     call	0x6e4               	call POSUNDOPRAVA
                                           
                                           	BANK_0
000707   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA_4	; X := X div 16
                                           				; PRETECENI := X mod 16
                                           	BANK_1
00070a   0820     movf	0x20, w             	movfw OPERAND_X1
00070b   390f     andlw	0xf                	andlw b'00001111'
00070c   00ac     movwf	0x2c               	movwf PRETECENI		; PRETECENI := X mod 16
                                           	
00070d   26e4     call	0x6e4               	call POSUNDOPRAVA
00070e   26e4     call	0x6e4               	call POSUNDOPRAVA
00070f   26e4     call	0x6e4               	call POSUNDOPRAVA
000710   26e4     call	0x6e4               	call POSUNDOPRAVA
                                           
                                           	BANK_0
000713   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA_5	; X := X div 32
                                           				; PRETECENI := X mod 32
                                           	BANK_1
000716   0820     movf	0x20, w             	movfw OPERAND_X1
000717   391f     andlw	0x1f               	andlw b'00011111'
000718   00ac     movwf	0x2c               	movwf PRETECENI		; PRETECENI := X mod 32
                                           	
000719   26e4     call	0x6e4               	call POSUNDOPRAVA
00071a   26e4     call	0x6e4               	call POSUNDOPRAVA
00071b   26e4     call	0x6e4               	call POSUNDOPRAVA
00071c   26e4     call	0x6e4               	call POSUNDOPRAVA
00071d   26e4     call	0x6e4               	call POSUNDOPRAVA
                                           
                                           	BANK_0
000720   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA_6	; X := X div 64
                                           				; PRETECENI := X mod 64
                                           	BANK_1
000723   0820     movf	0x20, w             	movfw OPERAND_X1
000724   393f     andlw	0x3f               	andlw b'00111111'
000725   00ac     movwf	0x2c               	movwf PRETECENI		; PRETECENI := X mod 64
                                           	
000726   26e4     call	0x6e4               	call POSUNDOPRAVA
000727   26e4     call	0x6e4               	call POSUNDOPRAVA
000728   26e4     call	0x6e4               	call POSUNDOPRAVA
000729   26e4     call	0x6e4               	call POSUNDOPRAVA
00072a   26e4     call	0x6e4               	call POSUNDOPRAVA
00072b   26e4     call	0x6e4               	call POSUNDOPRAVA
                                           
                                           	BANK_0
00072e   0008     return                   	return
                                           ;**********************************************************
                                           POSUNDOPRAVA_7	; X := X div 128
                                           				; PRETECENI := X mod 128
                                           	BANK_1
000731   0820     movf	0x20, w             	movfw OPERAND_X1
000732   397f     andlw	0x7f               	andlw b'01111111'
000733   00ac     movwf	0x2c               	movwf PRETECENI		; PRETECENI := X mod 128
                                           	
000734   26e4     call	0x6e4               	call POSUNDOPRAVA
000735   26e4     call	0x6e4               	call POSUNDOPRAVA
000736   26e4     call	0x6e4               	call POSUNDOPRAVA
000737   26e4     call	0x6e4               	call POSUNDOPRAVA
000738   26e4     call	0x6e4               	call POSUNDOPRAVA
000739   26e4     call	0x6e4               	call POSUNDOPRAVA
00073a   26e4     call	0x6e4               	call POSUNDOPRAVA
                                           
                                           	BANK_0
00073d   0008     return                   	return
                                           ;**********************************************************
                                           NULA	; if (X =  0) then PRETECENI := 0
                                           		; if (X <> 0) then PRETECENI := 1
                                           		; obsah X zustane nezmenen
                                           	BANK_1
000740   01ac     clrf	0x2c                	clrf PRETECENI
000741   30ff     movlw	0xff               	movlw h'FF'	
                                           
000742   05a0     andwf	0x20, f            	andwf OPERAND_X1,F
000743   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000744   142c     bsf	0x2c, 0              		bsf PRETECENI,0
000745   05a1     andwf	0x21, f            	andwf OPERAND_X2,F
000746   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000747   142c     bsf	0x2c, 0              		bsf PRETECENI,0
000748   05a2     andwf	0x22, f            	andwf OPERAND_X3,F
000749   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00074a   142c     bsf	0x2c, 0              		bsf PRETECENI,0
00074b   05a3     andwf	0x23, f            	andwf OPERAND_X4,F
00074c   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00074d   142c     bsf	0x2c, 0              		bsf PRETECENI,0		
                                           
                                           	BANK_0
000750   0008     return                   	return
                                           ;**********************************************************
                                            
                                           
                                            org 0x0800					; PAGE 1
                                           	include "vs1001.asm"	; podprogramy na ovladani mp3 decoderu
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           ; OBSLUZNE PODPROGRAMY PRO MP3 DECODER vs1001g
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           
                                           ; MP3_PORT		
                                           ; MP3_PORT_TRIS	
                                           
                                           ; BITY MP3_PORT
                                           ; #define MP3_SO		MP3_PORT,0	; serial output - tady dostavame z dekoderu data
                                           ; #define MP3_SI		MP3_PORT,1	; serial input  - pokud MP3_CS=1, tak posilame mp3 data, pokud =0, tak posilame prikaz
                                           ; #define MP3_SCLK		MP3_PORT,2	; clock - nabezna hrana urcuje platnost dat pri seriovem prenosu
                                           ; #define MP3_CS		MP3_PORT,3	; cable select  - pokud MP3_CS=1, tak po SI posilame mp3 data, pokud =0, tak posilame prikaz
                                           ; #define MP3_DREQ		MP3_PORT,4	; data request  - pokud =1, tak dekoder pozaduje dalsi mp3 data (vic jak 32B)
                                           ; #define MP3_BSYNC		MP3_PORT,5	; pro synchronizaci - ma byt nastaven pri prvnim prenasenem bitu kazdeho bytu
                                           
                                           ;**********************************************************
                                           ; co nejrychleji vodesle hodnotu ve W smerem k dekoderu (obsluhuje signaly DSYNC, SI, SCLK)
                                           VS_WR_BYTE
                                           #IF SPI_SOFTWARE==1
000800   1507     bsf	0x7, 0x2             	bsf MP3_BSYNC		; bude nasledovat prvni bit bytu, proto nastavime BSYNC
000801   0093     movwf	0x13               	movwf SSPBUF		; dame dato do SPI bufferu
000802   0000     nop                      	nop
000803   0000     nop                      	nop
000804   0000     nop                      	nop
000805   0000     nop                      	nop
000806   0000     nop                      	nop
000807   0000     nop                      	nop
000808   1107     bcf	0x7, 0x2             	bcf MP3_BSYNC
000809   1d8c     btfss	0xc, 0x3           	btfss PIR1,SSPIF	; 3. bit
00080a   2809     goto	0x9                 	goto $-1			; cekame dokud neni prenos kompletni
00080b   118c     bcf	0xc, 0x3             	bcf PIR1,SSPIF		; 
00080c   0008     return                   	return
                                           #ELSE
                                           	; k praci pouziva TEMPW
                                           	movwf TEMPW		; dato co mame odeslat si hodime do tempu...
                                           
                                           	bsf MP3_BSYNC	; bude nasledovat prvni bit bytu, proto nastavime BSYNC
                                           
                                           	; 7. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           	bcf MP3_BSYNC
                                           	
                                           	; 6. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           
                                           	; 5. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           
                                           	; 4. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           
                                           	; 3. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           
                                           	; 2. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           
                                           	; 1. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           
                                           	; 0. bit bytu
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bcf MP3_SI		; nevime zda bit bude 0 nebo 1, SI nulujeme
                                           	rlf TEMPW,f		; odesilame od nejvyssiho bitu k nejnizsimu
                                           	btfsc STATUS,C
                                           	bsf MP3_SI
                                           	bsf MP3_SCLK
                                           
                                           	bcf MP3_SCLK
                                           	return
                                           #ENDIF
                                           ;**********************************************************
                                           ; co nejrychleji prijme dato z vs1001 a umisti jej do W
                                           VS_RD_BYTE
                                           #IF SPI_SOFTWARE==1
00080d   1507     bsf	0x7, 0x2             	bsf MP3_BSYNC		; bude nasledovat prvni bit bytu, proto nastavime BSYNC
00080e   3000     movlw	0                  	movlw .0
00080f   0093     movwf	0x13               	movwf SSPBUF		; dame dato do SPI bufferu
000810   0000     nop                      	nop
000811   0000     nop                      	nop
000812   0000     nop                      	nop
000813   0000     nop                      	nop
000814   0000     nop                      	nop
000815   0000     nop                      	nop
000816   1107     bcf	0x7, 0x2             	bcf MP3_BSYNC
000817   1d8c     btfss	0xc, 0x3           	btfss PIR1,SSPIF
000818   2817     goto	0x17                	goto $-1			; cekame dokud neni prenos kompletni
000819   118c     bcf	0xc, 0x3             	bcf PIR1,SSPIF
00081a   0813     movf	0x13, w             	movfw SSPBUF
00081b   0008     return                   	return
                                           #ELSE
                                           	; k praci pouziva TEMPW
                                           
                                           	clrf TEMPW		; vymazeme, sem budeme strkat dato co nam prijde...
                                           	bcf MP3_SCLK	; shodime SCLK
                                           	bsf MP3_BSYNC	; bude nasledovat prvni bit bytu, proto nastavime BSYNC
                                           	bcf STATUS,C	; nulujeme priznak CARRY, staci to delat jen na zacatku, protoze TEMW mame prazdny...
                                           
                                           	; 7. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,f
                                           	bcf MP3_SCLK	; shodime SCLK
                                           
                                           	bcf MP3_BSYNC
                                           
                                           	; 6. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,f
                                           	bcf MP3_SCLK	; shodime SCLK	
                                           
                                           	; 5. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,f
                                           	bcf MP3_SCLK	; shodime SCLK	
                                           
                                           	; 4. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,f
                                           	bcf MP3_SCLK	; shodime SCLK	
                                           
                                           	; 3. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,f
                                           	bcf MP3_SCLK	; shodime SCLK	
                                           
                                           	; 2. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,f
                                           	bcf MP3_SCLK	; shodime SCLK	
                                           
                                           	; 1. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,f
                                           	bcf MP3_SCLK	; shodime SCLK	
                                           
                                           	; 0. bit bytu
                                           	bsf MP3_SCLK	; nabezna hrana SCLK
                                           	btfsc MP3_SO
                                           	bsf STATUS,C	; pokud je SO v jednice nastavime C...
                                           	rlf TEMPW,W
                                           	bcf MP3_SCLK	; shodime SCLK	
                                           
                                           	; movfw TEMPW ; tuto operaci jiz nemusime provadet, protoze jsme posledni rotaci hodily do W (rlf TEMPW,W)
                                           	return
                                           #ENDIF
                                           ;**********************************************************
                                           ; do TEMP1 dame adresu registru 
                                           ; do TEMP2 dame dolni slabiku zapisovaneho slova
                                           ; do TEMP3 dame horni slabiku zapisovaneho slova
                                           VS_WR_REG	; zapise 16bitove slovo (TEMP2,TEMP3) do registru mp3 dekoderu (TEMP1)
                                           			; 16bit dato se odesila od nejvyssiho bitu (15,14...8,7...1,0)
                                           			; kde TEMP3 = bity 15-8 ; TEMP2 = bity 7-0
                                           ; pri praci pouziva TEMP1, TEMP2, TEMP3, TEMPW
00081c   1c07     btfss	0x7, 0             	btfss MP3_DREQ
00081d   281c     goto	0x1c                	goto $-1
                                           	; v datasheetu k VS1001k o tom sice nic nepisou, v diskuzi na ikoras.iglu.cz mi bylo al porazeno, 
                                           	; ze necekani na DREQ pri cteni/zapisu registru muze zpusobovat praskani n vystupu...
                                           
00081e   1087     bcf	0x7, 0x1             	bcf MP3_CS			; po SI posilame prikaz
00081f   3002     movlw	0x2                	movlw b'00000010'	; write
000820   2000     call	0                   	call VS_WR_BYTE	
000821   0836     movf	0x36, w             	movfw TEMP1			; adresa zapisovaneho registru
000822   2000     call	0                   	call VS_WR_BYTE
000823   0838     movf	0x38, w             	movfw TEMP3 		; horni slabika
000824   2000     call	0                   	call VS_WR_BYTE
000825   0837     movf	0x37, w             	movfw TEMP2 		; dolni slabika
000826   2000     call	0                   	call VS_WR_BYTE
                                           
000827   20d8     call	0xd8                	call DELAY_5us		; pozor, prepise TEMP1
000828   1487     bsf	0x7, 0x1             	bsf MP3_CS
000829   0008     return                   	return
                                           ;**********************************************************
                                           ; do TEMP1 dame adresu registru 
                                           ; v TEMP2 nam vrati dolni slabiku precteneho slova
                                           ; v TEMP3 nam vrati horni slabiku precteneho slova
                                           VS_RD_REG	; precte 16bitove slovo (TEMP3,TEMP2) z registru mp3 dekoderu (TEMP1)
                                           			; kde TEMP3 = bity 15-8 ; TEMP2 = bity 7-0
                                           ; pri praci pouziva TEMP1, TEMP2, TEMP3, TEMPW
00082a   1c07     btfss	0x7, 0             	btfss MP3_DREQ
00082b   282a     goto	0x2a                	goto $-1
                                           	; v datasheetu k VS1001k o tom sice nic nepisou, v diskuzi na ikoras.iglu.cz mi bylo al porazeno, 
                                           	; ze necekani na DREQ pri cteni/zapisu registru muze zpusobovat praskani n vystupu...
                                           
00082c   1087     bcf	0x7, 0x1             	bcf MP3_CS			; po SI posilame prikaz
00082d   3003     movlw	0x3                	movlw b'00000011'	; read
00082e   2000     call	0                   	call VS_WR_BYTE	
00082f   0836     movf	0x36, w             	movfw TEMP1			; adresa cteneho registru
000830   2000     call	0                   	call VS_WR_BYTE
000831   200d     call	0xd                 	call VS_RD_BYTE
000832   00b8     movwf	0x38               	movwf TEMP3 		; horni slabika
000833   200d     call	0xd                 	call VS_RD_BYTE
000834   00b7     movwf	0x37               	movwf TEMP2 		; dolni slabika
                                           
000835   20d8     call	0xd8                	call DELAY_5us		; pozor, prepise TEMP1
000836   1487     bsf	0x7, 0x1             	bsf MP3_CS
000837   0008     return                   	return
                                           ;**********************************************************
                                           VS_SOFT_RESET_NO_PLUG	; provede softwarovy reset dekoderu bez resetu pluginu
                                           	PROG_PAGE_0
00083a   22ff     call	0x2ff               	call DELAY_200ms
                                           	PROG_PAGE_1
                                           
00083d   3000     movlw	0                  	movlw VSADDR_MODE
00083e   00b6     movwf	0x36               	movwf TEMP1
00083f   154d     bsf	0x4d, 0x2            	bsf VSREG_MODE_L,2	; soft reset=1
000840   084d     movf	0x4d, w             	movfw VSREG_MODE_L
000841   00b7     movwf	0x37               	movwf TEMP2
000842   3000     movlw	0                  	movlw .0			; MODE_H
000843   00b8     movwf	0x38               	movwf TEMP3
000844   201c     call	0x1c                	call VS_WR_REG
                                           
                                           	PROG_PAGE_0
000847   22f6     call	0x2f6               	call DELAY_2ms
                                           	PROG_PAGE_1
00084a   2088     call	0x88                	call VS_SEND_1024_NULL	
                                           
00084b   114d     bcf	0x4d, 0x2            	bcf VSREG_MODE_L,2	; soft reset=0
00084c   0008     return                   	return
                                           ;**********************************************************
                                           VS_SOFT_RESET	; provede softwarovy reset dekoderu (pri zapnuti a pote po skonceni kazde mp3)
                                           	PROG_PAGE_0
00084f   22ff     call	0x2ff               	call DELAY_200ms
                                           	PROG_PAGE_1
                                           
000852   3000     movlw	0                  	movlw VSADDR_MODE
000853   00b6     movwf	0x36               	movwf TEMP1
000854   154d     bsf	0x4d, 0x2            	bsf VSREG_MODE_L,2	; soft reset=1
000855   084d     movf	0x4d, w             	movfw VSREG_MODE_L
000856   00b7     movwf	0x37               	movwf TEMP2
000857   3000     movlw	0                  	movlw .0			; MODE_H
000858   00b8     movwf	0x38               	movwf TEMP3
000859   201c     call	0x1c                	call VS_WR_REG
                                           
                                           	PROG_PAGE_0
00085c   22f6     call	0x2f6               	call DELAY_2ms
                                           	PROG_PAGE_1
00085f   2088     call	0x88                	call VS_SEND_1024_NULL	
                                           
000860   114d     bcf	0x4d, 0x2            	bcf VSREG_MODE_L,2	; soft reset=0
                                           
000861   300a     movlw	0xa                	movlw VSADDR_AIADDR
000862   00b6     movwf	0x36               	movwf TEMP1
000863   3000     movlw	0                  	movlw 0x00
000864   00b7     movwf	0x37               	movwf TEMP2	
000865   3042     movlw	0x42               	movlw 0x42
000866   00b8     movwf	0x38               	movwf TEMP3
000867   201c     call	0x1c                	call VS_WR_REG				; nastavime zacatek uzivatelskeho programu (0x4200)
                                           
000868   300d     movlw	0xd                	movlw VSADDR_AICTRL0
000869   00b6     movwf	0x36               	movwf TEMP1
00086a   3000     movlw	0                  	movlw 0x00
00086b   00b7     movwf	0x37               	movwf TEMP2	
00086c   3000     movlw	0                  	movlw 0x00
00086d   00b8     movwf	0x38               	movwf TEMP3
00086e   201c     call	0x1c                	call VS_WR_REG				; resetujeme plugin
                                           
00086f   300d     movlw	0xd                	movlw VSADDR_AICTRL0
000870   00b6     movwf	0x36               	movwf TEMP1
000871   302f     movlw	0x2f               	movlw VS_LOUDNESS
000872   00b7     movwf	0x37               	movwf TEMP2	
000873   3000     movlw	0                  	movlw 0x00
000874   00b8     movwf	0x38               	movwf TEMP3
000875   201c     call	0x1c                	call VS_WR_REG				; nastavime pouzivany filter
                                           
000876   082f     movf	0x2f, w             	movfw VS_LOUDNESS
000877   39ff     andlw	0xff               	andlw h'FF'
000878   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000879   0008     return                   	return
                                           
00087a   300a     movlw	0xa                	movlw VSADDR_AIADDR
00087b   00b6     movwf	0x36               	movwf TEMP1
00087c   01b7     clrf	0x37                	clrf TEMP2	
00087d   01b8     clrf	0x38                	clrf TEMP3
00087e   201c     call	0x1c                	call VS_WR_REG				; pokud je filter 0, vypneme plugin
00087f   0008     return                   	return
                                           ;**********************************************************
                                           VS_SEND_32_NULL
000880   2097     call	0x97                	call WAIT_FOR_VSDREQ
000881   3020     movlw	0x20               	movlw .32
000882   00b7     movwf	0x37               	movwf TEMP2
                                           	
000883   3000     movlw	0                  	movlw .0
000884   2000     call	0                   	call VS_WR_BYTE
000885   0bb7     decfsz	0x37, f           	decfsz TEMP2,F
000886   2883     goto	0x83                	goto $-3
000887   0008     return                   	return
                                           ;**********************************************************
                                           VS_SEND_1024_NULL
000888   1487     bsf	0x7, 0x1             	bsf MP3_CS			; po SI posilam data
000889   3020     movlw	0x20               	movlw .32
00088a   00b6     movwf	0x36               	movwf TEMP1
                                           
00088b   2080     call	0x80                	call VS_SEND_32_NULL
00088c   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
00088d   288b     goto	0x8b                	goto $-2
                                           	 
00088e   0008     return                   	return
                                           ;**********************************************************
                                           VS_SET_VOLUME
00088f   300b     movlw	0xb                	movlw VSADDR_VOL
000890   00b6     movwf	0x36               	movwf TEMP1
                                           
000891   084f     movf	0x4f, w             	movfw VSREG_VOL_L
000892   00b7     movwf	0x37               	movwf TEMP2
000893   0850     movf	0x50, w             	movfw VSREG_VOL_H
000894   00b8     movwf	0x38               	movwf TEMP3
000895   201c     call	0x1c                	call VS_WR_REG
000896   0008     return                   	return		
                                           ;**********************************************************
                                           WAIT_FOR_VSDREQ
000897   1c07     btfss	0x7, 0             	btfss MP3_DREQ
000898   2897     goto	0x97                	goto WAIT_FOR_VSDREQ
000899   0008     return                   	return
                                           ;**********************************************************
                                           VS_END_BEEP
00089a   2097     call	0x97                	call WAIT_FOR_VSDREQ
                                           
00089b   3045     movlw	0x45               	movlw h'45'
00089c   2000     call	0                   	call VS_WR_BYTE
00089d   3078     movlw	0x78               	movlw h'78'
00089e   2000     call	0                   	call VS_WR_BYTE
00089f   3069     movlw	0x69               	movlw h'69'
0008a0   2000     call	0                   	call VS_WR_BYTE
0008a1   3074     movlw	0x74               	movlw h'74'			; odeslanim tohoto kodu sinusovku ukoncime...
0008a2   2000     call	0                   	call VS_WR_BYTE
0008a3   3000     movlw	0                  	movlw .0
0008a4   2000     call	0                   	call VS_WR_BYTE
0008a5   3000     movlw	0                  	movlw .0
0008a6   2000     call	0                   	call VS_WR_BYTE
0008a7   3000     movlw	0                  	movlw .0
0008a8   2000     call	0                   	call VS_WR_BYTE
0008a9   3000     movlw	0                  	movlw .0
0008aa   2000     call	0                   	call VS_WR_BYTE
                                           
0008ab   0008     return                   	return
                                           ;**********************************************************
                                           VS_BEEP
                                           ;	call VS_SOFT_RESET
                                           ;	call WAIT_FOR_VSDREQ
                                           
0008ac   1487     bsf	0x7, 0x1             	bsf MP3_CS			; po SI posilam data
0008ad   3053     movlw	0x53               	movlw h'53'
0008ae   2000     call	0                   	call VS_WR_BYTE
0008af   30ef     movlw	0xef               	movlw h'EF'
0008b0   2000     call	0                   	call VS_WR_BYTE
0008b1   306e     movlw	0x6e               	movlw h'6E'
0008b2   2000     call	0                   	call VS_WR_BYTE
0008b3   303e     movlw	0x3e               	movlw .62			; ctyr bytova testovaci sekvence. Tento posledni byte znamena, 
0008b4   2000     call	0                   	call VS_WR_BYTE		; ze s pouzitim vzorkovaci frekvence 16kHz bude generovan ton 1kHz
0008b5   3000     movlw	0                  	movlw .0
0008b6   2000     call	0                   	call VS_WR_BYTE
0008b7   3000     movlw	0                  	movlw .0
0008b8   2000     call	0                   	call VS_WR_BYTE
0008b9   3000     movlw	0                  	movlw .0
0008ba   2000     call	0                   	call VS_WR_BYTE
0008bb   3000     movlw	0                  	movlw .0			; testovaci kod musi byt nasledovan 4 nulamy
0008bc   2000     call	0                   	call VS_WR_BYTE
                                           
0008bd   0008     return                   	return
                                           ;**********************************************************
                                           VS_INIT
0008be   01cd     clrf	0x4d                	clrf VSREG_MODE_L
0008bf   01ce     clrf	0x4e                	clrf VSREG_STATUS_L
                                           
0008c0   3003     movlw	0x3                	movlw .3
0008c1   00ba     movwf	0x3a               	movwf TEMP5
0008c2   2038     call	0x38                	call VS_SOFT_RESET_NO_PLUG		; resetujeme
0008c3   208f     call	0x8f                	call VS_SET_VOLUME				; nastavime hlasitost
0008c4   0bba     decfsz	0x3a, f           	decfsz TEMP5,f
0008c5   28c2     goto	0xc2                	goto $-3
                                           	; pro jistotu jej resetuji 5x za sebou...
                                           	
0008c6   3003     movlw	0x3                	movlw .3
0008c7   00ba     movwf	0x3a               	movwf TEMP5
                                           VS_INIT_BEEP
0008c8   20ac     call	0xac                	call VS_BEEP
                                           	PROG_PAGE_0
0008cb   22ff     call	0x2ff               	call DELAY_200ms
                                           	PROG_PAGE_1
0008ce   209a     call	0x9a                	call VS_END_BEEP
                                           	PROG_PAGE_0
0008d1   22ff     call	0x2ff               	call DELAY_200ms
                                           	PROG_PAGE_1
0008d4   0bba     decfsz	0x3a, f           	decfsz TEMP5,f
0008d5   28c8     goto	0xc8                	goto VS_INIT_BEEP
                                           	; pri initu 3x za sebou pipneme (asi pro to ze neposimal uvodni nuly, tak v praxi pipne jenom 2x :)
                                           
0008d6   2038     call	0x38                	call VS_SOFT_RESET_NO_PLUG		; resetujeme
                                           
0008d7   0008     return                   	return
                                           ;**********************************************************
                                           DELAY_5us
                                           	; pouziva TEMP1
                                           	; (Fosc = 20 MHz , instr. cyklus= 0.20 us) 5us / 0.20 us = 25 instrukcnich cyklu
                                           	; (Fosc = 16 MHz , instr. cyklus= 0.25 us) 5us / 0.25 us = 20 instrukcnich cyklu
                                           ;Variable: TMP0
                                           ;Delay 25 cycles
0008d8   3008     movlw	0x8                        MOVLW 0x08  ;8 DEC
0008d9   00b6     movwf	0x36                       MOVWF TEMP1
0008da   0bb6     decfsz	0x36, f                   DECFSZ TEMP1,F
0008db   28da     goto	0xda                        GOTO $-1
                                           ;End of Delay
0008dc   0008     return                   	return
                                           ;**********************************************************
                                           	include "commands.asm"	; prni cast podprogramu na obsluhu prikazu (od ridiciho procesoru)
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; tady jsou procedury resici jednotlive prikazy
                                           ; Pokud je v zasobniku prikaz pro nejakou proceduru, musi tato procedura nastavit byt STAV_PRIKAZU do 1 (i kdyz treba nema vsechny parametry)
                                           ; Pokud procedura najde svuj prikaz a jsou prijate vsechny parametry, musi odeslat nejakou odpoved po USARTu a smazat reg. PRIJATYCH_DAT!!!
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; CAST 1
                                           CEKEJ_PRIKAZ					; ceka dokud nedostaneme nejaky prikaz
0008dd   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
0008de   39ff     andlw	0xff               	andlw h'FF'
0008df   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z				; koukneme se zda prisel nejaky prikaz...
0008e0   28dd     goto	0xdd                	goto CEKEJ_PRIKAZ
0008e1   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_02h						; 02h - vrat oddily se systemem FAT32
0008e2   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
0008e3   3c02     sublw	0x2                	sublw h'02'					
0008e4   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0008e5   0008     return                   	return						; nebyl prijat prikaz 02h
0008e6   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 02h, nastavime byt STAV_PRIKAZU
0008e7   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
0008e8   3c01     sublw	0x1                	sublw .1					; pro prikaz 02h museji prijit 2 byty (prikaz + 1 parametr)
0008e9   1803     btfsc	0x3, 0             	btfsc STATUS,C
0008ea   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 02h s jednim parametrem (vrat oddily se systemem FAT32)
                                           
                                           	PROG_PAGE_2
0008ed   2000     call	0                   	call SCAN_MBR				; najdeme oddily s FAT32 a jejich seznam dame do bufferu 2
                                           	PROG_PAGE_1	
0008f0   0879     movf	0x79, w             	movfw 0x079					; parametr prikazu 02h (cislo svazku, jehoz parametry chceme vratit)
0008f1   3903     andlw	0x3                	andlw b'00000011'			; parametr musi byt v rozsahu 0-3
0008f2   00b6     movwf	0x36               	movwf TEMP1
0008f3   1003     bcf	0x3, 0               	bcf STATUS,C
0008f4   0db6     rlf	0x36, f              	rlf TEMP1,F
0008f5   0db6     rlf	0x36, f              	rlf TEMP1,F
0008f6   0db6     rlf	0x36, f              	rlf TEMP1,F
0008f7   0d36     rlf	0x36, w              	rlf TEMP1,W					; parametr vynasobime 16
0008f8   3e10     addlw	0x10               	addlw 0x10					; buffer 2 je v bance 2 na adrese 0x10
0008f9   0084     movwf	0x4                	movwf FSR
                                           	INDF_BANK_2
0008fb   3010     movlw	0x10               	movlw .16					; budeme odesilat 16 bytu
0008fc   00b6     movwf	0x36               	movwf TEMP1
                                           PRIKAZ_02h__ODESILANI_ODDILU
0008fd   0800     movf	0, w                	movfw INDF
                                           	PROG_PAGE_0
000900   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
000903   0a84     incf	0x4, f              	incf FSR,F
000904   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
000905   28fd     goto	0xfd                	goto PRIKAZ_02h__ODESILANI_ODDILU
000906   01f3     clrf	0x73                	clrf PRIJATYCH_DAT
000907   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_04h						; 04h ‚Äì vrat velikost clusteru
000908   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000909   3c04     sublw	0x4                	sublw h'04'					
00090a   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00090b   0008     return                   	return						; nebyl prijat prikaz 04h
00090c   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 04h, nastavime byt STAV_PRIKAZU
                                           	; pro prikaz 04h nejsou definovany zadne parametry, proto jiz nic jineho netestujeme
                                           
00090d   084c     movf	0x4c, w             	movfw CLUSTER_SIZE
                                           	PROG_PAGE_0
000910   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
000913   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
000914   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_05h						; 05h ‚Äì vrat zaznam v adresari
000915   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000916   3c05     sublw	0x5                	sublw h'05'
000917   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000918   0008     return                   	return						; nebyl prijat prikaz 05h
000919   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 05h, nastavime byt STAV_PRIKAZU
00091a   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
00091b   3c06     sublw	0x6                	sublw .6					; pro prikaz 05h musi prijit 7 bytu (prikaz + 6bytu parametr)
00091c   1803     btfsc	0x3, 0             	btfsc STATUS,C
00091d   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 05h s 6bytovym parametrem 
                                           
00091e   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru adresare
00091f   00bc     movwf	0x3c               	movwf CLUSTER1
000920   087a     movf	0x7a, w             	movfw 0x07A
000921   00bd     movwf	0x3d               	movwf CLUSTER2
000922   087b     movf	0x7b, w             	movfw 0x07B
000923   00be     movwf	0x3e               	movwf CLUSTER3
000924   087c     movf	0x7c, w             	movfw 0x07C
000925   00bf     movwf	0x3f               	movwf CLUSTER4
000926   2327     call	0x327               	call PRVNI_CL_ADRESARE
                                           
000927   1c3b     btfss	0x3b, 0            	btfss POZICE,0
000928   292f     goto	0x12f               	goto PRIKAZ_05h_PAR1_OK
                                           
                                           PRIKAZ_05h_PAR1_NOT_OK
                                           	INDF_BANK_2
00092a   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
00092b   0084     movwf	0x4                	movwf FSR
00092c   3081     movlw	0x81               	movlw h'81'					; jako prvni byte odpovedi dame 81h (Zadany cluster neobsahuje adresar)
00092d   0080     movwf	0                  	movwf INDF
00092e   293d     goto	0x13d               	goto PRIKAZ_05h_KONEC
                                           PRIKAZ_05h_PAR1_OK
                                           
00092f   087d     movf	0x7d, w             	movfw 0x07D
000930   00e0     movwf	0x60               	movwf ZAZNAM1
000931   087e     movf	0x7e, w             	movfw 0x07E
000932   00e1     movwf	0x61               	movwf ZAZNAM2
                                           
000933   2361     call	0x361               	call SKOC_NA_ZAZNAM
000934   1c3b     btfss	0x3b, 0            	btfss POZICE,0
000935   293c     goto	0x13c               	goto PRIKAZ_05h_PAR2_OK
                                           
                                           PRIKAZ_05h_PAR2_NOT_OK
                                           	INDF_BANK_2
000937   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
000938   0084     movwf	0x4                	movwf FSR
000939   3080     movlw	0x80               	movlw h'80'					; jako prvni byte odpovedi dame 80h (Zadany zaznam mimo rozsah)
00093a   0080     movwf	0                  	movwf INDF
00093b   293d     goto	0x13d               	goto PRIKAZ_05h_KONEC
                                           PRIKAZ_05h_PAR2_OK
                                           
00093c   23e1     call	0x3e1               	call FILE_INFO
                                           
                                           PRIKAZ_05h_KONEC
                                           	; At uz bylo v zaznamu cokoli, odesleme 16 bytu z BUFFERU 2
00093d   3010     movlw	0x10               	movlw .16
00093e   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
000941   22c5     call	0x2c5               	call ODESLI_BUFFER2			; odesleme si zaznam o souboru	
                                           	PROG_PAGE_1
                                           
000944   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
000945   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_06h						; 06h ‚Äì vrat cislo dalsiho clusteru v alokacnim retezu
000946   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000947   3c06     sublw	0x6                	sublw h'06'					
000948   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000949   0008     return                   	return						; nebyl prijat prikaz 06h
00094a   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 06h, nastavime byt STAV_PRIKAZU
00094b   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
00094c   3c04     sublw	0x4                	sublw .4					; pro prikaz 06h museji prijit 5 bytu (prikaz + 4byty parametr)
00094d   1803     btfsc	0x3, 0             	btfsc STATUS,C
00094e   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 06h s 4bytovym parametrem 
                                           
00094f   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru
000950   00bc     movwf	0x3c               	movwf CLUSTER1
000951   087a     movf	0x7a, w             	movfw 0x07A
000952   00bd     movwf	0x3d               	movwf CLUSTER2
000953   087b     movf	0x7b, w             	movfw 0x07B
000954   00be     movwf	0x3e               	movwf CLUSTER3
000955   087c     movf	0x7c, w             	movfw 0x07C
000956   00bf     movwf	0x3f               	movwf CLUSTER4
                                           	PROG_PAGE_0
000959   24eb     call	0x4eb               	call NEXT_CLUSTER
00095a   083b     movf	0x3b, w             	movfw POZICE				; pokud POZICE = 00h, je vse v poradku (vratime c. dalsiho clusteru v retezci). 
                                           								; Pokud POZICE = FFh byl predany cluster posledni v retezu, nebo byl prazdny...
00095b   229a     call	0x29a               	call WR_USART
00095c   083c     movf	0x3c, w             	movfw CLUSTER1
00095d   229a     call	0x29a               	call WR_USART
00095e   083d     movf	0x3d, w             	movfw CLUSTER2
00095f   229a     call	0x29a               	call WR_USART
000960   083e     movf	0x3e, w             	movfw CLUSTER3
000961   229a     call	0x29a               	call WR_USART
000962   083f     movf	0x3f, w             	movfw CLUSTER4
000963   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
                                           	
000966   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
000967   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_07h						; 07h ‚Äì cti cluster
000968   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000969   3c07     sublw	0x7                	sublw h'07'					
00096a   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00096b   0008     return                   	return						; nebyl prijat prikaz 07h
00096c   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 07h, nastavime byt STAV_PRIKAZU
00096d   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
00096e   3c04     sublw	0x4                	sublw .4					; pro prikaz 07h museji prijit 5 bytu (prikaz + 4byty parametr)
00096f   1803     btfsc	0x3, 0             	btfsc STATUS,C
000970   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 07h s 4bytovym parametrem 
                                           
000971   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru
000972   00bc     movwf	0x3c               	movwf CLUSTER1
000973   087a     movf	0x7a, w             	movfw 0x07A
000974   00bd     movwf	0x3d               	movwf CLUSTER2
000975   087b     movf	0x7b, w             	movfw 0x07B
000976   00be     movwf	0x3e               	movwf CLUSTER3
000977   087c     movf	0x7c, w             	movfw 0x07C
000978   00bf     movwf	0x3f               	movwf CLUSTER4
000979   01bb     clrf	0x3b                	clrf POZICE
                                           	PROG_PAGE_0
00097c   2488     call	0x488               	call CLUSTER_TO_LBA			; zjistime si skutecnou polohu pozadovaneho clusteru na disku...
00097d   084c     movf	0x4c, w             	movfw CLUSTER_SIZE
00097e   00a6     movwf	0x26               	movwf SECTOR_C				; tentokrat cteme cely cluster a ne sector
00097f   23e1     call	0x3e1               	call READ_SECTOR;S
                                           	PROG_PAGE_1
                                           
000982   084c     movf	0x4c, w             	movfw CLUSTER_SIZE
000983   00b7     movwf	0x37               	movwf TEMP2					; kolik sektoru budeme odesilat
                                           
                                           PRIKAZ_07h__ODESLI_SECTOR
000984   3000     movlw	0                  	movlw .0					; budeme odesilat cely sector (256slov = 512bytu)
000985   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
000988   22a2     call	0x2a2               	call ODESLI_DATA
                                           	PROG_PAGE_1
00098b   0bb7     decfsz	0x37, f           	decfsz TEMP2,F 				; a to tolikrat, kolik ma cluster sektroru
00098c   2984     goto	0x184               	goto PRIKAZ_07h__ODESLI_SECTOR
                                           	
00098d   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
00098e   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_08h						; 08h ‚Äì zjisti velikost souboru
00098f   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000990   3c08     sublw	0x8                	sublw h'08'
000991   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000992   0008     return                   	return						; nebyl prijat prikaz 08h
000993   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 08h, nastavime byt STAV_PRIKAZU
000994   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
000995   3c06     sublw	0x6                	sublw .6					; pro prikaz 08h musi prijit 7 bytu (prikaz + 6bytu parametr)
000996   1803     btfsc	0x3, 0             	btfsc STATUS,C
000997   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 08h s 6bytovym parametrem 
                                           
000998   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru adresare
000999   00bc     movwf	0x3c               	movwf CLUSTER1
00099a   087a     movf	0x7a, w             	movfw 0x07A
00099b   00bd     movwf	0x3d               	movwf CLUSTER2
00099c   087b     movf	0x7b, w             	movfw 0x07B
00099d   00be     movwf	0x3e               	movwf CLUSTER3
00099e   087c     movf	0x7c, w             	movfw 0x07C
00099f   00bf     movwf	0x3f               	movwf CLUSTER4
0009a0   2327     call	0x327               	call PRVNI_CL_ADRESARE
                                           
0009a1   1c3b     btfss	0x3b, 0            	btfss POZICE,0
0009a2   29a6     goto	0x1a6               	goto PRIKAZ_08h_PAR1_OK
                                           
                                           PRIKAZ_08h_PAR1_NOT_OK
0009a3   3081     movlw	0x81               	movlw h'81'					; jako prvni byte odpovedi dame 81h (Zadany cluster neobsahuje adresar)
0009a4   00b6     movwf	0x36               	movwf TEMP1
0009a5   29b2     goto	0x1b2               	goto PRIKAZ_08h_KONEC
                                           PRIKAZ_08h_PAR1_OK
                                           
0009a6   087d     movf	0x7d, w             	movfw 0x07D
0009a7   00e0     movwf	0x60               	movwf ZAZNAM1
0009a8   087e     movf	0x7e, w             	movfw 0x07E
0009a9   00e1     movwf	0x61               	movwf ZAZNAM2
                                           
0009aa   2361     call	0x361               	call SKOC_NA_ZAZNAM
0009ab   1c3b     btfss	0x3b, 0            	btfss POZICE,0
0009ac   29b0     goto	0x1b0               	goto PRIKAZ_08h_PAR2_OK
                                           
                                           PRIKAZ_08h_PAR2_NOT_OK
0009ad   3080     movlw	0x80               	movlw h'80'					; jako prvni byte odpovedi dame 80h (Zadany zaznam mimo rozsah)
0009ae   00b6     movwf	0x36               	movwf TEMP1
0009af   29b2     goto	0x1b2               	goto PRIKAZ_08h_KONEC
                                           PRIKAZ_08h_PAR2_OK
                                           
0009b0   245c     call	0x45c               	call FILE_SIZE
0009b1   01b6     clrf	0x36                	clrf TEMP1
                                           
                                           PRIKAZ_08h_KONEC
                                           	; At uz bylo v zaznamu cokoli, odesleme 4 byty z BUFFERU 2
0009b2   0836     movf	0x36, w             	movfw TEMP1
                                           	PROG_PAGE_0
0009b5   229a     call	0x29a               	call WR_USART
0009b6   3004     movlw	0x4                	movlw .4
0009b7   00b6     movwf	0x36               	movwf TEMP1
0009b8   22c5     call	0x2c5               	call ODESLI_BUFFER2			; odesleme si zaznam o souboru	
                                           	PROG_PAGE_1
                                           
0009bb   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
0009bc   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_09h						; 09h ‚Äì hledej zaznam
0009bd   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
0009be   3c09     sublw	0x9                	sublw h'09'
0009bf   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0009c0   0008     return                   	return						; nebyl prijat prikaz 09h
0009c1   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 09h, nastavime byt STAV_PRIKAZU
0009c2   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
0009c3   3c07     sublw	0x7                	sublw .7					; pro prikaz 09h musi prijit 8 bytu (prikaz + 7bytu parametr)
0009c4   1803     btfsc	0x3, 0             	btfsc STATUS,C
0009c5   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 09h s 5bytovym parametrem 
                                           
0009c6   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru adresare
0009c7   00bc     movwf	0x3c               	movwf CLUSTER1
0009c8   087a     movf	0x7a, w             	movfw 0x07A
0009c9   00bd     movwf	0x3d               	movwf CLUSTER2
0009ca   087b     movf	0x7b, w             	movfw 0x07B
0009cb   00be     movwf	0x3e               	movwf CLUSTER3
0009cc   087c     movf	0x7c, w             	movfw 0x07C
0009cd   00bf     movwf	0x3f               	movwf CLUSTER4
0009ce   2327     call	0x327               	call PRVNI_CL_ADRESARE
                                           
0009cf   183b     btfsc	0x3b, 0            	btfsc POZICE,0
0009d0   29e1     goto	0x1e1               	goto PRIKAZ_09h_SPATNY_PAR
                                           
0009d1   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru adresare
0009d2   00da     movwf	0x5a               	movwf HL_ADR_CL1
0009d3   087a     movf	0x7a, w             	movfw 0x07A
0009d4   00db     movwf	0x5b               	movwf HL_ADR_CL2
0009d5   087b     movf	0x7b, w             	movfw 0x07B
0009d6   00dc     movwf	0x5c               	movwf HL_ADR_CL3
0009d7   087c     movf	0x7c, w             	movfw 0x07C
0009d8   00dd     movwf	0x5d               	movwf HL_ADR_CL4
                                           
0009d9   087d     movf	0x7d, w             	movfw 0x07D
0009da   00e0     movwf	0x60               	movwf ZAZNAM1
0009db   087e     movf	0x7e, w             	movfw 0x07E
0009dc   00e1     movwf	0x61               	movwf ZAZNAM2
                                           
0009dd   087f     movf	0x7f, w             	movfw 0x07F
0009de   00d9     movwf	0x59               	movwf HL_PARAMETRY
                                           
0009df   2479     call	0x479               	call HLEDEJ		; mocna procedura, ktera man podle zadanych parametru vyhleda pozadovany zaznam 
                                           					; a umisti jej do bufferu2 na offset 32 (od zacatku bufferu)
0009e0   29e7     goto	0x1e7               	goto PRIKAZ_09h_KONEC
                                           PRIKAZ_09h_SPATNY_PAR
                                           	BANK_2
0009e3   3081     movlw	0x81               	movlw h'81'
0009e4   00b0     movwf	0x30               	movwf 0x130
                                           	BANK_0
                                           PRIKAZ_09h_KONEC
0009e7   3012     movlw	0x12               	movlw .18
0009e8   00b6     movwf	0x36               	movwf TEMP1	
                                           
                                           	PROG_PAGE_0
0009eb   22bb     call	0x2bb               	call ODESLI_BUFF2_HIGH
                                           	PROG_PAGE_1
                                           
0009ee   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
0009ef   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_0Ah						; 0Ah ‚Äì precti dlouhe jmeno
0009f0   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
0009f1   3c0a     sublw	0xa                	sublw h'0A'
0009f2   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0009f3   0008     return                   	return						; nebyl prijat prikaz 0Ah
0009f4   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 0Ah, nastavime byt STAV_PRIKAZU
0009f5   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
0009f6   3c06     sublw	0x6                	sublw .6					; pro prikaz 0Ah musi prijit 7 bytu (prikaz + 6bytu parametr)
0009f7   1803     btfsc	0x3, 0             	btfsc STATUS,C
0009f8   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 0Ah s 6bytovym parametrem 
                                           
0009f9   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru adresare
0009fa   00da     movwf	0x5a               	movwf HL_ADR_CL1
0009fb   00bc     movwf	0x3c               	movwf CLUSTER1
0009fc   087a     movf	0x7a, w             	movfw 0x07A
0009fd   00db     movwf	0x5b               	movwf HL_ADR_CL2
0009fe   00bd     movwf	0x3d               	movwf CLUSTER2
0009ff   087b     movf	0x7b, w             	movfw 0x07B
000a00   00dc     movwf	0x5c               	movwf HL_ADR_CL3
000a01   00be     movwf	0x3e               	movwf CLUSTER3
000a02   087c     movf	0x7c, w             	movfw 0x07C
000a03   00dd     movwf	0x5d               	movwf HL_ADR_CL4
000a04   00bf     movwf	0x3f               	movwf CLUSTER4
000a05   2327     call	0x327               	call PRVNI_CL_ADRESARE
                                           
000a06   1c3b     btfss	0x3b, 0            	btfss POZICE,0
000a07   2a0e     goto	0x20e               	goto PRIKAZ_0Ah_PAR1_OK
                                           
                                           PRIKAZ_0Ah_PAR1_NOT_OK
                                           	INDF_BANK_2
000a09   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
000a0a   0084     movwf	0x4                	movwf FSR
000a0b   3081     movlw	0x81               	movlw h'81'					; jako prvni byte odpovedi dame 81h (Zadany cluster neobsahuje adresar)
000a0c   00bb     movwf	0x3b               	movwf POZICE
000a0d   2a13     goto	0x213               	goto PRIKAZ_0Ah_KONEC
                                           PRIKAZ_0Ah_PAR1_OK
000a0e   087d     movf	0x7d, w             	movfw 0x07D
000a0f   00e0     movwf	0x60               	movwf ZAZNAM1
000a10   087e     movf	0x7e, w             	movfw 0x07E
000a11   00e1     movwf	0x61               	movwf ZAZNAM2
                                           
000a12   2659     call	0x659               	call LONG_NAME
                                           PRIKAZ_0Ah_KONEC
                                           	PROG_PAGE_0
000a15   083b     movf	0x3b, w             	movfw POZICE
000a16   229a     call	0x29a               	call WR_USART	
                                           	; At uz bylo v zaznamu cokoli, odesleme 65 bytu z BUFFERU 2
000a17   3041     movlw	0x41               	movlw .65
000a18   00b6     movwf	0x36               	movwf TEMP1
000a19   22c5     call	0x2c5               	call ODESLI_BUFFER2			; odesleme si zaznam o souboru	
                                           	PROG_PAGE_1
                                           
000a1c   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
000a1d   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_80h						; 80h ‚Äì hraj mp3 soubor
000a1e   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000a1f   3c80     sublw	0x80               	sublw h'80'
000a20   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000a21   0008     return                   	return						; nebyl prijat prikaz 80h
000a22   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 80h, nastavime byt STAV_PRIKAZU
000a23   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
000a24   3c06     sublw	0x6                	sublw .6					; pro prikaz 80h musi prijit 7 bytu (prikaz + 6bytu parametr)
000a25   1803     btfsc	0x3, 0             	btfsc STATUS,C
000a26   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 80h s 6bytovym parametrem 
                                           
000a27   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru adresare
000a28   00bc     movwf	0x3c               	movwf CLUSTER1
000a29   087a     movf	0x7a, w             	movfw 0x07A
000a2a   00bd     movwf	0x3d               	movwf CLUSTER2
000a2b   087b     movf	0x7b, w             	movfw 0x07B
000a2c   00be     movwf	0x3e               	movwf CLUSTER3
000a2d   087c     movf	0x7c, w             	movfw 0x07C
000a2e   00bf     movwf	0x3f               	movwf CLUSTER4
000a2f   2327     call	0x327               	call PRVNI_CL_ADRESARE
                                           
000a30   1c3b     btfss	0x3b, 0            	btfss POZICE,0
000a31   2a38     goto	0x238               	goto PRIKAZ_80h_PAR1_OK
                                           
                                           PRIKAZ_80h_PAR1_NOT_OK
                                           	INDF_BANK_2
000a33   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
000a34   0084     movwf	0x4                	movwf FSR
000a35   3081     movlw	0x81               	movlw h'81'					; jako prvni byte odpovedi dame 81h (Zadany cluster neobsahuje adresar)
000a36   0080     movwf	0                  	movwf INDF
000a37   2a7f     goto	0x27f               	goto PRIKAZ_80h_KONEC
                                           PRIKAZ_80h_PAR1_OK
                                           
000a38   087d     movf	0x7d, w             	movfw 0x07D
000a39   00e0     movwf	0x60               	movwf ZAZNAM1
000a3a   087e     movf	0x7e, w             	movfw 0x07E
000a3b   00e1     movwf	0x61               	movwf ZAZNAM2
                                           
000a3c   2361     call	0x361               	call SKOC_NA_ZAZNAM
000a3d   1c3b     btfss	0x3b, 0            	btfss POZICE,0
000a3e   2a45     goto	0x245               	goto PRIKAZ_80h_PAR2_OK
                                           
                                           PRIKAZ_80h_PAR2_NOT_OK
                                           	INDF_BANK_2
000a40   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
000a41   0084     movwf	0x4                	movwf FSR
000a42   3080     movlw	0x80               	movlw h'80'					; jako prvni byte odpovedi dame 80h (Zadany zaznam mimo rozsah)
000a43   0080     movwf	0                  	movwf INDF
000a44   2a7f     goto	0x27f               	goto PRIKAZ_80h_KONEC
                                           PRIKAZ_80h_PAR2_OK
                                           
000a45   23e1     call	0x3e1               	call FILE_INFO
                                           
                                           	INDF_BANK_2
000a47   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
000a48   0084     movwf	0x4                	movwf FSR
000a49   0800     movf	0, w                	movfw INDF
000a4a   3c06     sublw	0x6                	sublw h'06'					; pokud na zadanem miste se nachazi soubor s priponou mp3...
000a4b   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000a4c   2a7f     goto	0x27f               	goto PRIKAZ_80h_KONEC
                                           			
                                           	; ...nastavime jej jako prehravany soubor.
000a4d   301c     movlw	0x1c               	movlw 0x1C					; 13. byte bufferu 2
000a4e   0084     movwf	0x4                	movwf FSR
000a4f   0800     movf	0, w                	movfw INDF
000a50   00e9     movwf	0x69               	movwf PREH_DATA_CL1
000a51   00bc     movwf	0x3c               	movwf CLUSTER1
000a52   0a84     incf	0x4, f              	incf FSR,f
000a53   0800     movf	0, w                	movfw INDF
000a54   00ea     movwf	0x6a               	movwf PREH_DATA_CL2
000a55   00bd     movwf	0x3d               	movwf CLUSTER2
000a56   0a84     incf	0x4, f              	incf FSR,f
000a57   0800     movf	0, w                	movfw INDF
000a58   00eb     movwf	0x6b               	movwf PREH_DATA_CL3
000a59   00be     movwf	0x3e               	movwf CLUSTER3
000a5a   0a84     incf	0x4, f              	incf FSR,f
000a5b   0800     movf	0, w                	movfw INDF
000a5c   00ec     movwf	0x6c               	movwf PREH_DATA_CL4
000a5d   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
                                           	PROG_PAGE_0
000a60   2573     call	0x573               	call ZJISTI_FRAGMENT
                                           	PROG_PAGE_1
                                           ; v CLUSTER[1-4] prijme cislo clusteru a do FRAGMENT[1-2] umisti kolik clusteru 
                                           ; po tomto clusteru nasledujich (vcetne) tvori jeden fragment
                                           
                                           ; Pokud soucasny cluster je prazdny (coz by se stat nemelo) vrati v POZICE FFh
                                           ; Jinak, pokud s vse povede, dame do POZICE 0
                                           
                                           ; ! PODPROGRAM NENI POUZITELNY PRO CLUSTER 0 (prvni cluster ROOT adresare)
                                           ; ! PODPROGRAM NETESTUJE ZDA NEBYLO ZADANO VETSI CISLO NEZ JE POCET CLUSTERU !!!
000a63   0851     movf	0x51, w             	movfw FRAGMENT1
000a64   00d3     movwf	0x53               	movwf PREH_D_FRAGMENT1
000a65   0852     movf	0x52, w             	movfw FRAGMENT2
000a66   00d4     movwf	0x54               	movwf PREH_D_FRAGMENT2
                                           	
000a67   087d     movf	0x7d, w             	movfw 0x07D
000a68   00e6     movwf	0x66               	movwf PREH_ZAZNAM1
000a69   087e     movf	0x7e, w             	movfw 0x07E
000a6a   00e7     movwf	0x67               	movwf PREH_ZAZNAM2
                                           
000a6b   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru adresare
000a6c   00e2     movwf	0x62               	movwf PREH_ADR_CL1
000a6d   087a     movf	0x7a, w             	movfw 0x07A
000a6e   00e3     movwf	0x63               	movwf PREH_ADR_CL2
000a6f   087b     movf	0x7b, w             	movfw 0x07B
000a70   00e4     movwf	0x64               	movwf PREH_ADR_CL3
000a71   087c     movf	0x7c, w             	movfw 0x07C
000a72   00e5     movwf	0x65               	movwf PREH_ADR_CL4
                                           	; aktualni prehravany soubor i prehravana slozka byly nastaveny...
                                           
000a73   01ed     clrf	0x6d                	clrf PREH_DATA_POZICE
000a74   146e     bsf	0x6e, 0              	bsf PREH_STAV0,0
000a75   14ee     bsf	0x6e, 0x1            	bsf PREH_STAV0,1			; nastavime si vlastosti prehravani: (PREH_STAV[0-1])
                                           
000a76   10cd     bcf	0x4d, 0x1            	bcf VSREG_MODE_L,1			; prehravame normalni rychlosti 
000a77   106f     bcf	0x6f, 0              	bcf PREH_STAV1,0			; prehravame normalni rychlosti 
                                           	
000a78   204d     call	0x4d                	call VS_SOFT_RESET
                                           
000a79   3000     movlw	0                  	movlw VSADDR_MODE
000a7a   00b6     movwf	0x36               	movwf TEMP1
000a7b   084d     movf	0x4d, w             	movfw VSREG_MODE_L
000a7c   00b7     movwf	0x37               	movwf TEMP2
000a7d   01b8     clrf	0x38                	clrf TEMP3
000a7e   201c     call	0x1c                	call VS_WR_REG
                                           
                                           PRIKAZ_80h_KONEC
                                           	; At uz bylo v zaznamu cokoli, odesleme 1 byt z BUFFERU 2
                                           	INDF_BANK_2
000a80   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
000a81   0084     movwf	0x4                	movwf FSR
000a82   0800     movf	0, w                	movfw INDF
                                           	PROG_PAGE_0
000a85   229a     call	0x29a               	call WR_USART	
                                           	PROG_PAGE_1
                                           	
000a88   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
000a89   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_81h						; 81h ‚Äì vrat stav prehravaneho souboru
000a8a   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000a8b   3c81     sublw	0x81               	sublw h'81'
000a8c   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000a8d   0008     return                   	return						; nebyl prijat prikaz 81h
000a8e   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 81h, nastavime byt STAV_PRIKAZU
                                           	; pro prikaz 81h nejsou definovany zadne parametry, proto jiz nic jineho netestujeme
                                           
000a8f   086e     movf	0x6e, w             	movfw PREH_STAV0
                                           	PROG_PAGE_0
000a92   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
                                           
000a95   086f     movf	0x6f, w             	movfw PREH_STAV1
                                           	PROG_PAGE_0
000a98   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
                                           
000a9b   116e     bcf	0x6e, 0x2            	bcf PREH_STAV0,2			; 2. bit je nastaven, kdyz se zmeni prehravany soubor (bez volani prikazu) do doby, nez prijde prikaz na dotaz STAVU... (81h)
                                           
000a9c   3004     movlw	0x4                	movlw VSADDR_DECODE_TIME
000a9d   00b6     movwf	0x36               	movwf TEMP1
000a9e   202a     call	0x2a                	call VS_RD_REG				; zjistime si aktualni pozici v souboru v sekundach
000a9f   0837     movf	0x37, w             	movfw TEMP2
                                           	PROG_PAGE_0
000aa2   229a     call	0x29a               	call WR_USART
000aa3   0838     movf	0x38, w             	movfw TEMP3
000aa4   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
                                           
000aa7   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
000aa8   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_82h						; 82h ‚Äì nastav hlasitost
000aa9   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000aaa   3c82     sublw	0x82               	sublw h'82'
000aab   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000aac   0008     return                   	return						; nebyl prijat prikaz 82h
000aad   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 82h, nastavime byt STAV_PRIKAZU
000aae   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
000aaf   3c02     sublw	0x2                	sublw .2					; pro prikaz 82h museji prijit 3 byty (prikaz + 2byty parametr)
000ab0   1803     btfsc	0x3, 0             	btfsc STATUS,C
000ab1   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 82h s 2bytovym parametrem 
                                           
000ab2   0879     movf	0x79, w             	movfw 0x079					; hlasitost pro levy kanal
000ab3   00d0     movwf	0x50               	movwf VSREG_VOL_H
000ab4   087a     movf	0x7a, w             	movfw 0x07A					; hlasitost pro pravy kanal
000ab5   00cf     movwf	0x4f               	movwf VSREG_VOL_L
000ab6   208f     call	0x8f                	call VS_SET_VOLUME			; nastavime hlasitost	
                                           
000ab7   30ff     movlw	0xff               	movlw h'FF'
                                           	PROG_PAGE_0
000aba   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
000abd   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
000abe   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_83h						; 83h ‚Äì vrat informace o prehravanem souboru
000abf   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000ac0   3c83     sublw	0x83               	sublw h'83'
000ac1   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000ac2   0008     return                   	return						; nebyl prijat prikaz 83h
000ac3   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 83h, nastavime byt STAV_PRIKAZU
                                           	; pro prikaz 83h nejsou definovane zadne parametry, proto jiz nic jineho netestujeme
                                           
000ac4   3005     movlw	0x5                	movlw VSADDR_AUDATA
000ac5   00b6     movwf	0x36               	movwf TEMP1
000ac6   202a     call	0x2a                	call VS_RD_REG
000ac7   0837     movf	0x37, w             	movfw TEMP2
                                           	PROG_PAGE_0
000aca   229a     call	0x29a               	call WR_USART
000acb   0838     movf	0x38, w             	movfw TEMP3
000acc   229a     call	0x29a               	call WR_USART	
                                           	PROG_PAGE_1
                                           	; odeslali jsme AUDATA
                                           
000acf   3008     movlw	0x8                	movlw VSADDR_HDAT0
000ad0   00b6     movwf	0x36               	movwf TEMP1
000ad1   202a     call	0x2a                	call VS_RD_REG
000ad2   0837     movf	0x37, w             	movfw TEMP2
                                           	PROG_PAGE_0
000ad5   229a     call	0x29a               	call WR_USART
000ad6   0838     movf	0x38, w             	movfw TEMP3
000ad7   229a     call	0x29a               	call WR_USART	
                                           	PROG_PAGE_1
                                           	; odeslali jsme HDAT0
                                           
000ada   3009     movlw	0x9                	movlw VSADDR_HDAT1
000adb   00b6     movwf	0x36               	movwf TEMP1
000adc   202a     call	0x2a                	call VS_RD_REG
000add   0837     movf	0x37, w             	movfw TEMP2
                                           	PROG_PAGE_0
000ae0   229a     call	0x29a               	call WR_USART
000ae1   0838     movf	0x38, w             	movfw TEMP3
000ae2   229a     call	0x29a               	call WR_USART	
                                           	; odeslali jsme HDAT1
                                           
000ae3   0862     movf	0x62, w             	movfw PREH_ADR_CL1
000ae4   229a     call	0x29a               	call WR_USART
000ae5   0863     movf	0x63, w             	movfw PREH_ADR_CL2
000ae6   229a     call	0x29a               	call WR_USART
000ae7   0864     movf	0x64, w             	movfw PREH_ADR_CL3
000ae8   229a     call	0x29a               	call WR_USART
000ae9   0865     movf	0x65, w             	movfw PREH_ADR_CL4
000aea   229a     call	0x29a               	call WR_USART
                                           
000aeb   0866     movf	0x66, w             	movfw PREH_ZAZNAM1
000aec   229a     call	0x29a               	call WR_USART
000aed   0867     movf	0x67, w             	movfw PREH_ZAZNAM2
000aee   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
                                           
000af1   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
000af2   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_84h						; 84h ‚Äì nastav stav prehravani
000af3   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
000af4   3c84     sublw	0x84               	sublw h'84'
000af5   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000af6   0008     return                   	return						; nebyl prijat prikaz 84h
000af7   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 84h, nastavime byt STAV_PRIKAZU
000af8   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
000af9   3c02     sublw	0x2                	sublw .2					; pro prikaz 8h museji prijit 3 byty (prikaz + 2byty parametr)
000afa   1803     btfsc	0x3, 0             	btfsc STATUS,C
000afb   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 84h s 2bytovym parametrem 
                                           
000afc   086e     movf	0x6e, w             	movfw PREH_STAV0
000afd   3906     andlw	0x6                	andlw b'00000110'
000afe   00ee     movwf	0x6e               	movwf PREH_STAV0
000aff   0879     movf	0x79, w             	movfw 0x079					; parametr 1
000b00   39f9     andlw	0xf9               	andlw b'11111001'			; nektere bity vymaskujeme (vsechny nelze ovladat prikazem)
000b01   046e     iorwf	0x6e, w            	iorwf PREH_STAV0,w	
000b02   00ee     movwf	0x6e               	movwf PREH_STAV0
                                           
000b03   087a     movf	0x7a, w             	movfw 0x07A					; parametr 2
000b04   00ef     movwf	0x6f               	movwf PREH_STAV1
                                           
000b05   10cd     bcf	0x4d, 0x1            	bcf VSREG_MODE_L,1			; prehravame normalni rychlosti (zda se mp3 prevyji je reseno v hlavni smycce podle stavu registru PREH_STAV1)
000b06   13cd     bcf	0x4d, 0x7            	bcf VSREG_MODE_L,7			;bass/treble enhancer
000b07   19ef     btfsc	0x6f, 0x3          	btfsc PREH_STAV1,3			; 3. bit =	1 => zvyrazneni basu a vysek (moznost dekoderu vs1001 "bass/treble enhancer")
000b08   17cd     bsf	0x4d, 0x7            	bsf VSREG_MODE_L,7			;bass/treble enhancer
                                           	
000b09   3000     movlw	0                  	movlw VSADDR_MODE
000b0a   00b6     movwf	0x36               	movwf TEMP1
000b0b   084d     movf	0x4d, w             	movfw VSREG_MODE_L
000b0c   00b7     movwf	0x37               	movwf TEMP2
000b0d   01b8     clrf	0x38                	clrf TEMP3
000b0e   201c     call	0x1c                	call VS_WR_REG
                                           	
000b0f   3001     movlw	0x1                	movlw VSADDR_STATUS
000b10   202a     call	0x2a                	call VS_RD_REG
000b11   0837     movf	0x37, w             	movfw TEMP2
000b12   00ce     movwf	0x4e               	movwf VSREG_STATUS_L
                                           
000b13   114e     bcf	0x4e, 0x2            	bcf VSREG_STATUS_L,2		; Bit 2 is analog powerdown bit.
000b14   1a6f     btfsc	0x6f, 0x4          	btfsc PREH_STAV1,4			; 4. bit = 1 => MUTE
000b15   154e     bsf	0x4e, 0x2            	bsf VSREG_STATUS_L,2		; Bit 2 is analog powerdown bit.
                                           	
000b16   3001     movlw	0x1                	movlw VSADDR_STATUS
000b17   00b6     movwf	0x36               	movwf TEMP1
000b18   084e     movf	0x4e, w             	movfw VSREG_STATUS_L
000b19   00b7     movwf	0x37               	movwf TEMP2
000b1a   01b8     clrf	0x38                	clrf TEMP3
000b1b   201c     call	0x1c                	call VS_WR_REG
                                           
000b1c   1e6f     btfss	0x6f, 0x4          	btfss PREH_STAV1,4			; 4. bit = 1 => MUTE
000b1d   208f     call	0x8f                	call VS_SET_VOLUME			; nastavime hlasitost
                                           								; nevim sice proc, ale kdyz prepisu VS reg. STATUS, zmeni se hlasitost
                                           
                                           	PROG_PAGE_0
000b20   30ff     movlw	0xff               	movlw h'FF'
000b21   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_1
000b24   01e8     clrf	0x68                	clrf PREH_CITAC_PREV
000b25   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
000b26   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           	include "filesystem.asm"; podprogramy pro praci s adresari a setrideni obsahu adresaru
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           ; podprogramy pro praci s adresari a setrideni obsahu adresaru
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           
                                           ;**************************************************************************
                                           PRVNI_CL_ADRESARE
                                           	; V CLUSTER[1-4] prijme cislo clusteru. Zkontroluje, zda zadany sluster obsahuje zacatek adresare
                                           	; V POZICE vrati 00h, pokud cluster je prvni cluster nejakeho adresare, FFh, pokud neobsahuje adresar
000b27   01bb     clrf	0x3b                	clrf POZICE
                                           
000b28   083c     movf	0x3c, w             	movfw CLUSTER1
000b29   043d     iorwf	0x3d, w            	iorwf CLUSTER2,W
000b2a   043e     iorwf	0x3e, w            	iorwf CLUSTER3,W
000b2b   043f     iorwf	0x3f, w            	iorwf CLUSTER4,W
000b2c   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000b2d   0008     return                   	return				; pokud CLUSTER[1-4]=0, tak se jedna o 1. cluster ROOT adr., proto nemusime dale resit co tam je...
                                           	
                                           	PROG_PAGE_0
000b30   2488     call	0x488               	call CLUSTER_TO_LBA
000b31   3001     movlw	0x1                	movlw .1
000b32   00a6     movwf	0x26               	movwf SECTOR_C
000b33   23e1     call	0x3e1               	call READ_SECTOR	; precteme udajny prvni sektor z prvniho clusteru adresare	
                                           	PROG_PAGE_1
                                           
                                           	; Tady vychazime z toho, ze kazdy adresar krome ROOTu ma jako prvni zaznam ukazatel na sebe (jako jmeno je jedna tecka)
                                           	; Mohlo by se sice stat, ze bychom narazili na soubor, ktery zacina retezcem ".          " to bych ale neresil...
000b36   30ff     movlw	0xff               	movlw h'FF'
000b37   00bb     movwf	0x3b               	movwf POZICE
                                           
                                           	PROG_PAGE_0
000b3a   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_1
000b3d   0820     movf	0x20, w             	movfw DATA_L
000b3e   3c2e     sublw	0x2e               	sublw '.'		; 1. znak
000b3f   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000b40   2b60     goto	0x360               	goto PRVNI_CL_ADRESARE_KONEC
000b41   0821     movf	0x21, w             	movfw DATA_H
000b42   3c20     sublw	0x20               	sublw h'20'		; 2. znak
000b43   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000b44   2b60     goto	0x360               	goto PRVNI_CL_ADRESARE_KONEC
                                           
000b45   3004     movlw	0x4                	movlw .4		; dalsich 8 znaku maji byt mezery
000b46   00b6     movwf	0x36               	movwf TEMP1
                                           	
                                           PRVNI_CL_ADRESARE_MEZERY
                                           	PROG_PAGE_0
000b49   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_1
000b4c   0820     movf	0x20, w             	movfw DATA_L
000b4d   3c20     sublw	0x20               	sublw h'20'
000b4e   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000b4f   2b60     goto	0x360               	goto PRVNI_CL_ADRESARE_KONEC
000b50   0821     movf	0x21, w             	movfw DATA_H
000b51   3c20     sublw	0x20               	sublw h'20'
000b52   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000b53   2b60     goto	0x360               	goto PRVNI_CL_ADRESARE_KONEC
000b54   0bb6     decfsz	0x36, f           	decfsz TEMP1,f
000b55   2b47     goto	0x347               	goto PRVNI_CL_ADRESARE_MEZERY
                                           
                                           	PROG_PAGE_0
000b58   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_1
000b5b   0820     movf	0x20, w             	movfw DATA_L
000b5c   3c20     sublw	0x20               	sublw h'20'
000b5d   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000b5e   2b60     goto	0x360               	goto PRVNI_CL_ADRESARE_KONEC
                                           
000b5f   01bb     clrf	0x3b                	clrf POZICE	
                                           PRVNI_CL_ADRESARE_KONEC
000b60   0008     return                   	return
                                           ;**************************************************************************
                                           SKOC_NA_ZAZNAM
                                           	; !!!! pozor, tato procedura potrebuje min. 5 mist ve STACKu (vcetne sama sebe)
                                           
                                           	; V CLUSTER[1-4] prijme cislo clusteru na kterem se nachazi zacatek adresare
                                           	; V ZAZNAM[1-2] prijme cislo zaznamu 
                                           	; - pokud ZAZNAM[1-2] ukazuji mimo adresar, vrati v POZICE FFh (jinak 00h)
                                           	; - pokud byl zaznam nalezen,
                                           	; 	da disku prikaz k jeho precteni a skoci az k zaznamu...
                                           	; 	...v bufferu disku budeme mit teda 32bytu dat ktere prezentuji jeden zaznam ve slozce
000b61   0860     movf	0x60, w             	movfw ZAZNAM1
                                           	BANK_1
000b64   00a0     movwf	0x20               	movwf OPERAND_X1
                                           	BANK_0
000b67   0861     movf	0x61, w             	movfw ZAZNAM2
                                           	BANK_1
000b6a   00a1     movwf	0x21               	movwf OPERAND_X2
000b6b   01a2     clrf	0x22                	clrf OPERAND_X3
000b6c   01a3     clrf	0x23                	clrf OPERAND_X4
                                           	BANK_0					; OPERAND_X := ZAZNAM
                                           	
                                           	PROG_PAGE_0
000b71   2708     call	0x708               	call POSUNDOPRAVA_4		; OPERAND_X := OPERAND_X div 16
                                           	; tady mame v PRETECENI kolikaty zaznam v sektoru chceme
                                           	BANK_1
000b74   082c     movf	0x2c, w             	movfw PRETECENI
                                           	BANK_0
000b77   00ba     movwf	0x3a               	movwf TEMP5
                                           	BANK_1
000b7a   01ac     clrf	0x2c                	clrf PRETECENI				; pokud CLUSTER_SIZE = 1 tak preteceni := 0 a X zustane stejne
                                           	BANK_0
                                           
000b7d   18cc     btfsc	0x4c, 0x1          	btfsc CLUSTER_SIZE,1		; 2
000b7e   26ea     call	0x6ea               	call POSUNDOPRAVA_1			; X := X div 2
000b7f   194c     btfsc	0x4c, 0x2          	btfsc CLUSTER_SIZE,2		; 4
000b80   26f3     call	0x6f3               	call POSUNDOPRAVA_2			; X := X div 4
000b81   19cc     btfsc	0x4c, 0x3          	btfsc CLUSTER_SIZE,3		; 8
000b82   26fd     call	0x6fd               	call POSUNDOPRAVA_3			; X := X div 8
000b83   1a4c     btfsc	0x4c, 0x4          	btfsc CLUSTER_SIZE,4		; 16
000b84   2708     call	0x708               	call POSUNDOPRAVA_4			; X := X div 4
000b85   1acc     btfsc	0x4c, 0x5          	btfsc CLUSTER_SIZE,5		; 32
000b86   2714     call	0x714               	call POSUNDOPRAVA_5			; X := X div 32
000b87   1b4c     btfsc	0x4c, 0x6          	btfsc CLUSTER_SIZE,6		; 64
000b88   2721     call	0x721               	call POSUNDOPRAVA_6			; X := X div 64
000b89   1bcc     btfsc	0x4c, 0x7          	btfsc CLUSTER_SIZE,7		; 128
000b8a   272f     call	0x72f               	call POSUNDOPRAVA_7			; X := X div 128
                                           	; tady mame v PRETECENI na kolikatem sektoru v clusteru je hledany zaznam
                                           	BANK_1
000b8d   082c     movf	0x2c, w             	movfw PRETECENI
                                           	BANK_0
000b90   00b9     movwf	0x39               	movwf TEMP4
                                           
                                           	; OPERAND_X := (ZAZNAM div 16) div CLUSTER_SIZE
                                           	; ted v OPERAND_X mame hodnotu kolik clusteru mame od zacatku adresare preskocit...
                                           SKOC_NA_ZAZNAM_PRESKOC_CL
                                           	PROG_PAGE_0
000b93   273e     call	0x73e               	call NULA
                                           	PROG_PAGE_1
                                           	BANK_1
000b98   1c2c     btfss	0x2c, 0            	btfss PRETECENI,0
000b99   2bbf     goto	0x3bf               	goto SKOC_NA_ZAZNAM_MAME_CL	
                                           	BANK_0
                                           
                                           	INDF_BANK_1
000b9d   30a0     movlw	0xa0               	movlw 0xA0
000b9e   0084     movwf	0x4                	movwf FSR
000b9f   0800     movf	0, w                	movfw INDF
000ba0   00b7     movwf	0x37               	movwf TEMP2
000ba1   0a84     incf	0x4, f              	incf FSR,F
000ba2   0800     movf	0, w                	movfw INDF
000ba3   00b8     movwf	0x38               	movwf TEMP3
                                           
                                           	PROG_PAGE_0
000ba6   24eb     call	0x4eb               	call NEXT_CLUSTER
                                           	PROG_PAGE_1
000ba9   183b     btfsc	0x3b, 0            	btfsc POZICE,0		; pokud s vse povedlo, mame v POZICE 0
000baa   2bde     goto	0x3de               	goto SKOC_NA_ZAZNAM_MIMO_ROZSAH
                                           
                                           	INDF_BANK_1
000bac   30a0     movlw	0xa0               	movlw 0xA0
000bad   0084     movwf	0x4                	movwf FSR
000bae   0837     movf	0x37, w             	movfw TEMP2
000baf   0080     movwf	0                  	movwf INDF
000bb0   0a84     incf	0x4, f              	incf FSR,F
000bb1   0838     movf	0x38, w             	movfw TEMP3
000bb2   0080     movwf	0                  	movwf INDF
                                           	BANK_1
000bb5   01a2     clrf	0x22                	clrf OPERAND_X3
000bb6   01a3     clrf	0x23                	clrf OPERAND_X4
                                           	BANK_0	
                                           
                                           	PROG_PAGE_0
000bbb   2681     call	0x681               	call DEKREMENTUJ	; X := X - 1
                                           	PROG_PAGE_1
                                           
000bbe   2b91     goto	0x391               	goto SKOC_NA_ZAZNAM_PRESKOC_CL
                                           
                                           SKOC_NA_ZAZNAM_MAME_CL
                                           	BANK_0
                                           
000bc1   0839     movf	0x39, w             	movfw TEMP4					; v kolikatem sektoru v clusteru je hledany zaznam
000bc2   00bb     movwf	0x3b               	movwf POZICE 
                                           	PROG_PAGE_0
000bc5   2488     call	0x488               	call CLUSTER_TO_LBA			; zjistime si skutecnou polohu zaznamu na disku
000bc6   3001     movlw	0x1                	movlw .1
000bc7   00a6     movwf	0x26               	movwf SECTOR_C
000bc8   23e1     call	0x3e1               	call READ_SECTOR			; dame prikaz precist sektor
                                           	PROG_PAGE_1
                                           
000bcb   3010     movlw	0x10               	movlw .16
000bcc   00de     movwf	0x5e               	movwf ZAZNAMU_vBUFFERU_DISKU
000bcd   083a     movf	0x3a, w             	movfw TEMP5
000bce   02de     subwf	0x5e, f            	subwf ZAZNAMU_vBUFFERU_DISKU,f		; ZAZNAMU_vBUFFERU_DISKU := 16 - TEMP5
                                           
000bcf   083a     movf	0x3a, w             	movfw TEMP5					; kolikaty zaznam v casti adersare (sektoru) mame precist [0..15]
000bd0   390f     andlw	0xf                	andlw b'00001111'
000bd1   00b6     movwf	0x36               	movwf TEMP1					; rozsah by mel byt spravne, pro jistotu jej ale orizneme [0..15]
000bd2   39ff     andlw	0xff               	andlw h'FF'
000bd3   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z				; pokud chceme prvni zaznam ze sektoru...
000bd4   2bdb     goto	0x3db               	goto SKOC_NA_ZAZNAM_MAME_ZAZNAM 	; ...koncime
                                           
000bd5   0eb6     swapf	0x36, f            	swapf TEMP1,F				; protoze kazdy zaznam o souboru ma 32B=16slov, tak musime TEMP1 vynasobit 16...
                                           	PROG_PAGE_0
000bd8   23a4     call	0x3a4               	call PRESKOC				; a tolik slov preskocit (tolik slov je pro nas nepotrebnych)
                                           	PROG_PAGE_1
                                           
                                           SKOC_NA_ZAZNAM_MAME_ZAZNAM
000bdb   3000     movlw	0                  	movlw h'00'
000bdc   00bb     movwf	0x3b               	movwf POZICE 
000bdd   2be0     goto	0x3e0               	goto SKOC_NA_ZAZNAM_KONEC
                                           SKOC_NA_ZAZNAM_MIMO_ROZSAH
000bde   30ff     movlw	0xff               	movlw h'FF'
000bdf   00bb     movwf	0x3b               	movwf POZICE 
                                           SKOC_NA_ZAZNAM_KONEC
000be0   0008     return                   	return
                                           ;**************************************************************************
                                           FILE_INFO
                                           	; z disku nam ted ma prijit 32bytu dat, ktere reprezentuji jeden zaznam ve slozce
                                           	; tato procedura zaznam precte, analyzuje, a do bufferu 2 da nasledujici informace:
                                           	;		1.     byte -> 	= 00h -> zaznam je prazdny; 
                                           	;						= 01h -> zaznam je adresar; 
                                           	;						= 02h -> zaznam je soubor; 
                                           	;						= 06h -> zaznam je soubor s priponou MP3
                                           	;		2..9   byte -> 8 znaku dlouhe jmeno ("DOSovsky" tvar - napr. slouzka "dokumenty" = "DOKUME~1" )
                                           	;		10..12 byte -> u souboru tri znaky pripony (u adresaru vetsinou mezery - 20h 20h 20h)
                                           	;		13..16 byte -> 1. cluster souboru
                                           	; Pokud se jedna o adresar, a zaznam o pripone se nerovna 0x202020 (tri mezery), tak skutecne jmeno adresare je : ADRESAR.PRI
                                           	INDF_BANK_2
000be2   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 2
000be3   0084     movwf	0x4                	movwf FSR
000be4   3000     movlw	0                  	movlw .0					; zatim nevime co zaznam obsahuje, tak ho oznacime jako prazdny
000be5   0080     movwf	0                  	movwf INDF
000be6   0a84     incf	0x4, f              	incf FSR,F	
                                           
000be7   3005     movlw	0x5                	movlw .5					; 5 slov = 10 bytu -> 8 znaku jmena souboru/slozky + 2 znaky pripony
000be8   00b6     movwf	0x36               	movwf TEMP1
                                           FILE_INFO__READ_NAME
                                           	PROG_PAGE_0
000beb   2382     call	0x382               	call READ_DATA				; 2 znaky jmena souboru/slozky, nebo pripony souboru
                                           	PROG_PAGE_1
000bee   0820     movf	0x20, w             	movfw DATA_L
000bef   0080     movwf	0                  	movwf INDF
000bf0   0a84     incf	0x4, f              	incf FSR,F
000bf1   0821     movf	0x21, w             	movfw DATA_H
000bf2   0080     movwf	0                  	movwf INDF
000bf3   0a84     incf	0x4, f              	incf FSR,F
000bf4   03b6     decf	0x36, f             	decf TEMP1,F
000bf5   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000bf6   2be9     goto	0x3e9               	goto FILE_INFO__READ_NAME	
                                           
                                           	PROG_PAGE_0
000bf9   2382     call	0x382               	call READ_DATA				; posledni znak pripony a byt s atributy souboru
                                           	PROG_PAGE_1
000bfc   0820     movf	0x20, w             	movfw DATA_L
000bfd   0080     movwf	0                  	movwf INDF
                                           
000bfe   3011     movlw	0x11               	movlw 0x11					; 2. byte bufferu 2 -> 1. znak jmena souboru
000bff   0084     movwf	0x4                	movwf FSR
000c00   0800     movf	0, w                	movfw INDF					; ted ve W mame 1. znak jmena souboru/slozky
000c01   39ff     andlw	0xff               	andlw h'FF'
000c02   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000c03   2c54     goto	0x454               	goto FILE_INFO__CTI20_KONEC		; pokud 1. znak jmena souboru = 00h, je zaznam prazdny
000c04   3ce5     sublw	0xe5               	sublw h'E5'
000c05   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000c06   2c54     goto	0x454               	goto FILE_INFO__CTI20_KONEC		; pokud 1. znak jmena souboru = E5h, je zaznam prazdny
                                           	
                                           	; pokud jsme tady, tak zaznam obsahuje soubor, adresar, dlouhe jmeno souboru, nebo jmenovku disku 
                                           	; (jsou dva zpusoby jak zapsat jmenovku svazku, bud do spousteciho zaznamu, nebo jako polozku ROOT adresare)
000c07   0821     movf	0x21, w             	movfw DATA_H				; byt s atributy souboru
000c08   390f     andlw	0xf                	andlw h'0F'
000c09   3c0f     sublw	0xf                	sublw h'0F'					; if (atributy and 0Fh) = 0Fh -> zaznam s dlouhym nazvem souboru
000c0a   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000c0b   2c54     goto	0x454               	goto FILE_INFO__CTI20_KONEC		; pokud zaznam je dlouhy nazav souboru, koncime
000c0c   19a1     btfsc	0x21, 0x3          	btfsc DATA_H,3
000c0d   2c54     goto	0x454               	goto FILE_INFO__CTI20_KONEC		; if (atributy and 08h) = 08h -> jmenovka disku
000c0e   1a21     btfsc	0x21, 0x4          	btfsc DATA_H,4				; if (atributy and 10h) = 10h -> adresar
000c0f   2c25     goto	0x425               	goto FILE_INFO__DIR
                                           
000c10   3002     movlw	0x2                	movlw h'02'					; zaznam je soubor
000c11   00b6     movwf	0x36               	movwf TEMP1
                                           	; tady vime, ze zaznam je soubor, tak se podivame, zda to neni mp3
000c12   3019     movlw	0x19               	movlw 0x19					; 10. byt bufferu 2 -> 1. znak pripony souboru
000c13   0084     movwf	0x4                	movwf FSR
                                           
000c14   0800     movf	0, w                	movfw INDF
000c15   3c4d     sublw	0x4d               	sublw 'M'					; (jmena souboru v "DOSovskem" tvaru maji vzdy velka pismena)
000c16   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000c17   2c27     goto	0x427               	goto FILE_INFO__FILE
000c18   0a84     incf	0x4, f              	incf FSR,F
000c19   0800     movf	0, w                	movfw INDF
000c1a   3c50     sublw	0x50               	sublw 'P'
000c1b   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000c1c   2c27     goto	0x427               	goto FILE_INFO__FILE
000c1d   0a84     incf	0x4, f              	incf FSR,F
000c1e   0800     movf	0, w                	movfw INDF
000c1f   3c33     sublw	0x33               	sublw '3'
000c20   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000c21   2c27     goto	0x427               	goto FILE_INFO__FILE
                                           
000c22   3006     movlw	0x6                	movlw h'06'					; ted je jasne, ze soubor je mp3
000c23   00b6     movwf	0x36               	movwf TEMP1
000c24   2c27     goto	0x427               	goto FILE_INFO__FILE
                                           
                                           FILE_INFO__DIR
000c25   3001     movlw	0x1                	movlw h'01'					; zaznam je adresar
000c26   00b6     movwf	0x36               	movwf TEMP1
                                           
                                           FILE_INFO__FILE
                                           	; tady mame v TEMP 1 jednu z nasledujicich hodnot:
                                           	; 01h -> zaznam je adresar; 02h -> zaznam je soubor; 06h -> zaznam je soubor s priponou MP3
000c27   3010     movlw	0x10               	movlw 0x10					; 1. byt bufferu 2 -> identifikace zaznamu
000c28   0084     movwf	0x4                	movwf FSR
000c29   0836     movf	0x36, w             	movfw TEMP1
000c2a   0080     movwf	0                  	movwf INDF
                                           
000c2b   3004     movlw	0x4                	movlw .4
000c2c   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
000c2f   23a4     call	0x3a4               	call PRESKOC				; nasledujicich 8 bytu ze zaznamu je pro nas k nicemu (obsahuji cas posledni upravy, otevreni a buh vi co jeste...)
                                           	PROG_PAGE_1
                                           
000c32   301e     movlw	0x1e               	movlw 0x1E					; 15. byt bufferu 2 -> 2. byt prvniho clusteru
000c33   0084     movwf	0x4                	movwf FSR
                                           	PROG_PAGE_0
000c36   2382     call	0x382               	call READ_DATA				; jedno slovo -> horni cast cisla prvniho clusteru
                                           	PROG_PAGE_1
000c39   0820     movf	0x20, w             	movfw DATA_L
000c3a   0080     movwf	0                  	movwf INDF
000c3b   0a84     incf	0x4, f              	incf FSR,F
000c3c   0821     movf	0x21, w             	movfw DATA_H
000c3d   0080     movwf	0                  	movwf INDF
                                           
                                           	PROG_PAGE_0
000c40   2382     call	0x382               	call READ_DATA				; cas vytvoreni   (1 word)
000c41   2382     call	0x382               	call READ_DATA				; datum vytvoreni (1 word)
                                           
000c42   301c     movlw	0x1c               	movlw 0x1C					; 13. byt bufferu 2 -> 0. byt prvniho clusteru
000c43   0084     movwf	0x4                	movwf FSR
000c44   2382     call	0x382               	call READ_DATA				; jedno slovo -> dolni cast cisla prvniho clusteru
                                           	PROG_PAGE_1
000c47   0820     movf	0x20, w             	movfw DATA_L
000c48   0080     movwf	0                  	movwf INDF
000c49   0a84     incf	0x4, f              	incf FSR,F
000c4a   0821     movf	0x21, w             	movfw DATA_H
000c4b   0080     movwf	0                  	movwf INDF
                                           	
                                           	; Pak jsou v zaznamu jeste 4 byty, ktere obsahuji velikost souboru. Ty mi sice nepotrebujeme,
                                           	; musime je ale precist, aby jsme precetli vsech 32 bytu zaznamu
000c4c   3002     movlw	0x2                	movlw .2
000c4d   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
000c50   23a4     call	0x3a4               	call PRESKOC
                                           	PROG_PAGE_1
000c53   0008     return                   	return
                                           FILE_INFO__CTI20_KONEC
000c54   300a     movlw	0xa                	movlw .10
000c55   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
000c58   23a4     call	0x3a4               	call PRESKOC
                                           	PROG_PAGE_1
000c5b   0008     return                   	return
                                           ;**************************************************************************
                                           FILE_SIZE
                                           	; z disku nam ted ma prijit 32bytu dat, ktere reprezentuji jeden zaznam ve slozce
                                           	; Zaznam by mel byt soubor, podprogram toto nekontroluje (zda zaznam neni adresar)
                                           	; Na zacatek bufferu 1 da 4 byty obsahujici velikost zaznamu
000c5c   300e     movlw	0xe                	movlw .14					; my ted potrebujeme jen posledni 4 byty ze zaznamu, tam se nachazi velikost souboru
000c5d   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
000c60   23a4     call	0x3a4               	call PRESKOC
                                           	PROG_PAGE_1
                                           
                                           	INDF_BANK_2
000c64   3010     movlw	0x10               	movlw 0x10					; 1. byte bufferu 1
000c65   0084     movwf	0x4                	movwf FSR
                                           
                                           	PROG_PAGE_0
000c68   2382     call	0x382               	call READ_DATA
000c69   0820     movf	0x20, w             	movfw DATA_L
000c6a   0080     movwf	0                  	movwf INDF
000c6b   0a84     incf	0x4, f              	incf FSR,F
000c6c   0821     movf	0x21, w             	movfw DATA_H
000c6d   0080     movwf	0                  	movwf INDF
000c6e   0a84     incf	0x4, f              	incf FSR,F
                                           
000c6f   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_1
000c72   0820     movf	0x20, w             	movfw DATA_L
000c73   0080     movwf	0                  	movwf INDF
000c74   0a84     incf	0x4, f              	incf FSR,F
000c75   0821     movf	0x21, w             	movfw DATA_H
000c76   0080     movwf	0                  	movwf INDF
000c77   0a84     incf	0x4, f              	incf FSR,F
                                           
000c78   0008     return                   	return
                                           ;**************************************************************************
                                           HLEDEJ
                                           ; !!!! pozor, tato procedura potrebuje min. 6 mist ve STACKu (vcetne sama sebe)
                                           
                                           ; mocna procedura, ktera nam podle zadanych parametru vyhleda pozadovany zaznam 
                                           ; a umisti jej do bufferu2 na offset 32 (do horni poloviny bufferu)
                                           
                                           ; ZAZNAM V DRUHE POLOVINE BUFFERU2 MA NASLEDUJICI STRUKTURU:
                                           ;	1. byte:	= 00h -> zadny vyhovujici zaznam nebyl nalezen
                                           ;				= 01h -> zaznam je adresar
                                           ;				= 02h -> zaznam je soubor; 
                                           ;				= 06h -> zaznam je soubor s priponou MP3
                                           ;	2..9   byte -> 8 znaku dlouhe jmeno ("DOSovsky" tvar - napr. slouzka "dokumenty" = "DOKUME~1" )
                                           ;	10..12 byte -> u souboru tri znaky pripony (u adresaru vetsinou mezery - 20h 20h 20h)
                                           ;	13..16 byte -> 1. cluster souboru / adresare
                                           ;	17..18 byte -> cislo zaznamu v adresari
                                           
                                           ; 	HL_PARAMETRY 	-- parametry hledani
                                           ;	HL_ADR_CL[1-4]	-- prnvi cluster prohledavaneho adresare
                                           ;	ZAZNAM[1-2]		-- zaznam od ktereho hledame
                                           
                                           ; Filozofie je takova, ze v bufferu 1 mame ulozen zaznam vuci kteremu vyhledavame (ZAZ_REF),
                                           ; v dolni polovine bufferu 2 mame ulozen zaznam, ktery jsme prave precetli (ZAZ_A)
                                           ; a v hodni polovine bufferu 2 zaznam, ktery zatim byl nejblize k pozadovanemu zaznamu (ZAZ_N).
                                           
                                           ; Hruby vyvojak by pak mohl vypadat takto:
                                           ;******************************************************************************************************
                                           ; if ((HL_PARAMETRY = [prvni]):
                                           ;	if (CLUSTER = ROOT):
                                           ;		HL_PARAMETRY := [dalsi]
                                           ;		ZAZ_REF := 0x0000000.....
                                           ;		goto hledej_hledani
                                           ;	elseif (HL_PARAMETRY != [vracet '..']):
                                           ;		ZAZ_REF := zaznam 1
                                           ;		HL_PARAMETRY := [dalsi]
                                           ;	else
                                           ;		ZAZ_N naplnit daty ze zaznamu 1 // prvni polozkou vsech adresaru krome ROOTu jsou ".."
                                           ;		goto hledej_konec
                                           ;	endif;
                                           ; endif;
                                           
                                           ; if ((CLUSTER != ROOT) and (ZAZNAM<2)):
                                           ;		if (HL_PARAMETRY = [dalsi]):
                                           ;			ZAZ_REF := 0x0000000.....
                                           ;			goto hledej_hledani
                                           ;		else:
                                           ;			goto hledej_konec
                                           ;		endif;
                                           ; endif;
                                           ;
                                           ; ZAZ_REF naplnit daty ze zaznamu ZAZNAM
                                           ; ZAZNAM := 0
                                           ; if (CLUSTER != ROOT):
                                           ;		ZAZNAM :=2
                                           ; end;
                                           ;
                                           ; repeat
                                           ;	nacti_zaznam
                                           ;	IF     (hledame dalsi zaznam)     AND (ZAZ_A > ZAZ_REF) AND ((ZAZ_A < ZAZ_N) OR (ZAZ_N is empty)):
                                           ;			ZAZ_N := ZAZ_A
                                           ;	ELSEIF (hledame predchozi zaznam) AND (ZAZ_A < ZAZ_REF) AND (ZAZ_A > ZAZ_N):
                                           ;			ZAZ_N := ZAZ_A
                                           ;	ENDIF
                                           ;	zaznam++
                                           ; until (byl zaznam posledni)
                                           ;
                                           ; if (HL_PARAMETRY = [predchozi]) and (ZAZ_N = 00000) and (!ROOT) and (HL_PARAMETRY = [vracet '..']):
                                           ;	ZAZ_N naplnit daty ze zaznamu 1
                                           ; endif;
                                           ; KONEC
                                           ;******************************************************************************************************
                                           	PROG_PAGE_0
000c7b   23ba     call	0x3ba               	call CLEAR_BUFFER2		; vymazeme si buffer2, abychom tam nemeli bordel
                                           	PROG_PAGE_1
000c7e   25e6     call	0x5e6               	call CLEAR_BUFFER1		; vymazeme si buffer1, abychom tam nemeli bordel
                                           
000c7f   085a     movf	0x5a, w             	movfw HL_ADR_CL1
000c80   00bc     movwf	0x3c               	movwf CLUSTER1
000c81   085b     movf	0x5b, w             	movfw HL_ADR_CL2
000c82   00bd     movwf	0x3d               	movwf CLUSTER2
000c83   085c     movf	0x5c, w             	movfw HL_ADR_CL3
000c84   00be     movwf	0x3e               	movwf CLUSTER3
000c85   085d     movf	0x5d, w             	movfw HL_ADR_CL4
000c86   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
                                           	; protoze to budeme v nasledujicim kodu potrebova, nastavime si 7. bit HL_PARAMETRY podle toho, 
                                           	; zda predany adresar je ROOT ci nikoliv
                                           	;		7. bit - tento bit nelze nastavit uzivatelem
                                           	;			= 0 > adresar je ROOT
                                           	;			= 1 > adresar neni ROOT
000c87   13d9     bcf	0x59, 0x7            	bcf HL_PARAMETRY,7
000c88   30ff     movlw	0xff               	movlw h'FF'	
000c89   05bc     andwf	0x3c, f            	andwf CLUSTER1,F
000c8a   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000c8b   17d9     bsf	0x59, 0x7            		bsf HL_PARAMETRY,7
000c8c   05bd     andwf	0x3d, f            	andwf CLUSTER2,F
000c8d   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000c8e   17d9     bsf	0x59, 0x7            		bsf HL_PARAMETRY,7
000c8f   05be     andwf	0x3e, f            	andwf CLUSTER3,F
000c90   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000c91   17d9     bsf	0x59, 0x7            		bsf HL_PARAMETRY,7
000c92   05bf     andwf	0x3f, f            	andwf CLUSTER4,F
000c93   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000c94   17d9     bsf	0x59, 0x7            		bsf HL_PARAMETRY,7
                                           
                                           ; if ((HL_PARAMETRY = [prvni]):
                                           ;	if (CLUSTER = ROOT):
                                           ;		HL_PARAMETRY := [dalsi]
                                           ;		ZAZ_REF := 0x0000000.....
                                           ;		goto hledej_hledani
                                           ;	elseif (HL_PARAMETRY != [vracet '..']):
                                           ;		ZAZ_REF := zaznam 1
                                           ;		HL_PARAMETRY := [dalsi]
                                           ;	else
                                           ;		ZAZ_N naplnit daty ze zaznamu 1 // prvni polozkou vsech adresaru krome ROOTu jsou ".."
                                           ;		goto hledej_konec
                                           ;	endif;
                                           ; endif;
                                           
000c95   1dd9     btfss	0x59, 0x3          	btfss HL_PARAMETRY,3			; if ((HL_PARAMETRY = [prvni]):
000c96   2caa     goto	0x4aa               	goto HLEDEJ_NEHLEDAME_PRVNI
000c97   1bd9     btfsc	0x59, 0x7          	btfsc HL_PARAMETRY,7			; 		IF (CLUSTER = ROOT):
000c98   2c9b     goto	0x49b               	goto HLEDEJ_ELSEIF1
000c99   1259     bcf	0x59, 0x4            	bcf HL_PARAMETRY,4
000c9a   2cc0     goto	0x4c0               	goto HLEDEJ_HLEDANI
                                           HLEDEJ_ELSEIF1						; 		elseif (HL_PARAMETRY = [vracet '..']):
000c9b   1ed9     btfss	0x59, 0x5          	btfss HL_PARAMETRY,5
000c9c   2ca2     goto	0x4a2               	goto HLEDEJ_ELSE1
000c9d   3001     movlw	0x1                	movlw .1
000c9e   00e0     movwf	0x60               	movwf ZAZNAM1
000c9f   01e1     clrf	0x61                	clrf ZAZNAM2					; 			ZAZ_REF := zaznam 1
000ca0   1259     bcf	0x59, 0x4            	bcf HL_PARAMETRY,4
000ca1   2caa     goto	0x4aa               	goto HLEDEJ_NEHLEDAME_PRVNI
                                           HLEDEJ_ELSE1
000ca2   3001     movlw	0x1                	movlw .1
000ca3   00e0     movwf	0x60               	movwf ZAZNAM1
000ca4   01e1     clrf	0x61                	clrf ZAZNAM2
000ca5   2361     call	0x361               	call SKOC_NA_ZAZNAM	
000ca6   23e1     call	0x3e1               	call FILE_INFO
000ca7   2514     call	0x514               	call ZAPIS_C_ZAZNAMU
000ca8   2630     call	0x630               	call BUF2_LOW_TO_HIGH
000ca9   2d13     goto	0x513               	goto HLEDEJ_KONEC				;		ENDIF;
                                           HLEDEJ_NEHLEDAME_PRVNI				; ENDIF 
                                           
000caa   1fd9     btfss	0x59, 0x7          	btfss HL_PARAMETRY,7
000cab   2cba     goto	0x4ba               	goto HLEDEJ_IF2_ENDIF
000cac   0861     movf	0x61, w             	movfw ZAZNAM2 
000cad   39ff     andlw	0xff               	andlw h'FF'
000cae   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000caf   2cba     goto	0x4ba               	goto HLEDEJ_IF2_ENDIF
000cb0   0860     movf	0x60, w             	movfw ZAZNAM1
000cb1   39ff     andlw	0xff               	andlw h'FF'
000cb2   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000cb3   2cb7     goto	0x4b7               	goto IF2
000cb4   3c01     sublw	0x1                	sublw .1
000cb5   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000cb6   2cba     goto	0x4ba               	goto HLEDEJ_IF2_ENDIF			; if ((CLUSTER != ROOT) and (ZAZNAM < 2)):
                                           IF2
000cb7   1a59     btfsc	0x59, 0x4          	btfsc HL_PARAMETRY,4			;		if (HL_PARAMETRY = [predchozi]):
000cb8   2d13     goto	0x513               	goto HLEDEJ_KONEC				;		... else:
000cb9   2cc0     goto	0x4c0               	goto HLEDEJ_HLEDANI				;		... endif;
                                           HLEDEJ_IF2_ENDIF					; endif
                                           
000cba   2361     call	0x361               	call SKOC_NA_ZAZNAM		; - pokud ZAZNAM[1-2] ukazuji mimo adresar, vrati v POZICE FFh (jinak 00h)
000cbb   183b     btfsc	0x3b, 0            	btfsc POZICE,0
000cbc   2d13     goto	0x513               	goto HLEDEJ_KONEC	
000cbd   23e1     call	0x3e1               	call FILE_INFO
000cbe   2514     call	0x514               	call ZAPIS_C_ZAZNAMU	
000cbf   25f2     call	0x5f2               	call BUF2_TO_BUF1
                                           
                                           HLEDEJ_HLEDANI	
000cc0   01e0     clrf	0x60                	clrf ZAZNAM1
000cc1   01e1     clrf	0x61                	clrf ZAZNAM2
000cc2   1bd9     btfsc	0x59, 0x7          	btfsc HL_PARAMETRY,7
000cc3   14e0     bsf	0x60, 0x1            	bsf ZAZNAM1,1			; if (!ROOT): ZAZNAM = 2; endif;
000cc4   01de     clrf	0x5e                	clrf ZAZNAMU_vBUFFERU_DISKU
                                           HLEDEJ_REPEAT
000cc5   085a     movf	0x5a, w             	movfw HL_ADR_CL1
000cc6   00bc     movwf	0x3c               	movwf CLUSTER1
000cc7   085b     movf	0x5b, w             	movfw HL_ADR_CL2
000cc8   00bd     movwf	0x3d               	movwf CLUSTER2
000cc9   085c     movf	0x5c, w             	movfw HL_ADR_CL3
000cca   00be     movwf	0x3e               	movwf CLUSTER3
000ccb   085d     movf	0x5d, w             	movfw HL_ADR_CL4
000ccc   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
                                           
000ccd   01bb     clrf	0x3b                	clrf POZICE
000cce   085e     movf	0x5e, w             	movfw ZAZNAMU_vBUFFERU_DISKU
000ccf   39ff     andlw	0xff               	andlw h'FF'
000cd0   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z			; pokud jeste nejake po sobe jdouci zaznamy jsou pripraveny v bufferu disku, tak nemusime volat SKOC_NA_ZAZNAM
000cd1   2361     call	0x361               	call SKOC_NA_ZAZNAM		; - pokud ZAZNAM[1-2] ukazuji mimo adresar, vrati v POZICE FFh (jinak 00h)
000cd2   183b     btfsc	0x3b, 0            	btfsc POZICE,0
000cd3   2cf6     goto	0x4f6               	goto HLEDEJ_END_REPEAT
                                           
000cd4   03de     decf	0x5e, f             	decf ZAZNAMU_vBUFFERU_DISKU,f	; ted jeden zaznam precteme, proto jich bude v bufferu disku o jeden min
000cd5   23e1     call	0x3e1               	call FILE_INFO
000cd6   2514     call	0x514               	call ZAPIS_C_ZAZNAMU
                                           
000cd7   0ae0     incf	0x60, f             	incf ZAZNAM1,f
000cd8   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000cd9   0ae1     incf	0x61, f             	incf ZAZNAM2,f
                                           
000cda   2521     call	0x521               	call VYHOVUJE_ZAZNAM
000cdb   1c36     btfss	0x36, 0            	btfss TEMP1,0
000cdc   2cc5     goto	0x4c5               	goto HLEDEJ_REPEAT
                                           	
                                           ;	movlw .16
                                           ;	movwf TEMP1
                                           ;	PROG_PAGE_0
                                           ;	call ODESLI_BUFFER2			; odesleme si zaznam o souboru	
                                           ;	call DELAY_500ms    
                                           ;	PROG_PAGE_1
                                           
                                           ;	IF     (hledame dalsi zaznam)
                                           ;		IF (ZAZ_A > ZAZ_REF) AND ((ZAZ_A < ZAZ_N) OR (ZAZ_N is empty)):
                                           ;			ZAZ_N := ZAZ_A
                                           ;		ENDIF
                                           ;	ELSEIF (hledame predchozi zaznam)
                                           ;		IF (ZAZ_A < ZAZ_REF) AND (ZAZ_A > ZAZ_N):
                                           ;			ZAZ_N := ZAZ_A
                                           ;		ENDIF
                                           ;	ENDIF
000cdd   2556     call	0x556               	call COMPARE_BUFF1_BUFF2
                                           	; porovna nazvy souboru na zacatku bufferu1 s bufferem2
                                           	; pokud v abecede je driv nazev v bufferu1 da to TEMP1 0x01
                                           	; pokud v abecede je driv nazev v bufferu2 da to TEMP1 0x02
                                           	; pokud se nazvy shoduji da do TEMP1 0x00
000cde   1a59     btfsc	0x59, 0x4          	btfsc HL_PARAMETRY,4		;	IF     (hledame dalsi zaznam)
000cdf   2cef     goto	0x4ef               	goto HLEDEJ_ELSE3
000ce0   1c36     btfss	0x36, 0            	btfss TEMP1,0				;		IF (ZAZ_A > ZAZ_REF)
000ce1   2cf5     goto	0x4f5               	goto HLEDEJ_ENDIF3
                                           
                                           	BANK_2
000ce4   0830     movf	0x30, w             	movfw 0x30
                                           	BANK_0
000ce7   39ff     andlw	0xff               	andlw h'FF'
000ce8   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000ce9   2ced     goto	0x4ed               	goto HLEDEJ_IF4
                                           
000cea   2543     call	0x543               	call COMPARE_BUFF2_L_H
                                           	; porovna nazvy souboru na zacatku bufferu2 a na konci bufferu2
                                           	; pokud v abecede je driv nazev v horni polovine buff2 da to TEMP1 0x01
                                           	; pokud v abecede je driv nazev v dolni polovine buff2 da to TEMP1 0x02
                                           	; pokud se nazvy shoduji da do TEMP1 0x00
000ceb   1cb6     btfss	0x36, 0x1          	btfss TEMP1,1
000cec   2cf5     goto	0x4f5               	goto HLEDEJ_ENDIF3
                                           HLEDEJ_IF4						; 		AND ((ZAZ_A < ZAZ_N) OR (ZAZ_N is empty)):
000ced   2630     call	0x630               	call BUF2_LOW_TO_HIGH		;				ZAZ_N := ZAZ_A
000cee   2cf5     goto	0x4f5               	goto HLEDEJ_ENDIF3			;		ENDIF
                                           HLEDEJ_ELSE3					;	ELSEIF (hledame predchozi zaznam)
000cef   1cb6     btfss	0x36, 0x1          	btfss TEMP1,1				;		IF (ZAZ_A < ZAZ_REF)
000cf0   2cf5     goto	0x4f5               	goto HLEDEJ_ENDIF3
000cf1   2543     call	0x543               	call COMPARE_BUFF2_L_H
000cf2   1c36     btfss	0x36, 0            	btfss TEMP1,0				;		AND (ZAZ_A > ZAZ_N):
000cf3   2cf5     goto	0x4f5               	goto HLEDEJ_ENDIF3
000cf4   2630     call	0x630               	call BUF2_LOW_TO_HIGH		;				ZAZ_N := ZAZ_A
                                           HLEDEJ_ENDIF3					;	ENDIF
                                           	
000cf5   2cc5     goto	0x4c5               	goto HLEDEJ_REPEAT
                                           HLEDEJ_END_REPEAT
                                           
                                           ; if (HL_PARAMETRY = [predchozi]) and (ZAZ_N = 00000) and (!ROOT) and (HL_PARAMETRY = [vracet '..']):
                                           ;	ZAZ_N naplnit daty ze zaznamu 1
                                           ; endif;
000cf6   1e59     btfss	0x59, 0x4          	btfss HL_PARAMETRY,4		; if (HL_PARAMETRY = [predchozi])
000cf7   2d13     goto	0x513               	goto HLEDEJ_KONEC
000cf8   1fd9     btfss	0x59, 0x7          	btfss HL_PARAMETRY,7		; 	and (!ROOT)
000cf9   2d13     goto	0x513               	goto HLEDEJ_KONEC
                                           	BANK_2
000cfc   0830     movf	0x30, w             	movfw 0x30
                                           	BANK_0
000cff   39ff     andlw	0xff               	andlw h'FF'
000d00   1d03     btfss	0x3, 0x2           	btfss STATUS,Z				; 	and (ZAZ_N is empty):
000d01   2d13     goto	0x513               	goto HLEDEJ_KONEC
000d02   1ad9     btfsc	0x59, 0x5          	btfsc HL_PARAMETRY,5		; and (HL_PARAMETRY = [vracet '..'])
000d03   2d13     goto	0x513               	goto HLEDEJ_KONEC
                                           
000d04   085a     movf	0x5a, w             	movfw HL_ADR_CL1
000d05   00bc     movwf	0x3c               	movwf CLUSTER1
000d06   085b     movf	0x5b, w             	movfw HL_ADR_CL2
000d07   00bd     movwf	0x3d               	movwf CLUSTER2
000d08   085c     movf	0x5c, w             	movfw HL_ADR_CL3
000d09   00be     movwf	0x3e               	movwf CLUSTER3
000d0a   085d     movf	0x5d, w             	movfw HL_ADR_CL4
000d0b   00bf     movwf	0x3f               	movwf CLUSTER4
000d0c   3001     movlw	0x1                	movlw .1
000d0d   00e0     movwf	0x60               	movwf ZAZNAM1
000d0e   01e1     clrf	0x61                	clrf ZAZNAM2
000d0f   2361     call	0x361               	call SKOC_NA_ZAZNAM	
000d10   23e1     call	0x3e1               	call FILE_INFO
000d11   2514     call	0x514               	call ZAPIS_C_ZAZNAMU
000d12   2630     call	0x630               	call BUF2_LOW_TO_HIGH
                                           
                                           HLEDEJ_KONEC					; endif;
                                           
000d13   0008     return                   	return
                                           ;**************************************************************************
                                           ZAPIS_C_ZAZNAMU
                                           	; podprogram FILE_INFO nam dava vsechny mozny informace o souboru, krome cisla zaznamu, 
                                           	; proto si toto cislo musime zapsat sami do bufferu2
000d14   0860     movf	0x60, w             	movfw ZAZNAM1
                                           	BANK_2
000d17   00a0     movwf	0x20               	movwf 0x120
                                           	BANK_0
000d1a   0861     movf	0x61, w             	movfw ZAZNAM2
                                           	BANK_2
000d1d   00a1     movwf	0x21               	movwf 0x121
                                           	BANK_0
000d20   0008     return                   	return
                                           ;**************************************************************************
                                           VYHOVUJE_ZAZNAM
                                           	; pokud zaznam ZAZ_A v bufferu2 vyhovuje hledani, nastavi bit TEMP1,0
000d21   01b6     clrf	0x36                	clrf TEMP1
                                           	BANK_2
000d24   0810     movf	0x10, w             	movfw 0x110
                                           	BANK_0
                                           	;		1.     byte -> 	= 00h -> zaznam je prazdny; 
                                           	;						= 01h -> zaznam je adresar; 
                                           	;						= 02h -> zaznam je soubor; 
                                           	;						= 06h -> zaznam je soubor s priponou MP3
000d27   00b7     movwf	0x37               	movwf TEMP2
000d28   39ff     andlw	0xff               	andlw h'FF'
000d29   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d2a   0008     return                   	return				; pokud je zaznam prazdny, tak jej proste neberem
                                           ;HL_PARAMETRY	equ 0x059
                                           ;		0. bit = 0 > pokud hled√°me soubory, tak pouze MP3
                                           ;				 1 > pokud hled√°me soubory, vrac√≠ v≈°echny soubory
                                           ;		1. bit = 0 > hled√°me klasicky (nejd≈ô√≠ve adres√°≈ôe, pot√© soubory
                                           ;				 1 > hled√°me pouze adres√°≈ôe, nebo soubory
                                           ;		2. bit = 0 > je-li nastaven 1. bit, hled√°me pouze adres√°≈ôe
                                           ;				 1 > je-li nastaven 1. bit, hled√°me pouze soubory
000d2b   1cd9     btfss	0x59, 0x1          	btfss HL_PARAMETRY,1
000d2c   2d3a     goto	0x53a               	goto VYHOV_ZAZ_SOUBiADR
000d2d   1d59     btfss	0x59, 0x2          	btfss HL_PARAMETRY,2
000d2e   2d37     goto	0x537               	goto VYHOV_ZAZ_ONLY_ADR
000d2f   1c59     btfss	0x59, 0            	btfss HL_PARAMETRY,0
000d30   2d34     goto	0x534               	goto VYHOV_ZAZ_ONLY_MP3
                                           VYHOV_ZAZ_ALL_FILES
000d31   1c37     btfss	0x37, 0            	btfss TEMP2,0
000d32   1436     bsf	0x36, 0              	bsf TEMP1,0
000d33   0008     return                   	return		
                                           VYHOV_ZAZ_ONLY_MP3
000d34   1937     btfsc	0x37, 0x2          	btfsc TEMP2,2
000d35   1436     bsf	0x36, 0              	bsf TEMP1,0
000d36   0008     return                   	return
                                           VYHOV_ZAZ_ONLY_ADR
000d37   1837     btfsc	0x37, 0            	btfsc TEMP2,0
000d38   1436     bsf	0x36, 0              	bsf TEMP1,0
000d39   0008     return                   	return
                                           VYHOV_ZAZ_SOUBiADR
000d3a   1c59     btfss	0x59, 0            	btfss HL_PARAMETRY,0
000d3b   2d3e     goto	0x53e               	goto VYHOV_ZAZ_SOUBiADR_MP3
000d3c   1436     bsf	0x36, 0              	bsf TEMP1,0
000d3d   0008     return                   	return
                                           VYHOV_ZAZ_SOUBiADR_MP3
000d3e   1837     btfsc	0x37, 0            	btfsc TEMP2,0
000d3f   1436     bsf	0x36, 0              	bsf TEMP1,0
000d40   1937     btfsc	0x37, 0x2          	btfsc TEMP2,2
000d41   1436     bsf	0x36, 0              	bsf TEMP1,0
000d42   0008     return                   	return
                                           ;**************************************************************************
                                           COMPARE_BUFF2_L_H
                                           ; porovna nazvy souboru na zacatku bufferu2 a na konci bufferu2
                                           ; pokud v abecede je driv nazev v horni polovine buff2 da to TEMP1 0x01
                                           ; pokud v abecede je driv nazev v dolni polovine buff2 da to TEMP1 0x02
                                           ; pokud se nazvy shoduji da do TEMP1 0x00
000d43   01b6     clrf	0x36                	clrf TEMP1
                                           	INDF_BANK_2			; stejne jako INDF_BANK_2
                                           	BANK_0
000d47   3010     movlw	0x10               	movlw 0x10
000d48   0084     movwf	0x4                	movwf FSR
000d49   0800     movf	0, w                	movfw INDF
000d4a   3903     andlw	0x3                	andlw h'03'			; ted nerozlisuji mezi souborem mp3 a ostatnimi soubory
000d4b   00b7     movwf	0x37               	movwf TEMP2
                                           
000d4c   3030     movlw	0x30               	movlw 0x30
000d4d   0084     movwf	0x4                	movwf FSR
000d4e   0800     movf	0, w                	movfw INDF
000d4f   3903     andlw	0x3                	andlw h'03'			; ted nerozlisuji mezi souborem mp3 a ostatnimi soubory	
000d50   0237     subwf	0x37, w            	subwf TEMP2,W		; prni byte z bufferu 2 - prvni byte z bufferu 1
                                           
000d51   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d52   2d69     goto	0x569               	goto COMPARE_B1_B2_BYT2		; prvni byt signalizujici typ byl shodny, pokracujeme bytem druhym (prvni byt nazvu)
000d53   1c03     btfss	0x3, 0             	btfss STATUS,C
000d54   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000d55   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           ; tato procedura je temer shodna s tou nasledujici, proto jen zadame jinou hodnotu do FSR
                                           ; (misto pro buffer1 na horni pulku bufferu2) a nechame probehnout stejny kus kodu...
                                           ;**************************************************************************
                                           COMPARE_BUFF1_BUFF2
                                           ; porovna nazvy souboru na zacatku bufferu1 s bufferem2
                                           ; pokud v abecede je driv nazev v bufferu1 da to TEMP1 0x01
                                           ; pokud v abecede je driv nazev v bufferu2 da to TEMP1 0x02
                                           ; pokud se nazvy shoduji da do TEMP1 0x00
                                           
                                           ; zaznamy v obou bufferech vypadaji nasledovne:
                                           ;		1.     byte -> 	= 00h -> zaznam je prazdny; 
                                           ;						= 01h -> zaznam je adresar; 
                                           ;						= 02h -> zaznam je soubor; 
                                           ;						= 06h -> zaznam je soubor s priponou MP3
                                           ;		2..9   byte -> 8 znaku dlouhe jmeno ("DOSovsky" tvar - napr. slouzka "dokumenty" = "DOKUME~1" )
                                           ;		10..12 byte -> u souboru tri znaky pripony (u adresaru vetsinou mezery - 20h 20h 20h)
                                           ;		13..16 byte -> 1. cluster souboru
000d56   01b6     clrf	0x36                	clrf TEMP1
                                           	INDF_BANK_3			; stejne jako INDF_BANK_2
                                           	BANK_0
000d5a   3010     movlw	0x10               	movlw 0x10
000d5b   0084     movwf	0x4                	movwf FSR
000d5c   0800     movf	0, w                	movfw INDF
000d5d   3903     andlw	0x3                	andlw h'03'			; ted nerozlisuji mezi souborem mp3 a ostatnimi soubory
000d5e   00b7     movwf	0x37               	movwf TEMP2
                                           
000d5f   3090     movlw	0x90               	movlw 0x90
000d60   0084     movwf	0x4                	movwf FSR
000d61   0800     movf	0, w                	movfw INDF
000d62   3903     andlw	0x3                	andlw h'03'			; ted nerozlisuji mezi souborem mp3 a ostatnimi soubory	
000d63   0237     subwf	0x37, w            	subwf TEMP2,W		; prni byte z bufferu 2 - prvni byte z bufferu 1
                                           
000d64   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d65   2d69     goto	0x569               	goto COMPARE_B1_B2_BYT2	; prvni byt signalizujici typ byl shodny, pokracujeme bytem druhym (prvni byt nazvu)
000d66   1c03     btfss	0x3, 0             	btfss STATUS,C
000d67   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000d68   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT2
                                           	BANK_2
000d6b   0a84     incf	0x4, f              	incf FSR,F
000d6c   0800     movf	0, w                	movfw INDF
000d6d   0211     subwf	0x11, w            	subwf 0x111,W				; 2. byte z bufferu 2 - 2. byte z bufferu 1
000d6e   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d6f   2d73     goto	0x573               	goto COMPARE_B1_B2_BYT3
000d70   1c03     btfss	0x3, 0             	btfss STATUS,C
000d71   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000d72   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT3
                                           	BANK_2
000d75   0a84     incf	0x4, f              	incf FSR,F
000d76   0800     movf	0, w                	movfw INDF
000d77   0212     subwf	0x12, w            	subwf 0x112,W				; 3. byte z bufferu 2 - 3. byte z bufferu 1
000d78   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d79   2d7d     goto	0x57d               	goto COMPARE_B1_B2_BYT4
000d7a   1c03     btfss	0x3, 0             	btfss STATUS,C
000d7b   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000d7c   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT4
                                           	BANK_2
000d7f   0a84     incf	0x4, f              	incf FSR,F
000d80   0800     movf	0, w                	movfw INDF
000d81   0213     subwf	0x13, w            	subwf 0x113,W				; 4. byte z bufferu 2 - 4. byte z bufferu 1
000d82   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d83   2d87     goto	0x587               	goto COMPARE_B1_B2_BYT5
000d84   1c03     btfss	0x3, 0             	btfss STATUS,C
000d85   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000d86   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT5
                                           	BANK_2
000d89   0a84     incf	0x4, f              	incf FSR,F
000d8a   0800     movf	0, w                	movfw INDF
000d8b   0214     subwf	0x14, w            	subwf 0x114,W				; 5. byte z bufferu 2 - 5. byte z bufferu 1
000d8c   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d8d   2d91     goto	0x591               	goto COMPARE_B1_B2_BYT6
000d8e   1c03     btfss	0x3, 0             	btfss STATUS,C
000d8f   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000d90   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT6
                                           	BANK_2
000d93   0a84     incf	0x4, f              	incf FSR,F
000d94   0800     movf	0, w                	movfw INDF
000d95   0215     subwf	0x15, w            	subwf 0x115,W				; 6. byte z bufferu 2 - 6. byte z bufferu 1
000d96   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000d97   2d9b     goto	0x59b               	goto COMPARE_B1_B2_BYT7
000d98   1c03     btfss	0x3, 0             	btfss STATUS,C
000d99   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000d9a   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT7
                                           	BANK_2
000d9d   0a84     incf	0x4, f              	incf FSR,F
000d9e   0800     movf	0, w                	movfw INDF
000d9f   0216     subwf	0x16, w            	subwf 0x116,W				; 7. byte z bufferu 2 - 7. byte z bufferu 1
000da0   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000da1   2da5     goto	0x5a5               	goto COMPARE_B1_B2_BYT8
000da2   1c03     btfss	0x3, 0             	btfss STATUS,C
000da3   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000da4   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT8
                                           	BANK_2
000da7   0a84     incf	0x4, f              	incf FSR,F
000da8   0800     movf	0, w                	movfw INDF
000da9   0217     subwf	0x17, w            	subwf 0x117,W				; 8. byte z bufferu 2 - 8. byte z bufferu 1
000daa   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000dab   2daf     goto	0x5af               	goto COMPARE_B1_B2_BYT9
000dac   1c03     btfss	0x3, 0             	btfss STATUS,C
000dad   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000dae   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT9
                                           	BANK_2
000db1   0a84     incf	0x4, f              	incf FSR,F
000db2   0800     movf	0, w                	movfw INDF
000db3   0218     subwf	0x18, w            	subwf 0x118,W				; 9. byte z bufferu 2 - 9. byte z bufferu 1
000db4   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000db5   2db9     goto	0x5b9               	goto COMPARE_B1_B2_BYT10
000db6   1c03     btfss	0x3, 0             	btfss STATUS,C
000db7   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000db8   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT10
                                           	BANK_2
000dbb   0a84     incf	0x4, f              	incf FSR,F
000dbc   0800     movf	0, w                	movfw INDF
000dbd   0219     subwf	0x19, w            	subwf 0x119,W				; 10. byte z bufferu 2 - 10. byte z bufferu 1
000dbe   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000dbf   2dc3     goto	0x5c3               	goto COMPARE_B1_B2_BYT11
000dc0   1c03     btfss	0x3, 0             	btfss STATUS,C
000dc1   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000dc2   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT11
                                           	BANK_2
000dc5   0a84     incf	0x4, f              	incf FSR,F
000dc6   0800     movf	0, w                	movfw INDF
000dc7   021a     subwf	0x1a, w            	subwf 0x11A,W				; 11. byte z bufferu 2 - 11. byte z bufferu 1
000dc8   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000dc9   2dcd     goto	0x5cd               	goto COMPARE_B1_B2_BYT12
000dca   1c03     btfss	0x3, 0             	btfss STATUS,C
000dcb   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000dcc   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_BYT12
                                           	BANK_2
000dcf   0a84     incf	0x4, f              	incf FSR,F
000dd0   0800     movf	0, w                	movfw INDF
000dd1   021b     subwf	0x1b, w            	subwf 0x11B,W				; 12. byte z bufferu 2 - 12. byte z bufferu 1
000dd2   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000dd3   2dd7     goto	0x5d7               	goto COMPARE_B1_B2_SHODNE
000dd4   1c03     btfss	0x3, 0             	btfss STATUS,C
000dd5   2de1     goto	0x5e1               	goto COMPARE_B1_B2_BUFF2	; hodnota v bufferu 1 byla vetsi, proto je v abecede dal...
000dd6   2ddc     goto	0x5dc               	goto COMPARE_B1_B2_BUFF1
                                           
                                           COMPARE_B1_B2_SHODNE
                                           	BANK_0
000dd9   3000     movlw	0                  	movlw h'00'
000dda   00b6     movwf	0x36               	movwf TEMP1	
000ddb   0008     return                   	return
                                           COMPARE_B1_B2_BUFF1
                                           	BANK_0
000dde   3001     movlw	0x1                	movlw h'01'
000ddf   00b6     movwf	0x36               	movwf TEMP1	
000de0   0008     return                   	return
                                           COMPARE_B1_B2_BUFF2
                                           	BANK_0
000de3   3002     movlw	0x2                	movlw h'02'
000de4   00b6     movwf	0x36               	movwf TEMP1
000de5   0008     return                   	return
                                           ;**************************************************************************
                                           CLEAR_BUFFER1		; BUFFER1 je 64bytu dat v bance 3 na adrese 0x190 - 0x1CF
                                           					; pouziva TEMP1
000de6   3040     movlw	0x40               	movlw .64
000de7   00b6     movwf	0x36               	movwf TEMP1
                                           	INDF_BANK_3		; neprime adresovani na banku 3
000de9   3090     movlw	0x90               	movlw 0x90
000dea   0084     movwf	0x4                	movwf FSR
000deb   3000     movlw	0                  	movlw .0
                                           
                                           CLEAR_BEFFER1__CLEAR
000dec   0080     movwf	0                  	movwf INDF
000ded   0a84     incf	0x4, f              	incf FSR,F
000dee   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
000def   2dec     goto	0x5ec               	goto CLEAR_BEFFER1__CLEAR
                                           
                                           	INDF_BANK_0		; neprime adresovani na banku 0
000df1   0008     return                   	return
                                           ;**************************************************************************
                                           BUF2_TO_BUF1
                                           	; hodi 18 dat z dolni pulky bufferu 2 do dolni pulky bufferu 1
                                           	; 0x110 -> 0x190
                                           	INDF_BANK_3
                                           	BANK_2
000df5   3090     movlw	0x90               	movlw 0x90
000df6   0084     movwf	0x4                	movwf FSR
                                           
000df7   0810     movf	0x10, w             	movfw 0x110
000df8   0080     movwf	0                  	movwf INDF
000df9   0a84     incf	0x4, f              	incf FSR,F
000dfa   0811     movf	0x11, w             	movfw 0x111
000dfb   0080     movwf	0                  	movwf INDF
000dfc   0a84     incf	0x4, f              	incf FSR,F
000dfd   0812     movf	0x12, w             	movfw 0x112
000dfe   0080     movwf	0                  	movwf INDF
000dff   0a84     incf	0x4, f              	incf FSR,F
000e00   0813     movf	0x13, w             	movfw 0x113
000e01   0080     movwf	0                  	movwf INDF
000e02   0a84     incf	0x4, f              	incf FSR,F
000e03   0814     movf	0x14, w             	movfw 0x114
000e04   0080     movwf	0                  	movwf INDF
000e05   0a84     incf	0x4, f              	incf FSR,F
000e06   0815     movf	0x15, w             	movfw 0x115
000e07   0080     movwf	0                  	movwf INDF
000e08   0a84     incf	0x4, f              	incf FSR,F
000e09   0816     movf	0x16, w             	movfw 0x116
000e0a   0080     movwf	0                  	movwf INDF
000e0b   0a84     incf	0x4, f              	incf FSR,F
000e0c   0817     movf	0x17, w             	movfw 0x117
000e0d   0080     movwf	0                  	movwf INDF
000e0e   0a84     incf	0x4, f              	incf FSR,F
000e0f   0818     movf	0x18, w             	movfw 0x118
000e10   0080     movwf	0                  	movwf INDF
000e11   0a84     incf	0x4, f              	incf FSR,F
000e12   0819     movf	0x19, w             	movfw 0x119
000e13   0080     movwf	0                  	movwf INDF
000e14   0a84     incf	0x4, f              	incf FSR,F
000e15   081a     movf	0x1a, w             	movfw 0x11A
000e16   0080     movwf	0                  	movwf INDF
000e17   0a84     incf	0x4, f              	incf FSR,F
000e18   081b     movf	0x1b, w             	movfw 0x11B
000e19   0080     movwf	0                  	movwf INDF
000e1a   0a84     incf	0x4, f              	incf FSR,F
000e1b   081c     movf	0x1c, w             	movfw 0x11C
000e1c   0080     movwf	0                  	movwf INDF
000e1d   0a84     incf	0x4, f              	incf FSR,F
000e1e   081d     movf	0x1d, w             	movfw 0x11D
000e1f   0080     movwf	0                  	movwf INDF
000e20   0a84     incf	0x4, f              	incf FSR,F
000e21   081e     movf	0x1e, w             	movfw 0x11E
000e22   0080     movwf	0                  	movwf INDF
000e23   0a84     incf	0x4, f              	incf FSR,F
000e24   081f     movf	0x1f, w             	movfw 0x11F
000e25   0080     movwf	0                  	movwf INDF
000e26   0a84     incf	0x4, f              	incf FSR,F
                                           
000e27   0820     movf	0x20, w             	movfw 0x120
000e28   0080     movwf	0                  	movwf INDF
000e29   0a84     incf	0x4, f              	incf FSR,F
000e2a   0821     movf	0x21, w             	movfw 0x121
000e2b   0080     movwf	0                  	movwf INDF
000e2c   0a84     incf	0x4, f              	incf FSR,F
                                           	BANK_0
000e2f   0008     return                   	return
                                           ;**************************************************************************
                                           BUF2_LOW_TO_HIGH
                                           	; hodi 18 dat z dolni pulky bufferu 2 do horni pulky bufferu 2
                                           	; 0x110 - 0x121 -> 0x130 - 0x141
                                           	BANK_2
000e32   0810     movf	0x10, w             	movfw 0x110
000e33   00b0     movwf	0x30               	movwf 0x130
000e34   0811     movf	0x11, w             	movfw 0x111
000e35   00b1     movwf	0x31               	movwf 0x131
000e36   0812     movf	0x12, w             	movfw 0x112
000e37   00b2     movwf	0x32               	movwf 0x132
000e38   0813     movf	0x13, w             	movfw 0x113
000e39   00b3     movwf	0x33               	movwf 0x133
000e3a   0814     movf	0x14, w             	movfw 0x114
000e3b   00b4     movwf	0x34               	movwf 0x134
000e3c   0815     movf	0x15, w             	movfw 0x115
000e3d   00b5     movwf	0x35               	movwf 0x135
000e3e   0816     movf	0x16, w             	movfw 0x116
000e3f   00b6     movwf	0x36               	movwf 0x136
000e40   0817     movf	0x17, w             	movfw 0x117
000e41   00b7     movwf	0x37               	movwf 0x137
000e42   0818     movf	0x18, w             	movfw 0x118
000e43   00b8     movwf	0x38               	movwf 0x138
000e44   0819     movf	0x19, w             	movfw 0x119
000e45   00b9     movwf	0x39               	movwf 0x139
000e46   081a     movf	0x1a, w             	movfw 0x11A
000e47   00ba     movwf	0x3a               	movwf 0x13A
000e48   081b     movf	0x1b, w             	movfw 0x11B
000e49   00bb     movwf	0x3b               	movwf 0x13B
000e4a   081c     movf	0x1c, w             	movfw 0x11C
000e4b   00bc     movwf	0x3c               	movwf 0x13C
000e4c   081d     movf	0x1d, w             	movfw 0x11D
000e4d   00bd     movwf	0x3d               	movwf 0x13D
000e4e   081e     movf	0x1e, w             	movfw 0x11E
000e4f   00be     movwf	0x3e               	movwf 0x13E
000e50   081f     movf	0x1f, w             	movfw 0x11F
000e51   00bf     movwf	0x3f               	movwf 0x13F
                                           
000e52   0820     movf	0x20, w             	movfw 0x120
000e53   00c0     movwf	0x40               	movwf 0x140
000e54   0821     movf	0x21, w             	movfw 0x121
000e55   00c1     movwf	0x41               	movwf 0x141
                                           	BANK_0
000e58   0008     return                   	return
                                           ;**************************************************************************
                                           LONG_NAME
                                           ; Tato procedura prevezme v HL_ADR_CL[1-4] cislo prvniho clusteru adresare a v ZAZNAM[1-2] cislo zaznamu 
                                           ; od kteremu se pokusi najit dlouhe jmeno. Toto dlouhe jmeno umisti do bufferu 2
                                           ; Dlouhe jmeno je ukonceno nulovym bytem. Pokud v bufferu 2 se nulovy byt nevyskytuje, je delka dlouheho
                                           ; jmena delsi ci rovna 65.
                                           ; V POZICE vraci 00h pri nenalezeni dlouheho jmena a 01h pri pravdepodobnem nalezeni dlouheho jmena.
                                           
                                           ; 65 znaku neni moc, neco se tam ale vejde "1-3. G & D - Purify (Gabriel & Dresden Remix) featuring Balligom"   (ingo.mp3)
                                           ; vyvojak:
                                           ;
                                           ; CLEAR_BUFFER2
                                           ;
                                           ; ZAZNAMU_vBUFFERU_DISKU := 0
                                           ; IF (ZAZNAM < 5):					// zaznamy cislujeme od 0, 
                                           ;	HL_PARAMETRY := ZAZNAM;
                                           ;	ZAZNAM := 0
                                           ; else:
                                           ; 	ZAZNAM := ZAZNAM - 5 			// protoze chceme prohledat 5 predchozich
                                           ;	HL_PARAMETRY := 5
                                           ; endif
                                           ;
                                           ; while (HL_PARAMETRY <> 0)
                                           ;	if (ZAZNAMU_vBUFFERU_DISKU = 0):
                                           ;		SKOC_NA_ZAZNAM
                                           ;	endif;
                                           
                                           ;////////////////////
                                           ; if (BUFF1[0] != 0) and (BUFF1[0] != E5h) and (BUFF1[11] = 0Fh):
                                           ;		// v bufferu1 mame zaznam obsahujici dlouhe jmeno 
                                           ;		FSR := (HL_PARAMETRY * 13) + 3
                                           ;		INDF := BUFF1[1]
                                           ;		inc FSR
                                           ;		INDF := BUFF1[3]
                                           ;		inc FSR
                                           ;		...
                                           ; else:
                                           ; 		CLEAR_BUFFER2	// zaznam neobsahuje dlouhe jmeno, proto jsou vsechny predchozi zaznamy k nicemu
                                           ; endif;
                                           ;////////////////////
                                           
                                           ;	HL_PARAMETRY --
                                           ;	ZAZNAM ++
                                           ;	ZAZNAMU_vBUFFERU_DISKU --
                                           ; endwhile
                                           	PROG_PAGE_0
000e5b   23ba     call	0x3ba               	call CLEAR_BUFFER2				; 		CLEAR_BUFFER2	// zaznam neobsahuje dlouhe jmeno, proto jsou vsechny predchozi zaznamy k nicemu
                                           	PROG_PAGE_1
                                           
000e5e   01de     clrf	0x5e                	clrf ZAZNAMU_vBUFFERU_DISKU		; ZAZNAMU_vBUFFERU_DISKU := 0
000e5f   01bb     clrf	0x3b                	clrf POZICE
000e60   0860     movf	0x60, w             	movfw ZAZNAM1
000e61   3c04     sublw	0x4                	sublw .4
000e62   1c03     btfss	0x3, 0             	btfss STATUS,C
000e63   2e6c     goto	0x66c               	goto LONG_NAME_ELSE1
000e64   0861     movf	0x61, w             	movfw ZAZNAM2
000e65   39ff     andlw	0xff               	andlw h'FF'
000e66   1d03     btfss	0x3, 0x2           	btfss STATUS,Z					; IF (ZAZNAM < 5):					// zaznamy cislujeme od 0, 
000e67   2e6c     goto	0x66c               	goto LONG_NAME_ELSE1
                                           
000e68   0860     movf	0x60, w             	movfw ZAZNAM1
000e69   00d9     movwf	0x59               	movwf HL_PARAMETRY				;	HL_PARAMETRY := ZAZNAM;
000e6a   01e0     clrf	0x60                	clrf ZAZNAM1					;	ZAZNAM := 0
000e6b   2e72     goto	0x672               	goto LONG_NAME_ENDIF1
                                           LONG_NAME_ELSE1						; else:
000e6c   3005     movlw	0x5                	movlw .5
000e6d   02e0     subwf	0x60, f            	subwf ZAZNAM1,F					; 	ZAZNAM := ZAZNAM - 5 			// protoze chceme prohledat 5 predchozich
000e6e   1c03     btfss	0x3, 0             	btfss STATUS,C
000e6f   03e1     decf	0x61, f             	decf ZAZNAM2,F
000e70   3005     movlw	0x5                	movlw .5
000e71   00d9     movwf	0x59               	movwf HL_PARAMETRY				;	HL_PARAMETRY := 5
                                           LONG_NAME_ENDIF1					; endif
                                           
                                           LONG_NAME_WHILE						; while (HL_PARAMETRY <> 0)
000e72   0859     movf	0x59, w             	movfw HL_PARAMETRY
000e73   39ff     andlw	0xff               	andlw h'FF'
000e74   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000e75   2edd     goto	0x6dd               	goto LONG_NAME_ENDWHILE
                                           	
000e76   085a     movf	0x5a, w             	movfw HL_ADR_CL1
000e77   00bc     movwf	0x3c               	movwf CLUSTER1
000e78   085b     movf	0x5b, w             	movfw HL_ADR_CL2
000e79   00bd     movwf	0x3d               	movwf CLUSTER2
000e7a   085c     movf	0x5c, w             	movfw HL_ADR_CL3
000e7b   00be     movwf	0x3e               	movwf CLUSTER3
000e7c   085d     movf	0x5d, w             	movfw HL_ADR_CL4
000e7d   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
000e7e   085e     movf	0x5e, w             	movfw ZAZNAMU_vBUFFERU_DISKU
000e7f   39ff     andlw	0xff               	andlw h'FF'
000e80   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z					;	if (ZAZNAMU_vBUFFERU_DISKU = 0):
000e81   2361     call	0x361               	call SKOC_NA_ZAZNAM 			;		SKOC_NA_ZAZNAM	endif;
                                           	
000e82   183b     btfsc	0x3b, 0            	btfsc POZICE,0		; SKOC_NA_ZAZNAM - pokud ZAZNAM[1-2] ukazuji mimo adresar, vrati v POZICE FFh (jinak 00h)
000e83   2ee0     goto	0x6e0               	goto LONG_NAME_MIMO_ROZSAH
                                           
                                           ;////////////////////////////////
                                           ;	//tady probehne cteni zaznamu, zjisteni, zda jde o dlouhe jmeno a jeho cteni;	
000e84   3010     movlw	0x10               	movlw .16
000e85   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
000e88   23ac     call	0x3ac               	call ZAPIS_DO_BUFFERU_1			; kazdy zaznam v adresari ma 32 bytu
                                           	PROG_PAGE_1
                                           
                                           	BANK_3
000e8d   0810     movf	0x10, w             	movfw 0x190
000e8e   39ff     andlw	0xff               	andlw h'FF'
000e8f   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000e90   2ed0     goto	0x6d0               	goto LONG_NAME_ELSE2
000e91   3ce5     sublw	0xe5               	sublw h'E5'
000e92   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000e93   2ed0     goto	0x6d0               	goto LONG_NAME_ELSE2
000e94   081b     movf	0x1b, w             	movfw 0x19B
000e95   3c0f     sublw	0xf                	sublw h'0F'
000e96   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000e97   2ed0     goto	0x6d0               	goto LONG_NAME_ELSE2
                                           LONG_NAME_IF2						; if (BUFF1[0] != 0) and (BUFF1[0] != E5h) and (BUFF1[11] = 0Fh):
                                           	BANK_0							;		// v bufferu1 mame zaznam obsahujici dlouhe jmeno 
000e9a   0859     movf	0x59, w             	movfw HL_PARAMETRY
000e9b   00b6     movwf	0x36               	movwf TEMP1
000e9c   3000     movlw	0                  	movlw .0
                                           LONG_NAME_NASOBENI
000e9d   3e0d     addlw	0xd                	addlw .13
000e9e   0bb6     decfsz	0x36, f           	decfsz TEMP1,f
000e9f   2e9d     goto	0x69d               	goto LONG_NAME_NASOBENI
000ea0   3e03     addlw	0x3                	addlw .3	
000ea1   0084     movwf	0x4                	movwf FSR						;		FSR := (HL_PARAMETRY * 13) + 3
                                           
                                           	BANK_3
                                           	INDF_BANK_2
000ea5   0811     movf	0x11, w             	movfw 0x190+.1
000ea6   0080     movwf	0                  	movwf INDF
000ea7   0a84     incf	0x4, f              	incf FSR,F
000ea8   0813     movf	0x13, w             	movfw 0x190+.3
000ea9   0080     movwf	0                  	movwf INDF
000eaa   0a84     incf	0x4, f              	incf FSR,F
000eab   0815     movf	0x15, w             	movfw 0x190+.5
000eac   0080     movwf	0                  	movwf INDF
000ead   0a84     incf	0x4, f              	incf FSR,F
000eae   0817     movf	0x17, w             	movfw 0x190+.7
000eaf   0080     movwf	0                  	movwf INDF
000eb0   0a84     incf	0x4, f              	incf FSR,F
000eb1   0819     movf	0x19, w             	movfw 0x190+.9
000eb2   0080     movwf	0                  	movwf INDF
000eb3   0a84     incf	0x4, f              	incf FSR,F
000eb4   081e     movf	0x1e, w             	movfw 0x190+.14
000eb5   0080     movwf	0                  	movwf INDF
000eb6   0a84     incf	0x4, f              	incf FSR,F
000eb7   0820     movf	0x20, w             	movfw 0x190+.16
000eb8   0080     movwf	0                  	movwf INDF
000eb9   0a84     incf	0x4, f              	incf FSR,F
000eba   0822     movf	0x22, w             	movfw 0x190+.18
000ebb   0080     movwf	0                  	movwf INDF
000ebc   0a84     incf	0x4, f              	incf FSR,F
000ebd   0824     movf	0x24, w             	movfw 0x190+.20
000ebe   0080     movwf	0                  	movwf INDF
000ebf   0a84     incf	0x4, f              	incf FSR,F
000ec0   0826     movf	0x26, w             	movfw 0x190+.22
000ec1   0080     movwf	0                  	movwf INDF
000ec2   0a84     incf	0x4, f              	incf FSR,F
000ec3   0828     movf	0x28, w             	movfw 0x190+.24
000ec4   0080     movwf	0                  	movwf INDF
000ec5   0a84     incf	0x4, f              	incf FSR,F
000ec6   082c     movf	0x2c, w             	movfw 0x190+.28
000ec7   0080     movwf	0                  	movwf INDF
000ec8   0a84     incf	0x4, f              	incf FSR,F
000ec9   082e     movf	0x2e, w             	movfw 0x190+.30
000eca   0080     movwf	0                  	movwf INDF
000ecb   0a84     incf	0x4, f              	incf FSR,F
                                           	INDF_BANK_0
                                           	BANK_0
000ecf   2ed7     goto	0x6d7               	goto LONG_NAME_ENDIF2
                                           LONG_NAME_ELSE2						; else:
                                           	BANK_0
                                           	PROG_PAGE_0
000ed4   23ba     call	0x3ba               	call CLEAR_BUFFER2				; 		CLEAR_BUFFER2	// zaznam neobsahuje dlouhe jmeno, proto jsou vsechny predchozi zaznamy k nicemu
                                           	PROG_PAGE_1
                                           LONG_NAME_ENDIF2					; endif;
                                           ;////////////////////////////////
                                           
000ed7   0ae0     incf	0x60, f             	incf ZAZNAM1,F
000ed8   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000ed9   0ae1     incf	0x61, f             	incf ZAZNAM2,F					;	ZAZNAM ++
000eda   03d9     decf	0x59, f             	decf HL_PARAMETRY,F				;	HL_PARAMETRY --
000edb   03de     decf	0x5e, f             	decf ZAZNAMU_vBUFFERU_DISKU,F	;	ZAZNAMU_vBUFFERU_DISKU --
000edc   2e72     goto	0x672               	goto LONG_NAME_WHILE
                                           LONG_NAME_ENDWHILE					; endwhile
000edd   3001     movlw	0x1                	movlw .1
000ede   00bb     movwf	0x3b               	movwf POZICE
000edf   0008     return                   	return
                                           LONG_NAME_MIMO_ROZSAH
000ee0   3000     movlw	0                  	movlw .0
000ee1   00bb     movwf	0x3b               	movwf POZICE
000ee2   0008     return                   	return
                                           ;**************************************************************************
                                           HLEDEJ_V_NADRAZENEM
                                           ; v CLUSTER prijme prvni cluster adresare
                                           
                                           ; v nadrazenem adresari se pokusi najit zaznam odkazujici na tento adresar
                                           ; na zacatek BUFFERU 1 da cislo clusteru se zacatkem nadrazeneho adresare, 
                                           ; do HL_ADR_CL da prvni cluster predaneho adresare a v ZAZNAM vratime cislo 
                                           ; zaznamu odkazujici na HL_ADR_CL
000ee3   083c     movf	0x3c, w             	movfw CLUSTER1
000ee4   00da     movwf	0x5a               	movwf HL_ADR_CL1
000ee5   083d     movf	0x3d, w             	movfw CLUSTER2
000ee6   00db     movwf	0x5b               	movwf HL_ADR_CL2
000ee7   083e     movf	0x3e, w             	movfw CLUSTER3
000ee8   00dc     movwf	0x5c               	movwf HL_ADR_CL3
000ee9   083f     movf	0x3f, w             	movfw CLUSTER4
000eea   00dd     movwf	0x5d               	movwf HL_ADR_CL4
                                           
000eeb   01bb     clrf	0x3b                	clrf POZICE
                                           	PROG_PAGE_0
000eee   2488     call	0x488               	call CLUSTER_TO_LBA
000eef   3001     movlw	0x1                	movlw .1
000ef0   00a6     movwf	0x26               	movwf SECTOR_C
000ef1   23e1     call	0x3e1               	call READ_SECTOR	; precteme prvni sektor z prvniho clusteru adresare	
000ef2   301a     movlw	0x1a               	movlw .26			; prvnich 26 slov je ted nepotrebnych
000ef3   00b6     movwf	0x36               	movwf TEMP1
000ef4   23a4     call	0x3a4               	call PRESKOC
                                           
000ef5   2382     call	0x382               	call READ_DATA
000ef6   0820     movf	0x20, w             	movfw DATA_L
000ef7   00be     movwf	0x3e               	movwf CLUSTER3
000ef8   0821     movf	0x21, w             	movfw DATA_H
000ef9   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
000efa   3002     movlw	0x2                	movlw .2			; dalsi 4 byty jsou ted nepotrebne
000efb   00b6     movwf	0x36               	movwf TEMP1
000efc   23a4     call	0x3a4               	call PRESKOC
                                           
000efd   2382     call	0x382               	call READ_DATA
000efe   0820     movf	0x20, w             	movfw DATA_L
000eff   00bc     movwf	0x3c               	movwf CLUSTER1
000f00   0821     movf	0x21, w             	movfw DATA_H
000f01   00bd     movwf	0x3d               	movwf CLUSTER2
                                           	PROG_PAGE_1
                                           
                                           	; v CLUSTER ted mame cislo prvniho clusteru nadrazeneho adresare. Umistime jej na zacatek BUFFERU 1
                                           	INDF_BANK_3
000f05   3090     movlw	0x90               	movlw h'90'
000f06   0084     movwf	0x4                	movwf FSR
000f07   083c     movf	0x3c, w             	movfw CLUSTER1
000f08   0080     movwf	0                  	movwf INDF
000f09   0a84     incf	0x4, f              	incf FSR,f
000f0a   083d     movf	0x3d, w             	movfw CLUSTER2
000f0b   0080     movwf	0                  	movwf INDF
000f0c   0a84     incf	0x4, f              	incf FSR,f
000f0d   083e     movf	0x3e, w             	movfw CLUSTER3
000f0e   0080     movwf	0                  	movwf INDF
000f0f   0a84     incf	0x4, f              	incf FSR,f
000f10   083f     movf	0x3f, w             	movfw CLUSTER4
000f11   0080     movwf	0                  	movwf INDF
000f12   0a84     incf	0x4, f              	incf FSR,f
                                           	
000f13   01e0     clrf	0x60                	clrf ZAZNAM1
000f14   01e1     clrf	0x61                	clrf ZAZNAM2
                                           HLEDEJVNAD_CLUSTER
000f15   01bb     clrf	0x3b                	clrf POZICE
                                           HLEDEJVNAD_SECTOR
                                           	PROG_PAGE_0
000f18   2488     call	0x488               	call CLUSTER_TO_LBA
000f19   3001     movlw	0x1                	movlw .1
000f1a   00a6     movwf	0x26               	movwf SECTOR_C
000f1b   23e1     call	0x3e1               	call READ_SECTOR
                                           	PROG_PAGE_1
                                           
000f1e   3010     movlw	0x10               	movlw .16
000f1f   00b7     movwf	0x37               	movwf TEMP2
                                           HLEDEJVNAD_ZAZNAM
000f20   01b8     clrf	0x38                	clrf TEMP3					; pokud bude zaznam vyhovovat, bude TEMP3 0
                                           	PROG_PAGE_0
000f23   2382     call	0x382               	call READ_DATA
000f24   0820     movf	0x20, w             	movfw DATA_L
000f25   39ff     andlw	0xff               	andlw h'FF'
000f26   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z				; pokud 1. znak jmena souboru = 00h, je zaznam prazdny
000f27   1438     bsf	0x38, 0              	bsf TEMP3,0
                                           
000f28   0820     movf	0x20, w             	movfw DATA_L
000f29   3ce5     sublw	0xe5               	sublw h'E5'
000f2a   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z				; pokud 1. znak jmena souboru = E5h, je zaznam prazdny
000f2b   1438     bsf	0x38, 0              	bsf TEMP3,0
                                           
000f2c   3004     movlw	0x4                	movlw .4
000f2d   00b6     movwf	0x36               	movwf TEMP1
000f2e   23a4     call	0x3a4               	call PRESKOC				; jmeno (8) a priponu (3) ted nepotrebujeme
                                           
000f2f   2382     call	0x382               	call READ_DATA
000f30   0821     movf	0x21, w             	movfw DATA_H
000f31   3910     andlw	0x10               	andlw h'10'
000f32   3c10     sublw	0x10               	sublw h'10'
000f33   1d03     btfss	0x3, 0x2           	btfss STATUS,Z				; if (atributy and 10h) = 10h -> adresar
000f34   1438     bsf	0x38, 0              	bsf TEMP3,0
                                           
000f35   3004     movlw	0x4                	movlw .4
000f36   00b6     movwf	0x36               	movwf TEMP1
000f37   23a4     call	0x3a4               	call PRESKOC				; dalsich 8 bytu je nam k nicemu
                                           
000f38   2382     call	0x382               	call READ_DATA
000f39   0820     movf	0x20, w             	movfw DATA_L
000f3a   025c     subwf	0x5c, w            	subwf HL_ADR_CL3,w
000f3b   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000f3c   1438     bsf	0x38, 0              	bsf TEMP3,0
000f3d   0821     movf	0x21, w             	movfw DATA_H
000f3e   025d     subwf	0x5d, w            	subwf HL_ADR_CL4,w
000f3f   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000f40   1438     bsf	0x38, 0              	bsf TEMP3,0
                                           
000f41   3002     movlw	0x2                	movlw .2					; dalsi 4 byty jsou ted nepotrebne
000f42   00b6     movwf	0x36               	movwf TEMP1
000f43   23a4     call	0x3a4               	call PRESKOC
                                           
000f44   2382     call	0x382               	call READ_DATA
000f45   0820     movf	0x20, w             	movfw DATA_L
000f46   025a     subwf	0x5a, w            	subwf HL_ADR_CL1,w
000f47   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000f48   1438     bsf	0x38, 0              	bsf TEMP3,0
000f49   0821     movf	0x21, w             	movfw DATA_H
000f4a   025b     subwf	0x5b, w            	subwf HL_ADR_CL2,w
000f4b   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000f4c   1438     bsf	0x38, 0              	bsf TEMP3,0
                                           
000f4d   3002     movlw	0x2                	movlw .2					; musime precist i posledni 4 byty ze zaznamu
000f4e   00b6     movwf	0x36               	movwf TEMP1
000f4f   23a4     call	0x3a4               	call PRESKOC
                                           	PROG_PAGE_1
                                           	
000f52   0838     movf	0x38, w             	movfw TEMP3
000f53   39ff     andlw	0xff               	andlw h'FF'
000f54   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000f55   2f69     goto	0x769               	goto HLEDEJVNAD_KONEC		; pokud se cluster shodoval, koncime
                                           
000f56   0ae0     incf	0x60, f             	incf ZAZNAM1,f
000f57   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000f58   0ae1     incf	0x61, f             	incf ZAZNAM2,f				; ZAZNAM ++
                                           
000f59   0bb7     decfsz	0x37, f           	decfsz TEMP2,f
000f5a   2f20     goto	0x720               	goto HLEDEJVNAD_ZAZNAM
                                           
000f5b   0abb     incf	0x3b, f             	incf POZICE,f
000f5c   083b     movf	0x3b, w             	movfw POZICE
000f5d   024c     subwf	0x4c, w            	subwf CLUSTER_SIZE,w
000f5e   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
000f5f   2f16     goto	0x716               	goto HLEDEJVNAD_SECTOR
                                           
                                           	PROG_PAGE_0
000f62   24eb     call	0x4eb               	call NEXT_CLUSTER
                                           	PROG_PAGE_1
000f65   083b     movf	0x3b, w             	movfw POZICE
000f66   39ff     andlw	0xff               	andlw h'FF'
000f67   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
000f68   2f15     goto	0x715               	goto HLEDEJVNAD_CLUSTER
                                           
                                           HLEDEJVNAD_KONEC
000f69   0008     return                   	return
                                           ;**************************************************************************
                                           
                                           
                                            org 0x1000					; PAGE 2
                                           	include "particions.asm"; podprogramy pro analyzu MBR, nacteni a kontrolu FAT oddilu
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           ; podprogramy pro analyzu MBR, nacteni a kontrolu FAT oddilu
                                           ;**********************************************************
                                           ;**********************************************************
                                           ;**********************************************************
                                           
                                           ;**************************************************************************
                                           SCAN_MBR
                                           	; Tato procedura ma na prvni pohled jednoduchy ukol, podiva se do MBR a do BUFFERU 2 hodi nasledujici data:
                                           	; 4 x 16 bytovy zaznam, kde kazdy zaznam reprezentuje jeden oddil se systemem FAT32
                                           	; struktura zaznamu je nasledujici:		1  byt (pokud = 0 tak v zaznamu neni zaznam o oddilu, pokud = FFh , je zaznam o oddilu)
                                           	;										4  byty = adresa kde se nachazi spousteci zaznam oddilu
                                           	;										11 bytu = jmenovka oddilu s FAT32 (neni dulezita, jen aby bylo co vypsat na display :-)
                                           	PROG_PAGE_0
001002   23ba     call	0x3ba               	call CLEAR_BUFFER2
                                           	PROG_PAGE_2
                                           
001005   01a7     clrf	0x27                	clrf LBA1
001006   01a8     clrf	0x28                	clrf LBA2
001007   01a9     clrf	0x29                	clrf LBA3
001008   01aa     clrf	0x2a                	clrf LBA4				; jako prvni cteme MBR
                                           
001009   01bb     clrf	0x3b                	clrf POZICE				; kolik zaznamu o oddilech uz bylo zapsano do bufferu2
                                           SCAN_BR						
                                           	; tady na tom navesti mame zadanou adresu MBR nebo BR nejakeho rozsireneho oddilu
00100a   3001     movlw	0x1                	movlw .1
00100b   00a6     movwf	0x26               	movwf SECTOR_C
                                           	PROG_PAGE_0
00100e   23e1     call	0x3e1               	call READ_SECTOR		; cteme MBR nebo BR rozsireneho oddilu
                                           
00100f   30df     movlw	0xdf               	movlw .223				; 223 slov = 446 bytu
001010   00b6     movwf	0x36               	movwf TEMP1
001011   23a4     call	0x3a4               	call PRESKOC			; na prvnich 446 bytech MBR je zavadeci program systemu (samozrejme, pokud na disku system je)
001012   3020     movlw	0x20               	movlw .32
001013   00b6     movwf	0x36               	movwf TEMP1
001014   23ac     call	0x3ac               	call ZAPIS_DO_BUFFERU_1	; do bufferu si dame vsechny zaznamy BR (16*4=64bytu / 32slov)
001015   3001     movlw	0x1                	movlw .1
001016   00b6     movwf	0x36               	movwf TEMP1
001017   23a4     call	0x3a4               	call PRESKOC
                                           	PROG_PAGE_2
                                           	; tak ted jsme precetli cely MBR/BR a zaznamy o jeho oddilech mame v BEFFERU 1, tak se jdem na ne podivat...
                                           	
                                           	; Nejdriv si ale hodime aktualni LBA adresu do operandu Y pro aritmeticke operace
                                           	INDF_BANK_1				; neprime adresovani na banku 1 (aritmeticke operace)
00101b   30a4     movlw	0xa4               	movlw 0xA4				; FSR na OPERAND_Y
00101c   0084     movwf	0x4                	movwf FSR	
00101d   0827     movf	0x27, w             	movfw LBA1
00101e   0080     movwf	0                  	movwf INDF
00101f   0a84     incf	0x4, f              	incf FSR,F
001020   0828     movf	0x28, w             	movfw LBA2
001021   0080     movwf	0                  	movwf INDF
001022   0a84     incf	0x4, f              	incf FSR,F
001023   0829     movf	0x29, w             	movfw LBA3
001024   0080     movwf	0                  	movwf INDF
001025   0a84     incf	0x4, f              	incf FSR,F
001026   082a     movf	0x2a, w             	movfw LBA4
001027   0080     movwf	0                  	movwf INDF
001028   0a84     incf	0x4, f              	incf FSR,F
                                           
                                           	INDF_BANK_3				; neprime adresovani na banku 3 (buffer 1)	
00102a   3094     movlw	0x94               	movlw 0x94				; 90h (buffer1) + 4 (pozice kde je ulozen identifikator souboroveho systemu prvniho zaznamu BR)
00102b   0084     movwf	0x4                	movwf FSR
00102c   0800     movf	0, w                	movfw INDF
00102d   3c0c     sublw	0xc                	sublw h'0C'				; Pokud se FileSystem <> 0Ch...
00102e   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00102f   3c01     sublw	0x1                	sublw .1				; ...ani 0Bh...
001030   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001031   285b     goto	0x5b                	goto SCAN_MBR__HLEDEJ_ROZSIRENY_ODDIL	; ...tak hledej rozsireny oddil.
                                           
                                           	; pokud jsme v teto casti programu, tak prvni zaznam MBR/BR obsahuje oddil FAT32, s reprezentaci adres stylem LBA
                                           	; Tady pozor, v MBR/BR neni zapsana LBA adresa oddilu, ale relativni vzdalenost (offset) od MBR/BR.
                                           	; To znamena, ze k adrese v (M)BR musime pricist offset oddilu.
                                           	BANK_1
001034   3098     movlw	0x98               	movlw 0x98				; offset prvniho zaznamu 
001035   0084     movwf	0x4                	movwf FSR
001036   0800     movf	0, w                	movfw INDF
001037   00a0     movwf	0x20               	movwf OPERAND_X1
001038   0a84     incf	0x4, f              	incf FSR,F
001039   0800     movf	0, w                	movfw INDF
00103a   00a1     movwf	0x21               	movwf OPERAND_X2
00103b   0a84     incf	0x4, f              	incf FSR,F
00103c   0800     movf	0, w                	movfw INDF
00103d   00a2     movwf	0x22               	movwf OPERAND_X3
00103e   0a84     incf	0x4, f              	incf FSR,F
00103f   0800     movf	0, w                	movfw INDF
001040   00a3     movwf	0x23               	movwf OPERAND_X4
                                           	BANK_0
                                           
                                           	PROG_PAGE_0
001045   2629     call	0x629               	call SOUCET
                                           	PROG_PAGE_2
                                           
                                           	INDF_BANK_1				; neprime adresovani na banku 1 (aritmeticke operace)
001049   30a8     movlw	0xa8               	movlw 0xA8				; FSR na VYSLEDEK
00104a   0084     movwf	0x4                	movwf FSR	
00104b   0800     movf	0, w                	movfw INDF
00104c   00a7     movwf	0x27               	movwf LBA1
00104d   0a84     incf	0x4, f              	incf FSR,F
00104e   0800     movf	0, w                	movfw INDF
00104f   00a8     movwf	0x28               	movwf LBA2
001050   0a84     incf	0x4, f              	incf FSR,F
001051   0800     movf	0, w                	movfw INDF
001052   00a9     movwf	0x29               	movwf LBA3
001053   0a84     incf	0x4, f              	incf FSR,F
001054   0800     movf	0, w                	movfw INDF
001055   00aa     movwf	0x2a               	movwf LBA4
001056   0a84     incf	0x4, f              	incf FSR,F
                                           
001057   208a     call	0x8a                	call ZKONTROLUJ_ODDIL_FAT32	; pokud skutecne adresa v LBA1-4 ukazuje na zacatek oddilu s FAT32, tak da do bufferu2 jmenovku a adresu oddilu
                                           	INDF_BANK_3
001059   30a4     movlw	0xa4               	movlw 0xA4					; 90h (buffer 1) + 16 (velikost 1. zaznamu) + 4 (identifikator souboroveho systemu 2. zaznamu)
00105a   0084     movwf	0x4                	movwf FSR
                                           SCAN_MBR__HLEDEJ_ROZSIRENY_ODDIL		; jdem v zaznamech MBR/BR hledat rozsireny oddil
                                           	; pokud byl v prvnim zaznamu oddil typu FAT32, tak nam  tad FSR ukazuje na FileSystem 2. zaznamu...
                                           	; ...pokud 1. zaznam nebyl typu FAT32, tak nam FSR ukazuje na FileSystem 1. zaznamu.
                                           	; Kazdopadne se ted podivame na dalsi zaznam a pokud obsahuje rozsireny oddil, skocime na jeho adresu a dame goto SCAN_BR ...
00105b   0800     movf	0, w                	movfw INDF
00105c   3c05     sublw	0x5                	sublw h'05'				; Pokud se FileSystem <> 05h (rozsireny oddil CHS)...
00105d   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00105e   3c0a     sublw	0xa                	sublw h'0A'				; ...ani se <> 0Fh (5+A=F) (rozsireny oddil LBA)...
00105f   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001060   2889     goto	0x89                	goto SCAN_MBR__KONEC	; ...tak koncime...
                                           
001061   0804     movf	0x4, w              	movfw FSR				; ...pokud tu ale mame rozsireny oddil,...
001062   3e04     addlw	0x4                	addlw .4				; ...tak se jdem podivat na jeho adresu.
001063   0084     movwf	0x4                	movwf FSR
                                           
                                           	BANK_1
                                           	INDF_BANK_3
001067   0800     movf	0, w                	movfw INDF
001068   00a0     movwf	0x20               	movwf OPERAND_X1
001069   0a84     incf	0x4, f              	incf FSR,F
00106a   0800     movf	0, w                	movfw INDF
00106b   00a1     movwf	0x21               	movwf OPERAND_X2
00106c   0a84     incf	0x4, f              	incf FSR,F
00106d   0800     movf	0, w                	movfw INDF
00106e   00a2     movwf	0x22               	movwf OPERAND_X3
00106f   0a84     incf	0x4, f              	incf FSR,F
001070   0800     movf	0, w                	movfw INDF
001071   00a3     movwf	0x23               	movwf OPERAND_X4
                                           	BANK_0
                                           
                                           	PROG_PAGE_0
001076   2629     call	0x629               	call SOUCET
                                           	PROG_PAGE_2
                                           
                                           	INDF_BANK_1				; neprime adresovani na banku 1 (aritmeticke operace)
00107a   30a8     movlw	0xa8               	movlw 0xA8				; FSR na VYSLEDEK
00107b   0084     movwf	0x4                	movwf FSR	
00107c   0800     movf	0, w                	movfw INDF
00107d   00a7     movwf	0x27               	movwf LBA1
00107e   0a84     incf	0x4, f              	incf FSR,F
00107f   0800     movf	0, w                	movfw INDF
001080   00a8     movwf	0x28               	movwf LBA2
001081   0a84     incf	0x4, f              	incf FSR,F
001082   0800     movf	0, w                	movfw INDF
001083   00a9     movwf	0x29               	movwf LBA3
001084   0a84     incf	0x4, f              	incf FSR,F
001085   0800     movf	0, w                	movfw INDF
001086   00aa     movwf	0x2a               	movwf LBA4
001087   0a84     incf	0x4, f              	incf FSR,F
                                           	
001088   280a     goto	0xa                 	goto SCAN_BR			; S rozirenym oddilem provedeme totez co s MBR
                                           SCAN_MBR__KONEC
001089   0008     return                   	return
                                           ;**************************************************************************
                                           ZKONTROLUJ_ODDIL_FAT32
                                           	; tak ted bychom mely mit v LBA 1-4 adresu spousteciho zaznamu oddilu s FAT32, tak to jdem overit...
                                           	; ...a pokud tam doopravdy spousteci zaznam je, tak dame jmenovku a informace do bufferu 2 na pozici jaka je v rag. POZICE
                                           	INDF_BANK_2
00108b   083b     movf	0x3b, w             	movfw POZICE
00108c   00b6     movwf	0x36               	movwf TEMP1
00108d   1003     bcf	0x3, 0               	bcf STATUS,C
00108e   0db6     rlf	0x36, f              	rlf TEMP1,F
00108f   0db6     rlf	0x36, f              	rlf TEMP1,F
001090   0db6     rlf	0x36, f              	rlf TEMP1,F
001091   0db6     rlf	0x36, f              	rlf TEMP1,F				; TEMP1 := POZICE *16
001092   0836     movf	0x36, w             	movfw TEMP1
001093   3e11     addlw	0x11               	addlw 0x11				; TEMP1 + pozice bufferu 2 + 1 (pozice kam budeme do bufferu 2 davat adresu oddilu)
001094   0084     movwf	0x4                	movwf FSR
                                           
001095   0827     movf	0x27, w             	movfw LBA1
001096   0080     movwf	0                  	movwf INDF
001097   0a84     incf	0x4, f              	incf FSR,F
001098   0828     movf	0x28, w             	movfw LBA2
001099   0080     movwf	0                  	movwf INDF
00109a   0a84     incf	0x4, f              	incf FSR,F
00109b   0829     movf	0x29, w             	movfw LBA3
00109c   0080     movwf	0                  	movwf INDF
00109d   0a84     incf	0x4, f              	incf FSR,F
00109e   082a     movf	0x2a, w             	movfw LBA4
00109f   0080     movwf	0                  	movwf INDF
0010a0   0a84     incf	0x4, f              	incf FSR,F				; adresa oddilu je ulozena do bufferu 2, ted tam jdem davat jmenovku oddilu
                                           
0010a1   3001     movlw	0x1                	movlw .1
0010a2   00a6     movwf	0x26               	movwf SECTOR_C
                                           	PROG_PAGE_0
0010a5   23e1     call	0x3e1               	call READ_SECTOR
0010a6   3023     movlw	0x23               	movlw h'23'
0010a7   00b6     movwf	0x36               	movwf TEMP1
0010a8   23a4     call	0x3a4               	call PRESKOC			; informace o FATce co nas ted zrovna moc nezejimaji
                                           	; na offsetu 47 je ulozena jmenovka oddilu (11znaku), ted jsme na offsetu 46
                                           
0010a9   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
0010ac   0821     movf	0x21, w             	movfw DATA_H
0010ad   0080     movwf	0                  	movwf INDF				; 1. znak ze jmenovky svazku
0010ae   0a84     incf	0x4, f              	incf FSR,F
                                           
0010af   3005     movlw	0x5                	movlw .5				; dalsich 10 bytu je zbytek jmenovky
0010b0   00b6     movwf	0x36               	movwf TEMP1
                                           ZKONTROLUJ_ODDIL_FAT32__JMENOVKA
                                           	PROG_PAGE_0
0010b3   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
0010b6   0820     movf	0x20, w             	movfw DATA_L
0010b7   0080     movwf	0                  	movwf INDF
0010b8   0a84     incf	0x4, f              	incf FSR,F
0010b9   0821     movf	0x21, w             	movfw DATA_H
0010ba   0080     movwf	0                  	movwf INDF
0010bb   0a84     incf	0x4, f              	incf FSR,F
0010bc   0bb6     decfsz	0x36, f           	decfsz TEMP1,F
0010bd   28b1     goto	0xb1                	goto ZKONTROLUJ_ODDIL_FAT32__JMENOVKA
0010be   3010     movlw	0x10               	movlw .16
0010bf   0284     subwf	0x4, f             	subwf FSR,F					; aby fsr ukazoval na priznak o pravdivosti (FSR := FSR - 16)
                                           
                                           	PROG_PAGE_0
0010c2   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
0010c5   0820     movf	0x20, w             	movfw DATA_L
0010c6   3c46     sublw	0x46               	sublw 'F'		
0010c7   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0010c8   28e6     goto	0xe6                	goto ZKONTROLUJ_ODDIL_FAT32__KONEC
0010c9   0821     movf	0x21, w             	movfw DATA_H
0010ca   3c41     sublw	0x41               	sublw 'A'		
0010cb   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0010cc   28e6     goto	0xe6                	goto ZKONTROLUJ_ODDIL_FAT32__KONEC
                                           
                                           	PROG_PAGE_0
0010cf   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
0010d2   0820     movf	0x20, w             	movfw DATA_L
0010d3   3c54     sublw	0x54               	sublw 'T'		
0010d4   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0010d5   28e6     goto	0xe6                	goto ZKONTROLUJ_ODDIL_FAT32__KONEC
0010d6   0821     movf	0x21, w             	movfw DATA_H
0010d7   3c33     sublw	0x33               	sublw '3'		
0010d8   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0010d9   28e6     goto	0xe6                	goto ZKONTROLUJ_ODDIL_FAT32__KONEC
                                           
                                           	PROG_PAGE_0
0010dc   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
0010df   0820     movf	0x20, w             	movfw DATA_L
0010e0   3c32     sublw	0x32               	sublw '2'
0010e1   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0010e2   28e6     goto	0xe6                	goto ZKONTROLUJ_ODDIL_FAT32__KONEC
                                           	; tak, ted uz opravdu vime, ze na tomto sektoru se nachazi spousteci zaznam svazku se souborovym systemem FAT32
                                           
0010e3   30ff     movlw	0xff               	movlw h'FF'
0010e4   0080     movwf	0                  	movwf INDF
0010e5   0abb     incf	0x3b, f             	incf POZICE,F				; sektor skutecne obsahoval spousteci zaznam svazku...
                                           ZKONTROLUJ_ODDIL_FAT32__KONEC
0010e6   0008     return                   	return
                                           ;**************************************************************************
                                           NACTI_FAT32
                                           	; V LBA1-4 bychom meli dostat adresu prvniho sektoru FAT32 oddilu, kde by se mely nalezat informace o fatce
                                           	; pokud je FATka pro nas pouzitelna (Clustery nejsou moc velke, sektor = 512B ...) nastavime bit FAT32_LOAD v ATA_ATTRIBUTES
0010e7   122e     bcf	0x2e, 0x4            	bcf ATA_ATTRIBUTES,FAT32_LOAD
0010e8   01c0     clrf	0x40                	clrf POCATEK_DAT1
0010e9   01c1     clrf	0x41                	clrf POCATEK_DAT2
0010ea   01c2     clrf	0x42                	clrf POCATEK_DAT3
0010eb   01c3     clrf	0x43                	clrf POCATEK_DAT4
0010ec   01c4     clrf	0x44                	clrf POCATEK_FAT1
0010ed   01c5     clrf	0x45                	clrf POCATEK_FAT2
0010ee   01c6     clrf	0x46                	clrf POCATEK_FAT3
0010ef   01c7     clrf	0x47                	clrf POCATEK_FAT4
0010f0   01c8     clrf	0x48                	clrf ROOT_DIR_CL1
0010f1   01c9     clrf	0x49                	clrf ROOT_DIR_CL2
0010f2   01ca     clrf	0x4a                	clrf ROOT_DIR_CL3
0010f3   01cb     clrf	0x4b                	clrf ROOT_DIR_CL4
                                           
0010f4   01a4     clrf	0x24                	clrf FEATURES
0010f5   3001     movlw	0x1                	movlw .1
0010f6   00a6     movwf	0x26               	movwf SECTOR_C
                                           	PROG_PAGE_0
0010f9   23e1     call	0x3e1               	call READ_SECTOR
                                           
0010fa   3005     movlw	0x5                	movlw .5
0010fb   00b6     movwf	0x36               	movwf TEMP1
0010fc   23a4     call	0x3a4               	call PRESKOC
                                           
0010fd   2382     call	0x382               	call READ_DATA				; 10 bytu precteno
                                           	PROG_PAGE_2
001100   0821     movf	0x21, w             	movfw DATA_H				; 11,12 byte - velikost sektoru (tady by melo byt 512, ale co kdyby ne...)
001101   39ff     andlw	0xff               	andlw h'FF'
001102   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001103   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC		; pokud 11 byte neni nula, koncime (velikost sektoru se nerovna 512)
                                           
                                           	PROG_PAGE_0
001106   2382     call	0x382               	call READ_DATA				; ctu 12. a 13. byte
                                           	PROG_PAGE_2
001109   0820     movf	0x20, w             	movfw DATA_L
00110a   3c02     sublw	0x2                	sublw h'02'
00110b   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00110c   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC		; pokud 12 byte neni 2, koncime (velikost sektoru se nerovna 512)
                                           
00110d   0821     movf	0x21, w             	movfw DATA_H				; byte 13. SectorsPerCluster
00110e   00cc     movwf	0x4c               	movwf CLUSTER_SIZE
00110f   3c80     sublw	0x80               	sublw .128				; nas program neumi vic jak 128 (Velikost clusteru = 64KB)
001110   1c03     btfss	0x3, 0             	btfss STATUS,C
001111   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC		; pokud mame clustery vetsi jak 64KB, tak koncime
                                           
                                           	PROG_PAGE_0
001114   2382     call	0x382               	call READ_DATA				; ctu 14. a 15. byte
                                           	PROG_PAGE_2
001117   0820     movf	0x20, w             	movfw DATA_L
001118   00c4     movwf	0x44               	movwf POCATEK_FAT1			; tady se nachazi pocet rezervovanych sektoru, pak k ZACATEK_FAT pricteme adresu zacatku sektoru a mame zacatek fat...
001119   0821     movf	0x21, w             	movfw DATA_H
00111a   00c5     movwf	0x45               	movwf POCATEK_FAT2
                                           	
                                           	PROG_PAGE_0
00111d   2382     call	0x382               	call READ_DATA				; ctu 16. a 17. byte
                                           	PROG_PAGE_2
001120   0820     movf	0x20, w             	movfw DATA_L				; Pocet FAT. byva temer vzdy 2, kdyby ale ne, tak by nam to delalo docela bordel...
001121   3c02     sublw	0x2                	sublw .2
001122   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001123   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC
                                           
001124   3009     movlw	0x9                	movlw .9
001125   00b6     movwf	0x36               	movwf TEMP1
                                           	PROG_PAGE_0
001128   23a4     call	0x3a4               	call PRESKOC				; 18 - 35
                                           
001129   2382     call	0x382               	call READ_DATA				; 36,37 -> velikost FAT (pocet sektoru)
00112a   0820     movf	0x20, w             	movfw DATA_L
00112b   00c0     movwf	0x40               	movwf POCATEK_DAT1
00112c   0821     movf	0x21, w             	movfw DATA_H
00112d   00c1     movwf	0x41               	movwf POCATEK_DAT2	
00112e   2382     call	0x382               	call READ_DATA				; 38,39 -> velikost FAT (pocet sektoru)
00112f   0820     movf	0x20, w             	movfw DATA_L
001130   00c2     movwf	0x42               	movwf POCATEK_DAT3
001131   0821     movf	0x21, w             	movfw DATA_H
001132   00c3     movwf	0x43               	movwf POCATEK_DAT4
                                           
001133   2382     call	0x382               	call READ_DATA				; 40,41
001134   2382     call	0x382               	call READ_DATA				; 42,43
                                           
001135   2382     call	0x382               	call READ_DATA				; 44,45
001136   0820     movf	0x20, w             	movfw DATA_L
001137   00c8     movwf	0x48               	movwf ROOT_DIR_CL1
001138   0821     movf	0x21, w             	movfw DATA_H
001139   00c9     movwf	0x49               	movwf ROOT_DIR_CL2
00113a   2382     call	0x382               	call READ_DATA				; 46,47
00113b   0820     movf	0x20, w             	movfw DATA_L
00113c   00ca     movwf	0x4a               	movwf ROOT_DIR_CL3
00113d   0821     movf	0x21, w             	movfw DATA_H
00113e   00cb     movwf	0x4b               	movwf ROOT_DIR_CL4
                                           
00113f   3011     movlw	0x11               	movlw .17
001140   00b6     movwf	0x36               	movwf TEMP1
001141   23a4     call	0x3a4               	call PRESKOC				; 48 - 81
                                           
                                           	; ted jeste takova mala kontrola...
001142   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
001145   0820     movf	0x20, w             	movfw DATA_L
001146   3c46     sublw	0x46               	sublw 'F'		
001147   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001148   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC
001149   0821     movf	0x21, w             	movfw DATA_H
00114a   3c41     sublw	0x41               	sublw 'A'		
00114b   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00114c   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC
                                           	PROG_PAGE_0
00114f   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
001152   0820     movf	0x20, w             	movfw DATA_L
001153   3c54     sublw	0x54               	sublw 'T'		
001154   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001155   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC
001156   0821     movf	0x21, w             	movfw DATA_H
001157   3c33     sublw	0x33               	sublw '3'		
001158   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001159   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC
                                           	PROG_PAGE_0
00115c   2382     call	0x382               	call READ_DATA
                                           	PROG_PAGE_2
00115f   0820     movf	0x20, w             	movfw DATA_L
001160   3c32     sublw	0x32               	sublw '2'
001161   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001162   29d2     goto	0x1d2               	goto NACTI_FAT32__KONEC
                                           	; tak, ted uz opravdu vime, ze na tomto sektoru se nachazi spousteci zaznam svazku se souborovym systemem FAT32...
                                           	; tak ted jdem vypocitat ty nejdulezitejsi cisla pro praci s FATkou...
                                           
                                           	INDF_BANK_1					; aritmeto/logicke operace
001164   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
001165   0084     movwf	0x4                	movwf FSR
001166   0844     movf	0x44, w             	movfw POCATEK_FAT1
001167   0080     movwf	0                  	movwf INDF
001168   0a84     incf	0x4, f              	incf FSR,F
001169   0845     movf	0x45, w             	movfw POCATEK_FAT2
00116a   0080     movwf	0                  	movwf INDF
00116b   0a84     incf	0x4, f              	incf FSR,F
00116c   0846     movf	0x46, w             	movfw POCATEK_FAT3
00116d   0080     movwf	0                  	movwf INDF
00116e   0a84     incf	0x4, f              	incf FSR,F
00116f   0847     movf	0x47, w             	movfw POCATEK_FAT4
001170   0080     movwf	0                  	movwf INDF
001171   0a84     incf	0x4, f              	incf FSR,F
001172   0827     movf	0x27, w             	movfw LBA1					; OPERAND_Y
001173   0080     movwf	0                  	movwf INDF
001174   0a84     incf	0x4, f              	incf FSR,F
001175   0828     movf	0x28, w             	movfw LBA2
001176   0080     movwf	0                  	movwf INDF
001177   0a84     incf	0x4, f              	incf FSR,F
001178   0829     movf	0x29, w             	movfw LBA3
001179   0080     movwf	0                  	movwf INDF
00117a   0a84     incf	0x4, f              	incf FSR,F
00117b   082a     movf	0x2a, w             	movfw LBA4
00117c   0080     movwf	0                  	movwf INDF
00117d   0a84     incf	0x4, f              	incf FSR,F
                                           	PROG_PAGE_0
001180   2629     call	0x629               	call SOUCET					; pricteme k zacatku oddilu pocet rezervovanych sektoru (obvykle 32) a mame z toho POCATEK_FAT
                                           	PROG_PAGE_2
001183   0800     movf	0, w                	movfw INDF
001184   00c4     movwf	0x44               	movwf POCATEK_FAT1
001185   0a84     incf	0x4, f              	incf FSR,F
001186   0800     movf	0, w                	movfw INDF
001187   00c5     movwf	0x45               	movwf POCATEK_FAT2
001188   0a84     incf	0x4, f              	incf FSR,F
001189   0800     movf	0, w                	movfw INDF
00118a   00c6     movwf	0x46               	movwf POCATEK_FAT3
00118b   0a84     incf	0x4, f              	incf FSR,F
00118c   0800     movf	0, w                	movfw INDF
00118d   00c7     movwf	0x47               	movwf POCATEK_FAT4
00118e   0a84     incf	0x4, f              	incf FSR,F
                                           
                                           	; v POCATEK_DAT ted mame hodnotu "velikost fat", tu vynasobime 2 a pricteme POCATEK_FAT. Tak ziskame POCATEK_DAT
00118f   30a0     movlw	0xa0               	movlw 0xA0					; OPERAND_X
001190   0084     movwf	0x4                	movwf FSR
001191   0840     movf	0x40, w             	movfw POCATEK_DAT1
001192   0080     movwf	0                  	movwf INDF
001193   0a84     incf	0x4, f              	incf FSR,F
001194   0841     movf	0x41, w             	movfw POCATEK_DAT2
001195   0080     movwf	0                  	movwf INDF
001196   0a84     incf	0x4, f              	incf FSR,F
001197   0842     movf	0x42, w             	movfw POCATEK_DAT3
001198   0080     movwf	0                  	movwf INDF
001199   0a84     incf	0x4, f              	incf FSR,F
00119a   0843     movf	0x43, w             	movfw POCATEK_DAT4
00119b   0080     movwf	0                  	movwf INDF
00119c   0a84     incf	0x4, f              	incf FSR,F
                                           	PROG_PAGE_0
00119f   2697     call	0x697               	call POSUNDOLEVA_1			; X := X * 2 -> POCATEK_DAT := 2 * "velikost fat"
                                           								; ted jeste staci pricist POCATEK_FAT
0011a0   0844     movf	0x44, w             	movfw POCATEK_FAT1
0011a1   0080     movwf	0                  	movwf INDF
0011a2   0a84     incf	0x4, f              	incf FSR,F
0011a3   0845     movf	0x45, w             	movfw POCATEK_FAT2
0011a4   0080     movwf	0                  	movwf INDF
0011a5   0a84     incf	0x4, f              	incf FSR,F
0011a6   0846     movf	0x46, w             	movfw POCATEK_FAT3
0011a7   0080     movwf	0                  	movwf INDF
0011a8   0a84     incf	0x4, f              	incf FSR,F
0011a9   0847     movf	0x47, w             	movfw POCATEK_FAT4
0011aa   0080     movwf	0                  	movwf INDF
0011ab   0a84     incf	0x4, f              	incf FSR,F
0011ac   2629     call	0x629               	call SOUCET
                                           	PROG_PAGE_2
                                           
                                           	;   tady je pro me jedna zcela nepochopitelna vlastnost FATky, a to to, ze prvni dva zaznamy (nulty a prvni)
                                           	;   ve FAT tabulce jsou obsazeny nejakyma srotama (identifikator FATky), coz by nebylo to nejhorsi, ale data na disku
                                           	;   zacinaji jiz na nultym clusteru. (POCATEK_DAT) Dochazi tedy k tomu, ze nulty cluster na disku je reprezentovan na druhe
                                           	;   pozici ve fatce a to cislem dve!!! Od udaje ve fatce bychom musime tedy vzdy odecist hodnotu 2
                                           	;   a ziskali bychom skutecnou polohu dat na disku.... (Je to pekne na vyliz!!!!!!!!)
                                           	;   Ja to tady resim tak, ze zacatek dat posunu o 2 clustery niz (POCATEK_DAT := POCATEK_DAT - 2*VELIKOST_CLUSTERU),
                                           	;   aby udaje souhlasily a my nemuseli nic prepocitavat. 
                                           	;   Pak tu nastava jeste jeden problem, ROOT adresar byva adresovan jako by byl na clusteru 0, proto pokazdy kdyz je 
                                           	;   nekde cislo clusteru 0, tak skocime na prvni cluster root adresare. (Vetsinou 2. cluster)
                                           	;   O tomto jevu jsem nikde necetl, ale proste to tak je. Z toho vyplyva, ze zadny soubor nemuze byt na slusteru 1...
                                           	
                                           	; Tak ted mame v POCATEK_DAT = POCATEK_FAT + (velikostFat * 2)
                                           	; a ted jeste musime odecist 2 * velikost_clusteru
                                           
0011af   0d4c     rlf	0x4c, w              	rlf CLUSTER_SIZE,W		; W := CLUSTER_SIZE * 2
                                           	BANK_1
0011b2   00a4     movwf	0x24               	movwf OPERAND_Y1
0011b3   01a5     clrf	0x25                	clrf OPERAND_Y2
0011b4   01a6     clrf	0x26                	clrf OPERAND_Y3
0011b5   01a7     clrf	0x27                	clrf OPERAND_Y4
0011b6   0828     movf	0x28, w             	movfw VYSLEDEK1
0011b7   00a0     movwf	0x20               	movwf OPERAND_X1
0011b8   0829     movf	0x29, w             	movfw VYSLEDEK2
0011b9   00a1     movwf	0x21               	movwf OPERAND_X2
0011ba   082a     movf	0x2a, w             	movfw VYSLEDEK3
0011bb   00a2     movwf	0x22               	movwf OPERAND_X3
0011bc   082b     movf	0x2b, w             	movfw VYSLEDEK4
0011bd   00a3     movwf	0x23               	movwf OPERAND_X4
                                           	BANK_0
                                           	PROG_PAGE_0
0011c2   2655     call	0x655               	call ROZDIL				; VYSLEDEK := POCATEK_FAT + (2 * velikostFat) - (2 * CLUSTER_SIZE)
                                           	PROG_PAGE_2
0011c5   0800     movf	0, w                	movfw INDF
0011c6   00c0     movwf	0x40               	movwf POCATEK_DAT1
0011c7   0a84     incf	0x4, f              	incf FSR,F
0011c8   0800     movf	0, w                	movfw INDF
0011c9   00c1     movwf	0x41               	movwf POCATEK_DAT2
0011ca   0a84     incf	0x4, f              	incf FSR,F
0011cb   0800     movf	0, w                	movfw INDF
0011cc   00c2     movwf	0x42               	movwf POCATEK_DAT3
0011cd   0a84     incf	0x4, f              	incf FSR,F
0011ce   0800     movf	0, w                	movfw INDF
0011cf   00c3     movwf	0x43               	movwf POCATEK_DAT4
0011d0   0a84     incf	0x4, f              	incf FSR,F
                                           	
                                           	; Tak ted uz to konecne mame, muzeme se pustit do prohlizeni adresaru a souboru...
                                           
0011d1   162e     bsf	0x2e, 0x4            	bsf ATA_ATTRIBUTES,FAT32_LOAD	
                                           NACTI_FAT32__KONEC
0011d2   0008     return                   	return	
                                           ;**************************************************************************
                                           
                                           	include "commands2.asm"	; druha cast podprogramu na obsluhu prikazu (od ridiciho procesoru)
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; tady jsou procedury resici jednotlive prikazy
                                           ; Pokud je v zasobniku prikaz pro nejakou proceduru, musi tato procedura nastavit byt STAV_PRIKAZU do 1 (i kdyz treba nema vsechny parametry)
                                           ; Pokud procedura najde svuj prikaz a jsou prijate vsechny parametry, musi odeslat nejakou odpoved po USARTu a smazat reg. PRIJATYCH_DAT!!!
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; CAST 2 
                                           PRIKAZ_03h						; 03h ‚Äì nastav oddil
0011d3   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
0011d4   3c03     sublw	0x3                	sublw h'03'					
0011d5   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0011d6   0008     return                   	return						; nebyl prijat prikaz 03h
0011d7   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 03h, nastavime byt STAV_PRIKAZU
0011d8   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
0011d9   3c04     sublw	0x4                	sublw .4					; pro prikaz 03h museji prijit 5 byty (prikaz + 4byty parametr)
0011da   1803     btfsc	0x3, 0             	btfsc STATUS,C
0011db   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 03h s 4bytovym parametrem (nacti oddily se systemem FAT32)
                                           
                                           	; z√°lohujeme si d≈Øle≈æit√© hodnoty do bufferu 1
                                           	INDF_BANK_3
0011dd   3090     movlw	0x90               	movlw 0x90
0011de   0084     movwf	0x4                	movwf FSR
0011df   0840     movf	0x40, w             	movfw POCATEK_DAT1
0011e0   0080     movwf	0                  	movwf INDF
0011e1   0a84     incf	0x4, f              	incf FSR,f
0011e2   0841     movf	0x41, w             	movfw POCATEK_DAT2
0011e3   0080     movwf	0                  	movwf INDF
0011e4   0a84     incf	0x4, f              	incf FSR,f
0011e5   0842     movf	0x42, w             	movfw POCATEK_DAT3
0011e6   0080     movwf	0                  	movwf INDF
0011e7   0a84     incf	0x4, f              	incf FSR,f
0011e8   0843     movf	0x43, w             	movfw POCATEK_DAT4
0011e9   0080     movwf	0                  	movwf INDF
0011ea   0a84     incf	0x4, f              	incf FSR,f
                                           
0011eb   0844     movf	0x44, w             	movfw POCATEK_FAT1
0011ec   0080     movwf	0                  	movwf INDF
0011ed   0a84     incf	0x4, f              	incf FSR,f
0011ee   0845     movf	0x45, w             	movfw POCATEK_FAT2
0011ef   0080     movwf	0                  	movwf INDF
0011f0   0a84     incf	0x4, f              	incf FSR,f
0011f1   0846     movf	0x46, w             	movfw POCATEK_FAT3
0011f2   0080     movwf	0                  	movwf INDF
0011f3   0a84     incf	0x4, f              	incf FSR,f
0011f4   0847     movf	0x47, w             	movfw POCATEK_FAT4
0011f5   0080     movwf	0                  	movwf INDF
0011f6   0a84     incf	0x4, f              	incf FSR,f
                                           
0011f7   0848     movf	0x48, w             	movfw ROOT_DIR_CL1
0011f8   0080     movwf	0                  	movwf INDF
0011f9   0a84     incf	0x4, f              	incf FSR,f
0011fa   0849     movf	0x49, w             	movfw ROOT_DIR_CL2
0011fb   0080     movwf	0                  	movwf INDF
0011fc   0a84     incf	0x4, f              	incf FSR,f
0011fd   084a     movf	0x4a, w             	movfw ROOT_DIR_CL3
0011fe   0080     movwf	0                  	movwf INDF
0011ff   0a84     incf	0x4, f              	incf FSR,f
001200   084b     movf	0x4b, w             	movfw ROOT_DIR_CL4
001201   0080     movwf	0                  	movwf INDF
001202   0a84     incf	0x4, f              	incf FSR,f
001203   082e     movf	0x2e, w             	movfw ATA_ATTRIBUTES
001204   0080     movwf	0                  	movwf INDF
                                           
001205   0879     movf	0x79, w             	movfw 0x079					; parametrem prikazu 03h ma byt 4bytova adresa zacatku svazku, ktery se ma nacist
001206   00a7     movwf	0x27               	movwf LBA1
001207   087a     movf	0x7a, w             	movfw 0x07A
001208   00a8     movwf	0x28               	movwf LBA2
001209   087b     movf	0x7b, w             	movfw 0x07B
00120a   00a9     movwf	0x29               	movwf LBA3
00120b   087c     movf	0x7c, w             	movfw 0x07C
00120c   00aa     movwf	0x2a               	movwf LBA4
                                           
                                           ;	PROG_PAGE_2
00120d   20e7     call	0xe7                	call NACTI_FAT32			; nacte parametry zvoleneho oddilu
                                           ;	PROG_PAGE_2
                                           
00120e   082e     movf	0x2e, w             	movfw ATA_ATTRIBUTES
                                           	PROG_PAGE_0
001211   229a     call	0x29a               	call WR_USART
001212   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
                                           	PROG_PAGE_2
001215   1e2e     btfss	0x2e, 0x4          	btfss ATA_ATTRIBUTES,FAT32_LOAD
001216   2a8f     goto	0x28f               	goto PRIKAZ_03h_NENACTENO
                                           PRIKAZ_03h_NACTENO
                                           	; ted se podivame, zda pri predchozim spusteni byl take nacten tento oddil, a zda mame po nacteni zacit prehravat
001217   1fee     btfss	0x6e, 0x7          	btfss PREH_STAV0,7				; 7. bit = 1 => po naƒçten√≠ odd√≠lu se zaƒçne p≈ôehr√°vat mp3, kterou se p≈ôi posledn√≠m p≈ôehr√°v√°ni skonƒçilo 
001218   2b08     goto	0x308               	goto PRIKAZ_03h_KONEC_NEHRAJ
                                           	
                                           	; precteme informace o posledni prehrane skladbe a umistime je do buferru 1
                                           	INDF_BANK_3
00121a   3090     movlw	0x90               	movlw 0x90
00121b   0084     movwf	0x4                	movwf FSR
00121c   3004     movlw	0x4                	movlw .4
00121d   00b6     movwf	0x36               	movwf TEMP1
                                           PRIKAZ_03h_LOOP1
00121e   0836     movf	0x36, w             	movfw TEMP1
                                           	BANK_2
001221   008d     movwf	0xd                	movwf EEADR
                                           	BANK_3
001224   140c     bsf	0xc, 0               	bsf EECON1,RD
                                           	BANK_2
001227   080c     movf	0xc, w              	movfw EEDATA
001228   0080     movwf	0                  	movwf INDF
001229   0a84     incf	0x4, f              	incf FSR,f
                                           	BANK_0
00122c   0ab6     incf	0x36, f             	incf TEMP1,f
00122d   0836     movf	0x36, w             	movfw TEMP1
00122e   3c13     sublw	0x13               	sublw .19
00122f   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001230   2a1e     goto	0x21e               	goto PRIKAZ_03h_LOOP1
                                           	
                                           	; podivame se zda posledne nahrany svazek byl shodny s aktualnim
001231   3090     movlw	0x90               	movlw 0x90
001232   0084     movwf	0x4                	movwf FSR
001233   0840     movf	0x40, w             	movfw POCATEK_DAT1
001234   0200     subwf	0, w               	subwf INDF,w
001235   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001236   2ab9     goto	0x2b9               	goto PRIKAZ_03h_PROHLEDEJ_ROOT
001237   0a84     incf	0x4, f              	incf FSR,f
001238   0841     movf	0x41, w             	movfw POCATEK_DAT2
001239   0200     subwf	0, w               	subwf INDF,w
00123a   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00123b   2ab9     goto	0x2b9               	goto PRIKAZ_03h_PROHLEDEJ_ROOT
00123c   0a84     incf	0x4, f              	incf FSR,f
00123d   0842     movf	0x42, w             	movfw POCATEK_DAT3
00123e   0200     subwf	0, w               	subwf INDF,w
00123f   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001240   2ab9     goto	0x2b9               	goto PRIKAZ_03h_PROHLEDEJ_ROOT
001241   0a84     incf	0x4, f              	incf FSR,f
001242   0843     movf	0x43, w             	movfw POCATEK_DAT4
001243   0200     subwf	0, w               	subwf INDF,w
001244   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001245   2ab9     goto	0x2b9               	goto PRIKAZ_03h_PROHLEDEJ_ROOT
001246   0a84     incf	0x4, f              	incf FSR,f
                                           	; mame ten samy oddil, jako pri poslednim prehravani, 
                                           	; proto se podivame, zda tu je ten soubor, ktery hral minule naposled.
                                           	; A pokud ano, nastavime se na jeho konec. Beh programu jiz zaridi, ze bude
                                           	; nalezena dalsi mp3 a nastavena k prehravani.
                                           
001247   0800     movf	0, w                	movfw INDF
001248   00e2     movwf	0x62               	movwf PREH_ADR_CL1
001249   00bc     movwf	0x3c               	movwf CLUSTER1
00124a   0a84     incf	0x4, f              	incf FSR,f
00124b   0800     movf	0, w                	movfw INDF
00124c   00e3     movwf	0x63               	movwf PREH_ADR_CL2
00124d   00bd     movwf	0x3d               	movwf CLUSTER2
00124e   0a84     incf	0x4, f              	incf FSR,f
00124f   0800     movf	0, w                	movfw INDF
001250   00e4     movwf	0x64               	movwf PREH_ADR_CL3
001251   00be     movwf	0x3e               	movwf CLUSTER3
001252   0a84     incf	0x4, f              	incf FSR,f
001253   0800     movf	0, w                	movfw INDF
001254   00e5     movwf	0x65               	movwf PREH_ADR_CL4
001255   00bf     movwf	0x3f               	movwf CLUSTER4
001256   0a84     incf	0x4, f              	incf FSR,f
                                           	PROG_PAGE_1
001259   2327     call	0x327               	call PRVNI_CL_ADRESARE
                                           	; V POZICE vrati 00h, pokud cluster je prvni cluster nejakeho adresare, FFh, pokud neobsahuje adresar
                                           	PROG_PAGE_2
00125c   183b     btfsc	0x3b, 0            	btfsc POZICE,0
00125d   2ab9     goto	0x2b9               	goto PRIKAZ_03h_PROHLEDEJ_ROOT
                                           
                                           
                                           	; adresar se na dotazovanem miste nachazi...
                                           	INDF_BANK_3
00125f   3098     movlw	0x98               	movlw 0x98
001260   0084     movwf	0x4                	movwf FSR
001261   0800     movf	0, w                	movfw INDF
001262   00e0     movwf	0x60               	movwf ZAZNAM1
001263   00e6     movwf	0x66               	movwf PREH_ZAZNAM1
001264   0a84     incf	0x4, f              	incf FSR,f
001265   0800     movf	0, w                	movfw INDF
001266   00e1     movwf	0x61               	movwf ZAZNAM2
001267   00e7     movwf	0x67               	movwf PREH_ZAZNAM2
                                           	PROG_PAGE_1
00126a   2361     call	0x361               	call SKOC_NA_ZAZNAM
                                           	; - pokud ZAZNAM[1-2] ukazuji mimo adresar, vrati v POZICE FFh (jinak 00h)
                                           	PROG_PAGE_2
00126d   183b     btfsc	0x3b, 0            	btfsc POZICE,0
00126e   2ab9     goto	0x2b9               	goto PRIKAZ_03h_PROHLEDEJ_ROOT
                                           	; zaznam se v adresari take nachazi....
                                           
                                           	PROG_PAGE_1
001271   23e1     call	0x3e1               	call FILE_INFO	
                                           	PROG_PAGE_2
                                           	INDF_BANK_2
001275   3010     movlw	0x10               	movlw 0x10
001276   0084     movwf	0x4                	movwf FSR
001277   0800     movf	0, w                	movfw INDF
001278   3c06     sublw	0x6                	sublw h'06' 	; = 06h -> zaznam je soubor s priponou MP3
001279   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00127a   2ab9     goto	0x2b9               	goto PRIKAZ_03h_PROHLEDEJ_ROOT
                                           	; ...dokonce se jedna o soubor mp3, tak se nastavime na jeho konec a hotovo...
                                           
00127b   01d3     clrf	0x53                	clrf PREH_D_FRAGMENT1
00127c   01d4     clrf	0x54                	clrf PREH_D_FRAGMENT2
                                           
                                           	INDF_BANK_3
00127e   309b     movlw	0x9b               	movlw 0x9B
00127f   0084     movwf	0x4                	movwf FSR
001280   0800     movf	0, w                	movfw INDF
001281   00e9     movwf	0x69               	movwf PREH_DATA_CL1
001282   0a84     incf	0x4, f              	incf FSR,f
001283   0800     movf	0, w                	movfw INDF
001284   00ea     movwf	0x6a               	movwf PREH_DATA_CL2
001285   0a84     incf	0x4, f              	incf FSR,f
001286   0800     movf	0, w                	movfw INDF
001287   00eb     movwf	0x6b               	movwf PREH_DATA_CL3
001288   0a84     incf	0x4, f              	incf FSR,f
001289   0800     movf	0, w                	movfw INDF
00128a   00ec     movwf	0x6c               	movwf PREH_DATA_CL4
00128b   0a84     incf	0x4, f              	incf FSR,f
                                           
00128c   084c     movf	0x4c, w             	movfw CLUSTER_SIZE
00128d   00ed     movwf	0x6d               	movwf PREH_DATA_POZICE
                                           	; ted bychom meli byt nastaveni na konec MP3, ktera se prehravala naposled 
                                           	; a automaticky bychom se meli dostat na nasledujici...
                                           
00128e   2ab8     goto	0x2b8               	goto PRIKAZ_03h_KONEC
                                           
                                           PRIKAZ_03h_NENACTENO
                                           	; pokud nebyla FATka √∫spƒõ≈°nƒõ naƒçtena, vr√°t√≠me zpƒõt z√°lohovan√© hodnoty...
                                           	INDF_BANK_3
001290   3090     movlw	0x90               	movlw 0x90
001291   0084     movwf	0x4                	movwf FSR
001292   0800     movf	0, w                	movfw INDF
001293   00c0     movwf	0x40               	movwf POCATEK_DAT1
001294   0a84     incf	0x4, f              	incf FSR,f
001295   0800     movf	0, w                	movfw INDF
001296   00c1     movwf	0x41               	movwf POCATEK_DAT2
001297   0a84     incf	0x4, f              	incf FSR,f
001298   0800     movf	0, w                	movfw INDF
001299   00c2     movwf	0x42               	movwf POCATEK_DAT3
00129a   0a84     incf	0x4, f              	incf FSR,f
00129b   0800     movf	0, w                	movfw INDF
00129c   00c3     movwf	0x43               	movwf POCATEK_DAT4
00129d   0a84     incf	0x4, f              	incf FSR,f
                                           
00129e   0800     movf	0, w                	movfw INDF
00129f   00c4     movwf	0x44               	movwf POCATEK_FAT1
0012a0   0a84     incf	0x4, f              	incf FSR,f
0012a1   0800     movf	0, w                	movfw INDF
0012a2   00c5     movwf	0x45               	movwf POCATEK_FAT2
0012a3   0a84     incf	0x4, f              	incf FSR,f
0012a4   0800     movf	0, w                	movfw INDF
0012a5   00c6     movwf	0x46               	movwf POCATEK_FAT3
0012a6   0a84     incf	0x4, f              	incf FSR,f
0012a7   0800     movf	0, w                	movfw INDF
0012a8   00c7     movwf	0x47               	movwf POCATEK_FAT4
0012a9   0a84     incf	0x4, f              	incf FSR,f
                                           
0012aa   0800     movf	0, w                	movfw INDF
0012ab   00c8     movwf	0x48               	movwf ROOT_DIR_CL1
0012ac   0a84     incf	0x4, f              	incf FSR,f
0012ad   0800     movf	0, w                	movfw INDF
0012ae   00c9     movwf	0x49               	movwf ROOT_DIR_CL2
0012af   0a84     incf	0x4, f              	incf FSR,f
0012b0   0800     movf	0, w                	movfw INDF
0012b1   00ca     movwf	0x4a               	movwf ROOT_DIR_CL3
0012b2   0a84     incf	0x4, f              	incf FSR,f
0012b3   0800     movf	0, w                	movfw INDF
0012b4   00cb     movwf	0x4b               	movwf ROOT_DIR_CL4
0012b5   0a84     incf	0x4, f              	incf FSR,f
0012b6   0800     movf	0, w                	movfw INDF
0012b7   00ae     movwf	0x2e               	movwf ATA_ATTRIBUTES
                                           
                                           PRIKAZ_03h_KONEC
                                           ;	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
0012b8   0008     return                   	return
                                           
                                           PRIKAZ_03h_PROHLEDEJ_ROOT
0012b9   01d3     clrf	0x53                	clrf PREH_D_FRAGMENT1
0012ba   01d4     clrf	0x54                	clrf PREH_D_FRAGMENT2
0012bb   01e2     clrf	0x62                	clrf PREH_ADR_CL1
0012bc   01e3     clrf	0x63                	clrf PREH_ADR_CL2
0012bd   01e4     clrf	0x64                	clrf PREH_ADR_CL3
0012be   01e5     clrf	0x65                	clrf PREH_ADR_CL4
0012bf   01e6     clrf	0x66                	clrf PREH_ZAZNAM1
0012c0   01e7     clrf	0x67                	clrf PREH_ZAZNAM2
0012c1   10ee     bcf	0x6e, 0x1            	bcf PREH_STAV0,1			; neni soubor k prehravani
                                           
                                           ;	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
                                           
0012c2   01da     clrf	0x5a                	clrf HL_ADR_CL1
0012c3   01db     clrf	0x5b                	clrf HL_ADR_CL2
0012c4   01dc     clrf	0x5c                	clrf HL_ADR_CL3
0012c5   01dd     clrf	0x5d                	clrf HL_ADR_CL4				; hledej v ROOT
0012c6   302e     movlw	0x2e               	movlw b'00101110'			; hledej 1. mp3
0012c7   00d9     movwf	0x59               	movwf HL_PARAMETRY
                                           
                                           	PROG_PAGE_1
0012ca   2479     call	0x479               	call HLEDEJ
                                           	PROG_PAGE_2
                                           
                                           	BANK_2
0012cf   0830     movf	0x30, w             	movfw 0x30
                                           	BANK_0
0012d2   3c06     sublw	0x6                	sublw h'06'					; = 06h -> zaznam je soubor s priponou MP3
0012d3   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0012d4   0008     return                   	return
                                           
                                           	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                           	; byla nalezena 1. MP3 v ROOT adresari
                                           	INDF_BANK_2
0012d6   303c     movlw	0x3c               	movlw 0x3C
0012d7   0084     movwf	0x4                	movwf FSR
                                           
0012d8   0800     movf	0, w                	movfw INDF
0012d9   00e9     movwf	0x69               	movwf PREH_DATA_CL1
0012da   00bc     movwf	0x3c               	movwf CLUSTER1
0012db   0a84     incf	0x4, f              	incf FSR,f
0012dc   0800     movf	0, w                	movfw INDF
0012dd   00ea     movwf	0x6a               	movwf PREH_DATA_CL2
0012de   00bd     movwf	0x3d               	movwf CLUSTER2
0012df   0a84     incf	0x4, f              	incf FSR,f
0012e0   0800     movf	0, w                	movfw INDF
0012e1   00eb     movwf	0x6b               	movwf PREH_DATA_CL3
0012e2   00be     movwf	0x3e               	movwf CLUSTER3
0012e3   0a84     incf	0x4, f              	incf FSR,f
0012e4   0800     movf	0, w                	movfw INDF
0012e5   00ec     movwf	0x6c               	movwf PREH_DATA_CL4
0012e6   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
0012e7   0a84     incf	0x4, f              	incf FSR,f
0012e8   0800     movf	0, w                	movfw INDF
0012e9   00e6     movwf	0x66               	movwf PREH_ZAZNAM1
0012ea   0a84     incf	0x4, f              	incf FSR,f
0012eb   0800     movf	0, w                	movfw INDF
0012ec   00e7     movwf	0x67               	movwf PREH_ZAZNAM2
                                           
                                           	PROG_PAGE_0
0012ef   2573     call	0x573               	call ZJISTI_FRAGMENT
                                           	PROG_PAGE_2
0012f2   0851     movf	0x51, w             	movfw FRAGMENT1
0012f3   00d3     movwf	0x53               	movwf PREH_D_FRAGMENT1
0012f4   0852     movf	0x52, w             	movfw FRAGMENT2
0012f5   00d4     movwf	0x54               	movwf PREH_D_FRAGMENT2
                                           	; aktualni prehravany soubor i prehravana slozka byly nastaveny...
                                           
0012f6   01ed     clrf	0x6d                	clrf PREH_DATA_POZICE
0012f7   146e     bsf	0x6e, 0              	bsf PREH_STAV0,0			; je zvoleno play
0012f8   14ee     bsf	0x6e, 0x1            	bsf PREH_STAV0,1			; je co prehravat
0012f9   156e     bsf	0x6e, 0x2            	bsf PREH_STAV0,2			; byl automaticky zmenen prehravany soubor
                                           
0012fa   10cd     bcf	0x4d, 0x1            	bcf VSREG_MODE_L,1			; prehravame normalni rychlosti 
0012fb   106f     bcf	0x6f, 0              	bcf PREH_STAV1,0			; prehravame normalni rychlosti 
                                           
                                           	PROG_PAGE_1	
0012fe   204d     call	0x4d                	call VS_SOFT_RESET
                                           
0012ff   3000     movlw	0                  	movlw VSADDR_MODE
001300   00b6     movwf	0x36               	movwf TEMP1
001301   084d     movf	0x4d, w             	movfw VSREG_MODE_L
001302   00b7     movwf	0x37               	movwf TEMP2
001303   01b8     clrf	0x38                	clrf TEMP3
001304   201c     call	0x1c                	call VS_WR_REG
                                           	PROG_PAGE_2
                                           
001307   0008     return                   	return
                                           PRIKAZ_03h_KONEC_NEHRAJ
001308   01d3     clrf	0x53                	clrf PREH_D_FRAGMENT1
001309   01d4     clrf	0x54                	clrf PREH_D_FRAGMENT2
00130a   01e2     clrf	0x62                	clrf PREH_ADR_CL1
00130b   01e3     clrf	0x63                	clrf PREH_ADR_CL2
00130c   01e4     clrf	0x64                	clrf PREH_ADR_CL3
00130d   01e5     clrf	0x65                	clrf PREH_ADR_CL4
00130e   01e6     clrf	0x66                	clrf PREH_ZAZNAM1
00130f   01e7     clrf	0x67                	clrf PREH_ZAZNAM2
001310   10ee     bcf	0x6e, 0x1            	bcf PREH_STAV0,1			; neni soubor k prehravani
                                           
                                           ;	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
001311   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_0Bh						; 0Bh ‚Äì zjisti velikost fragmentu
001312   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
001313   3c0b     sublw	0xb                	sublw h'0b'					
001314   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001315   0008     return                   	return						; nebyl prijat prikaz 0Bh
001316   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 0Bh, nastavime byt STAV_PRIKAZU
001317   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
001318   3c04     sublw	0x4                	sublw .4					; pro prikaz 0Bh museji prijit 5 bytu (prikaz + 4byty parametr)
001319   1803     btfsc	0x3, 0             	btfsc STATUS,C
00131a   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 0Bh s 4bytovym parametrem 
                                           
00131b   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru
00131c   00bc     movwf	0x3c               	movwf CLUSTER1
00131d   087a     movf	0x7a, w             	movfw 0x07A
00131e   00bd     movwf	0x3d               	movwf CLUSTER2
00131f   087b     movf	0x7b, w             	movfw 0x07B
001320   00be     movwf	0x3e               	movwf CLUSTER3
001321   087c     movf	0x7c, w             	movfw 0x07C
001322   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
                                           	PROG_PAGE_0
001325   2573     call	0x573               	call ZJISTI_FRAGMENT
                                           	PROG_PAGE_2
                                           ; v CLUSTER[1-4] prijme cislo clusteru a do FRAGMENT[1-2] umisti kolik clusteru 
                                           ; po tomto clusteru nasledujich tvori jeden fragment
                                           ; (pokud je retezec tvoren pouze z tohoto clusteru, je vraceno cislo 0)
                                           
                                           ; Pokud soucasny cluster je prazdny (coz by se stat nemelo) vrati v POZICE FFh
                                           ; Jinak, pokud s vse povede, dame do POZICE 0
                                           
                                           ; ! PODPROGRAM NENI POUZITELNY PRO CLUSTER 0 (prvni cluster ROOT adresare)
                                           ; ! PODPROGRAM NETESTUJE ZDA NEBYLO ZADANO VETSI CISLO NEZ JE POCET CLUSTERU !!!
                                           	
                                           	PROG_PAGE_0
00132a   083b     movf	0x3b, w             	movfw POZICE 
00132b   229a     call	0x29a               	call WR_USART
00132c   0851     movf	0x51, w             	movfw FRAGMENT1
00132d   229a     call	0x29a               	call WR_USART
00132e   0852     movf	0x52, w             	movfw FRAGMENT2
00132f   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
                                           	
001332   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
001333   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_0Ch						; 0Ch ‚Äì najdi z√°znam o tomto adres√°≈ôi v nad≈ôazen√©m adres√°≈ôi
001334   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
001335   3c0c     sublw	0xc                	sublw h'0C'					
001336   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001337   0008     return                   	return						; nebyl prijat prikaz 0Ch
001338   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 0Ch, nastavime byt STAV_PRIKAZU
001339   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
00133a   3c04     sublw	0x4                	sublw .4					; pro prikaz 0Ch museji prijit 5 bytu (prikaz + 4byty parametr)
00133b   1803     btfsc	0x3, 0             	btfsc STATUS,C
00133c   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 0Ch s 4bytovym parametrem 
                                           
00133d   0879     movf	0x79, w             	movfw 0x079					; nejnizsi cast clusteru
00133e   00bc     movwf	0x3c               	movwf CLUSTER1
00133f   087a     movf	0x7a, w             	movfw 0x07A
001340   00bd     movwf	0x3d               	movwf CLUSTER2
001341   087b     movf	0x7b, w             	movfw 0x07B
001342   00be     movwf	0x3e               	movwf CLUSTER3
001343   087c     movf	0x7c, w             	movfw 0x07C
001344   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
001345   083c     movf	0x3c, w             	movfw CLUSTER1
001346   043d     iorwf	0x3d, w            	iorwf CLUSTER2,W
001347   043e     iorwf	0x3e, w            	iorwf CLUSTER3,W
001348   043f     iorwf	0x3f, w            	iorwf CLUSTER4,W
001349   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
00134a   2b5d     goto	0x35d               	goto PRIKAZ_0Ch_JEROOT		; pokud CLUSTER[1-4]=0, tak se jedna o 1. cluster ROOT adr., proto nemusime dale resit co tam je...
                                           
                                           	PROG_PAGE_1
00134d   2327     call	0x327               	call PRVNI_CL_ADRESARE		; V POZICE vrati 00h, pokud cluster je prvni cluster nejakeho adresare, FFh, pokud neobsahuje adresar
                                           	PROG_PAGE_2
001350   083b     movf	0x3b, w             	movfw POZICE
001351   39ff     andlw	0xff               	andlw h'FF'
001352   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001353   2b5b     goto	0x35b               	goto PRIKAZ_0Ch_NENI_ZACATEK_ADR	
                                           
                                           	PROG_PAGE_1
001356   26e3     call	0x6e3               	call HLEDEJ_V_NADRAZENEM
                                           	PROG_PAGE_2
                                           
001359   3000     movlw	0                  	movlw h'00'
00135a   2b5e     goto	0x35e               	goto PRIKAZ_0Ch_ODESLI
                                           PRIKAZ_0Ch_NENI_ZACATEK_ADR
00135b   3081     movlw	0x81               	movlw h'81'
00135c   2b5e     goto	0x35e               	goto PRIKAZ_0Ch_ODESLI
                                           PRIKAZ_0Ch_JEROOT
00135d   3001     movlw	0x1                	movlw h'01'
                                           PRIKAZ_0Ch_ODESLI
                                           
                                           	PROG_PAGE_0
001360   229a     call	0x29a               	call WR_USART
                                           
                                           	INDF_BANK_3
001362   3090     movlw	0x90               	movlw h'90'
001363   0084     movwf	0x4                	movwf FSR
                                           
001364   0800     movf	0, w                	movfw INDF
001365   229a     call	0x29a               	call WR_USART
001366   0a84     incf	0x4, f              	incf FSR,f
001367   0800     movf	0, w                	movfw INDF
001368   229a     call	0x29a               	call WR_USART
001369   0a84     incf	0x4, f              	incf FSR,f
00136a   0800     movf	0, w                	movfw INDF
00136b   229a     call	0x29a               	call WR_USART
00136c   0a84     incf	0x4, f              	incf FSR,f
00136d   0800     movf	0, w                	movfw INDF
00136e   229a     call	0x29a               	call WR_USART
00136f   0a84     incf	0x4, f              	incf FSR,f
                                           
001370   0860     movf	0x60, w             	movfw ZAZNAM1
001371   229a     call	0x29a               	call WR_USART
001372   0861     movf	0x61, w             	movfw ZAZNAM2
001373   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
                                           	
001376   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik prikazu
001377   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_0Dh						; 0Dh ‚Äì nastav dobu, po ktere se disk prepne do STANDBY
001378   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
001379   3c0d     sublw	0xd                	sublw h'0D'					
00137a   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00137b   0008     return                   	return						; nebyl prijat prikaz 0Dh
00137c   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 0Dh, nastavime byt STAV_PRIKAZU
00137d   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
00137e   3c02     sublw	0x2                	sublw .2					; pro prikaz 0Ch museji prijit 3 bytu (prikaz + 2byty parametr)
00137f   1803     btfsc	0x3, 0             	btfsc STATUS,C
001380   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 0Dh s 2bytovym parametrem 
                                           
001381   0879     movf	0x79, w             	movfw 0x079
001382   047a     iorwf	0x7a, w            	iorwf 0x07A,w
001383   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
001384   2b8c     goto	0x38c               	goto PRIKAZ_0Dh_OKAMZITE
                                           
001385   0879     movf	0x79, w             	movfw 0x079					; 2. byte zasobniku prikazu		
001386   00d7     movwf	0x57               	movwf KONST_NECINNOSTI1
001387   00d5     movwf	0x55               	movwf CITAC_NECINNOSTI1
001388   087a     movf	0x7a, w             	movfw 0x07A					; 3. byte zasobniku prikazu		
001389   00d8     movwf	0x58               	movwf KONST_NECINNOSTI2
00138a   00d6     movwf	0x56               	movwf CITAC_NECINNOSTI2		; disk je vypinan po urcite dobe necinosti
                                           
00138b   2b8e     goto	0x38e               	goto PRIKAZ_0Dh_KONEC
                                           PRIKAZ_0Dh_OKAMZITE
00138c   01d5     clrf	0x55                	clrf CITAC_NECINNOSTI1
00138d   01d6     clrf	0x56                	clrf CITAC_NECINNOSTI2
                                           
                                           PRIKAZ_0Dh_KONEC
                                           
                                           	PROG_PAGE_0
001390   30ff     movlw	0xff               	movlw h'ff'
001391   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
                                           
001394   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
001395   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_85h						; 85h ‚Äì nastav p≈ôedvolen√Ω ‚Äûekvaliz√©r‚Äú
001396   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
001397   3c85     sublw	0x85               	sublw h'85'					
001398   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001399   0008     return                   	return						; nebyl prijat prikaz 0Dh
00139a   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 0Dh, nastavime byt STAV_PRIKAZU
00139b   0873     movf	0x73, w             	movfw PRIJATYCH_DAT
00139c   3c01     sublw	0x1                	sublw .1					; pro prikaz 85h museji prijit 2 byty (prikaz + 1byt parametr)
00139d   1803     btfsc	0x3, 0             	btfsc STATUS,C
00139e   0008     return                   	return						; jeste nemame vsechny parametry
                                           	; Prisel prikaz 85h s 1 bytem parametru
                                           
00139f   0879     movf	0x79, w             	movfw 0x079
0013a0   39ff     andlw	0xff               	andlw h'FF'
0013a1   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
0013a2   2bd8     goto	0x3d8               	goto PRIKAZ_85h_VYPNI
                                           
0013a3   0879     movf	0x79, w             	movfw 0x079	
0013a4   3c0c     sublw	0xc                	sublw .12
0013a5   1c03     btfss	0x3, 0             	btfss STATUS,C
0013a6   2bd1     goto	0x3d1               	goto PRIKAZ_85h_SPATNY_PARAMETR
                                           
0013a7   0879     movf	0x79, w             	movfw 0x079	
0013a8   00af     movwf	0x2f               	movwf VS_LOUDNESS
                                           
0013a9   300a     movlw	0xa                	movlw VSADDR_AIADDR
0013aa   00b6     movwf	0x36               	movwf TEMP1
0013ab   3000     movlw	0                  	movlw 0x00
0013ac   00b7     movwf	0x37               	movwf TEMP2	
0013ad   3042     movlw	0x42               	movlw 0x42
0013ae   00b8     movwf	0x38               	movwf TEMP3
                                           	PROG_PAGE_1	
0013b1   201c     call	0x1c                	call VS_WR_REG				; nastavime zacatek uzivatelskeho programu (0x4200)
                                           	PROG_PAGE_2
                                           
0013b4   300d     movlw	0xd                	movlw VSADDR_AICTRL0
0013b5   00b6     movwf	0x36               	movwf TEMP1
0013b6   3000     movlw	0                  	movlw 0x00
0013b7   00b7     movwf	0x37               	movwf TEMP2	
0013b8   3000     movlw	0                  	movlw 0x00
0013b9   00b8     movwf	0x38               	movwf TEMP3
                                           	PROG_PAGE_1	
0013bc   201c     call	0x1c                	call VS_WR_REG				; resetujeme plugin
                                           	PROG_PAGE_2
                                           
0013bf   300d     movlw	0xd                	movlw VSADDR_AICTRL0
0013c0   00b6     movwf	0x36               	movwf TEMP1
0013c1   082f     movf	0x2f, w             	movfw VS_LOUDNESS
0013c2   00b7     movwf	0x37               	movwf TEMP2	
0013c3   3000     movlw	0                  	movlw 0x00
0013c4   00b8     movwf	0x38               	movwf TEMP3
                                           	PROG_PAGE_1	
0013c7   201c     call	0x1c                	call VS_WR_REG				; nastavime pozadovany filter
                                           	PROG_PAGE_2
                                           
                                           	PROG_PAGE_0
0013cc   30ff     movlw	0xff               	movlw h'ff'
0013cd   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
0013d0   2bf1     goto	0x3f1               	goto PRIKAZ_85h_KONEC
                                           
                                           PRIKAZ_85h_SPATNY_PARAMETR
                                           	PROG_PAGE_0
0013d3   3000     movlw	0                  	movlw h'00'
0013d4   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
0013d7   2bf1     goto	0x3f1               	goto PRIKAZ_85h_KONEC
                                           
                                           PRIKAZ_85h_VYPNI
0013d8   01af     clrf	0x2f                	clrf VS_LOUDNESS
                                           
0013d9   300d     movlw	0xd                	movlw VSADDR_AICTRL0
0013da   00b6     movwf	0x36               	movwf TEMP1
0013db   3000     movlw	0                  	movlw 0x00
0013dc   00b7     movwf	0x37               	movwf TEMP2	
0013dd   3000     movlw	0                  	movlw 0x00
0013de   00b8     movwf	0x38               	movwf TEMP3
                                           	PROG_PAGE_1	
0013e1   201c     call	0x1c                	call VS_WR_REG				; resetujeme plugin
                                           	PROG_PAGE_2
                                           
0013e4   300a     movlw	0xa                	movlw VSADDR_AIADDR
0013e5   00b6     movwf	0x36               	movwf TEMP1
0013e6   01b7     clrf	0x37                	clrf TEMP2	
0013e7   01b8     clrf	0x38                	clrf TEMP3
                                           	PROG_PAGE_1	
0013ea   201c     call	0x1c                	call VS_WR_REG				; vypneme plugin
                                           
                                           	PROG_PAGE_0
0013ed   30ff     movlw	0xff               	movlw h'ff'
0013ee   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
                                           PRIKAZ_85h_KONEC
0013f1   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
0013f2   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_86h						; 86h ‚Äì vra≈• nastavenou hlasitost
0013f3   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
0013f4   3c86     sublw	0x86               	sublw h'86'
0013f5   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
0013f6   0008     return                   	return						; nebyl prijat prikaz 86h
0013f7   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 86h, nastavime byt STAV_PRIKAZU
                                           	; pro prikaz 04h nejsou definovany zadne parametry, proto jiz nic jineho netestujeme
                                           
                                           	PROG_PAGE_0
0013fa   0850     movf	0x50, w             	movfw VSREG_VOL_H			; hlasitost pro levy kanal
0013fb   229a     call	0x29a               	call WR_USART	
0013fc   084f     movf	0x4f, w             	movfw VSREG_VOL_L			; hlasitost pro pravy kanal
0013fd   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
001400   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
001401   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           PRIKAZ_87h						; 87h ‚Äì ulo≈æ nastaven√≠ p≈ôehr√°v√°n√≠ do EEPROM
001402   0878     movf	0x78, w             	movfw 0x078					; prvni byte zasobniku prikazu
001403   3c87     sublw	0x87               	sublw h'87'
001404   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001405   0008     return                   	return						; nebyl prijat prikaz 87h
001406   1475     bsf	0x75, 0              	bsf STAV_PRIKAZU,0			; mame tu prikaz 87h, nastavime byt STAV_PRIKAZU
                                           	; pro prikaz 87h nejsou definovany zadne parametry, proto jiz nic jineho netestujeme
                                           
                                           	PROG_PAGE_0
001409   224c     call	0x24c               	call ULOZ_KONFIGUTACI
                                           	
00140a   30ff     movlw	0xff               	movlw h'FF'					; pro prikaz je vzdy odpoved FFh
00140b   229a     call	0x29a               	call WR_USART
                                           	PROG_PAGE_2
                                           	
00140e   01f3     clrf	0x73                	clrf PRIJATYCH_DAT			; vyprazdnime zasobnik
00140f   0008     return                   	return
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           	include "subdirectory.asm"; podpora podadresaru pri prehravani
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           ; Tady ta ƒç√°st k√≥du m√° jeden jedin√Ω smysl. A to aby nalezla dal≈°√≠ adres√°≈ô, kter√Ω se m√° p≈ôehr√°vat pokud v aktu√°ln√≠m 
                                           ; adres√°≈ôi ji≈æ nen√≠ ≈æ√°dn√° MP3, kter√° nebyla p≈ôehr√°na. 
                                           ; 
                                           ; m√°me-li n√°sleduj√≠c√≠ adres√°≈ôovou strukruru:
                                           ; ROOT
                                           ;  | skladba_01.mp3
                                           ;  | skladba_02.mp3
                                           ;  +- DIRECTORY_1
                                           ;  |  | skladba_03.mp3
                                           ;  |  | skladba_04.mp3
                                           ;  |  +- DIRECTORY_1_1
                                           ;  |     | skladba_05.mp3
                                           ;  |
                                           ;  +- DIRECTORY_2
                                           ;     | skladba_06.mp3
                                           ;
                                           ; Tak sou mp3 p≈ôehr√°vany v po≈ôad√≠, jak je zobrazeno. Nejd≈ô√≠ve v≈°echny mp3 v ROOT (skladba_01,02) pot√© DIRECTORY_1...
                                           ; XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
                                           
                                           ; function  HLEDEJ_ADRESAR(){
                                           ;  if (PREH_ADR_CL == ROOT){
                                           ;	HL_PARAMETRY = [hledej 1. adresar]
                                           ;  }else{
                                           ;	HL_PARAMETRY = [hledej nasledujici adresar] //po ".."
                                           ;  }
                                           ;  HL_ADR_CL=PREH_ADR_CL
                                           ;  HL_ZAZNAM = 1
                                           ;  hledej();
                                           ;  if (nalezeno){
                                           ;	goto HLEDEJ_ADR_NALEZEN
                                           ;  }else{
                                           ;	HLEDEJ_ADR_OADR_VIS
                                           ;	if (PREH_ADR_CL == ROOT){
                                           ;		PREH_STAV0=[stop]
                                           ;		exit
                                           ;	}else{
                                           ;		HLEDEJ_ADR_OADR_VIS_NOROOT
                                           ;		najdi odkaz na PREH_ADR_CL v nadrazenem adresari		
                                           ;		hledej dalsi adresar v nadrazenem adresari po PREH_ADR_CL
                                           ;		PREH_ADR_CL = nadrazeny adresar
                                           ;		if (nalezeno){
                                           ;			goto HLEDEJ_ADR_NALEZEN
                                           ;		}else{
                                           ;			goto HLEDEJ_ADR_OADR_VIS
                                           ;		}
                                           ;	}
                                           ;  }
                                           ;
                                           ;  HLEDEJ_ADR_NALEZEN
                                           ;  hledej 1. mp3 v nalezenem adresari
                                           ;  pokud byla mp3 nalezena, nastav ji jako prehravanou
                                           ; }
                                           
                                           HLEDEJ_ADRESAR
                                           
001410   0862     movf	0x62, w             	movfw PREH_ADR_CL1
001411   0463     iorwf	0x63, w            	iorwf PREH_ADR_CL2,w
001412   0464     iorwf	0x64, w            	iorwf PREH_ADR_CL3,w
001413   0465     iorwf	0x65, w            	iorwf PREH_ADR_CL4,w
001414   300a     movlw	0xa                	movlw b'00001010'			; PREH_ADR je ROOT, tak hledame 1. adresar
001415   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001416   3002     movlw	0x2                	movlw b'00000010'			; PREH_ADR neni ROOT, tak hledame nasledujici adresar po adresari 1 ('..')
001417   00d9     movwf	0x59               	movwf HL_PARAMETRY
001418   3001     movlw	0x1                	movlw .1
001419   00e0     movwf	0x60               	movwf ZAZNAM1
00141a   01e1     clrf	0x61                	clrf ZAZNAM2
00141b   0862     movf	0x62, w             	movfw PREH_ADR_CL1
00141c   00da     movwf	0x5a               	movwf HL_ADR_CL1
00141d   0863     movf	0x63, w             	movfw PREH_ADR_CL2
00141e   00db     movwf	0x5b               	movwf HL_ADR_CL2
00141f   0864     movf	0x64, w             	movfw PREH_ADR_CL3
001420   00dc     movwf	0x5c               	movwf HL_ADR_CL3
001421   0865     movf	0x65, w             	movfw PREH_ADR_CL4
001422   00dd     movwf	0x5d               	movwf HL_ADR_CL4
                                           	PROG_PAGE_1
001425   2479     call	0x479               	call HLEDEJ
                                           	PROG_PAGE_2
                                           	BANK_2
00142a   0830     movf	0x30, w             	movfw 0x130
                                           ;	1. byte:	= 00h -> zadny vyhovujici zaznam nebyl nalezen
                                           ;				= 01h -> zaznam je adresar
                                           ;				= 02h -> zaznam je soubor; 
                                           ;				= 06h -> zaznam je soubor s priponou MP3
                                           	BANK_0
00142d   39ff     andlw	0xff               	andlw h'FF'
00142e   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
00142f   2c66     goto	0x466               	goto HLEDEJ_ADR_NALEZEN
                                           ;HLEDEJ_ADR_NENALEZEN
                                           HLEDEJ_ADR_OADR_VIS
                                           ;	HLEDEJ_ADR_OADR_VIS
                                           ;	if (PREH_ADR_CL == ROOT){
                                           ;		PREH_STAV0=[stop]
                                           ;		exit
                                           ;	}else{
                                           ;		HLEDEJ_ADR_OADR_VIS_NOROOT		
                                           ;		najdi odkaz na PREH_ADR_CL v nadrazenem adresari		
                                           ;		hledej dalsi adresar v nadrazenem adresari po PREH_ADR_CL
                                           ;		PREH_ADR_CL = nadrazeny adresar
                                           ;		if (nalezeno){
                                           ;			goto HLEDEJ_ADR_NALEZEN
                                           ;		}else{
                                           ;			goto HLEDEJ_ADR_OADR_VIS
                                           ;		}
                                           ;	}
001430   0862     movf	0x62, w             	movfw PREH_ADR_CL1
001431   0463     iorwf	0x63, w            	iorwf PREH_ADR_CL2,w
001432   0464     iorwf	0x64, w            	iorwf PREH_ADR_CL3,w
001433   0465     iorwf	0x65, w            	iorwf PREH_ADR_CL4,w
001434   1d03     btfss	0x3, 0x2           	btfss STATUS,Z	
001435   2c38     goto	0x438               	goto HLEDEJ_ADR_OADR_VIS_NOROOT
                                           
001436   106e     bcf	0x6e, 0              	bcf PREH_STAV0,0	; 0. bit = 	0 => stop nebo pausa (nic nehraje)
                                           
001437   2cba     goto	0x4ba               	goto HLEDEJ_ADRESAR_KONEC
                                           
                                           HLEDEJ_ADR_OADR_VIS_NOROOT	
001438   0862     movf	0x62, w             	movfw PREH_ADR_CL1
001439   00bc     movwf	0x3c               	movwf CLUSTER1
00143a   0863     movf	0x63, w             	movfw PREH_ADR_CL2
00143b   00bd     movwf	0x3d               	movwf CLUSTER2
00143c   0864     movf	0x64, w             	movfw PREH_ADR_CL3
00143d   00be     movwf	0x3e               	movwf CLUSTER3
00143e   0865     movf	0x65, w             	movfw PREH_ADR_CL4
00143f   00bf     movwf	0x3f               	movwf CLUSTER4
                                           	
                                           	PROG_PAGE_1
001442   26e3     call	0x6e3               	call HLEDEJ_V_NADRAZENEM	; najdi odkaz na PREH_ADR_CL v nadrazenem adresari
                                           	PROG_PAGE_2
                                           
                                           	INDF_BANK_3
001446   3090     movlw	0x90               	movlw h'90'
001447   0084     movwf	0x4                	movwf FSR
001448   0800     movf	0, w                	movfw INDF
001449   00e2     movwf	0x62               	movwf PREH_ADR_CL1
00144a   00da     movwf	0x5a               	movwf HL_ADR_CL1
00144b   0a84     incf	0x4, f              	incf FSR,f
00144c   0800     movf	0, w                	movfw INDF
00144d   00e3     movwf	0x63               	movwf PREH_ADR_CL2
00144e   00db     movwf	0x5b               	movwf HL_ADR_CL2
00144f   0a84     incf	0x4, f              	incf FSR,f
001450   0800     movf	0, w                	movfw INDF
001451   00e4     movwf	0x64               	movwf PREH_ADR_CL3
001452   00dc     movwf	0x5c               	movwf HL_ADR_CL3
001453   0a84     incf	0x4, f              	incf FSR,f
001454   0800     movf	0, w                	movfw INDF
001455   00e5     movwf	0x65               	movwf PREH_ADR_CL4			; PREH_ADR_CL = nadrazeny adresar
001456   00dd     movwf	0x5d               	movwf HL_ADR_CL4
                                           
001457   3002     movlw	0x2                	movlw b'00000010'			; hledame nasledujici adresar
                                           	PROG_PAGE_1
00145a   2479     call	0x479               	call HLEDEJ
                                           	PROG_PAGE_2					; hledej dalsi adresar v nadrazenem adresari po PREH_ADR_CL
                                           ;		if (nalezeno){
                                           ;			goto HLEDEJ_ADR_NALEZEN
                                           ;		}else{
                                           ;			goto HLEDEJ_ADR_OADR_VIS
                                           ;		}
                                           	BANK_2
00145f   0830     movf	0x30, w             	movfw 0x30
                                           	BANK_0
001462   3c01     sublw	0x1                	sublw h'01'			; = 01h -> zaznam je adresar
001463   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001464   2c30     goto	0x430               	goto HLEDEJ_ADR_OADR_VIS
001465   2c66     goto	0x466               	goto HLEDEJ_ADR_NALEZEN
                                           
                                           
                                           
                                           HLEDEJ_ADR_NALEZEN
                                           	INDF_BANK_2
001467   303c     movlw	0x3c               	movlw 0x3C
001468   0084     movwf	0x4                	movwf FSR
                                           
001469   0800     movf	0, w                	movfw INDF
00146a   00e2     movwf	0x62               	movwf PREH_ADR_CL1
00146b   00da     movwf	0x5a               	movwf HL_ADR_CL1
00146c   0a84     incf	0x4, f              	incf FSR,f
00146d   0800     movf	0, w                	movfw INDF
00146e   00e3     movwf	0x63               	movwf PREH_ADR_CL2
00146f   00db     movwf	0x5b               	movwf HL_ADR_CL2
001470   0a84     incf	0x4, f              	incf FSR,f
001471   0800     movf	0, w                	movfw INDF
001472   00e4     movwf	0x64               	movwf PREH_ADR_CL3
001473   00dc     movwf	0x5c               	movwf HL_ADR_CL3
001474   0a84     incf	0x4, f              	incf FSR,f
001475   0800     movf	0, w                	movfw INDF
001476   00e5     movwf	0x65               	movwf PREH_ADR_CL4
001477   00dd     movwf	0x5d               	movwf HL_ADR_CL4
                                           
001478   302e     movlw	0x2e               	movlw b'00101110'			; hledej 1. mp3
001479   00d9     movwf	0x59               	movwf HL_PARAMETRY
                                           
00147a   156e     bsf	0x6e, 0x2            	bsf PREH_STAV0,2			; byl automaticky zmenen prehravany soubor/adresar
                                           
                                           	PROG_PAGE_1
00147d   2479     call	0x479               	call HLEDEJ
                                           	PROG_PAGE_2
                                           
                                           	BANK_2
001482   0830     movf	0x30, w             	movfw 0x30
                                           	BANK_0
001485   3c06     sublw	0x6                	sublw h'06'			; = 06h -> zaznam je soubor s priponou MP3
001486   1d03     btfss	0x3, 0x2           	btfss STATUS,Z
001487   2cba     goto	0x4ba               	goto HLEDEJ_ADRESAR_KONEC
                                           
                                           	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                           	; byl nalezen soubor v podadresari, nastavime jej jako prehravany...
                                           	INDF_BANK_2
001489   303c     movlw	0x3c               	movlw 0x3C
00148a   0084     movwf	0x4                	movwf FSR
                                           
00148b   0800     movf	0, w                	movfw INDF
00148c   00e9     movwf	0x69               	movwf PREH_DATA_CL1
00148d   00bc     movwf	0x3c               	movwf CLUSTER1
00148e   0a84     incf	0x4, f              	incf FSR,f
00148f   0800     movf	0, w                	movfw INDF
001490   00ea     movwf	0x6a               	movwf PREH_DATA_CL2
001491   00bd     movwf	0x3d               	movwf CLUSTER2
001492   0a84     incf	0x4, f              	incf FSR,f
001493   0800     movf	0, w                	movfw INDF
001494   00eb     movwf	0x6b               	movwf PREH_DATA_CL3
001495   00be     movwf	0x3e               	movwf CLUSTER3
001496   0a84     incf	0x4, f              	incf FSR,f
001497   0800     movf	0, w                	movfw INDF
001498   00ec     movwf	0x6c               	movwf PREH_DATA_CL4
001499   00bf     movwf	0x3f               	movwf CLUSTER4
                                           
00149a   0a84     incf	0x4, f              	incf FSR,f
00149b   0800     movf	0, w                	movfw INDF
00149c   00e6     movwf	0x66               	movwf PREH_ZAZNAM1
00149d   0a84     incf	0x4, f              	incf FSR,f
00149e   0800     movf	0, w                	movfw INDF
00149f   00e7     movwf	0x67               	movwf PREH_ZAZNAM2
                                           
                                           	PROG_PAGE_0
0014a2   2573     call	0x573               	call ZJISTI_FRAGMENT
                                           	PROG_PAGE_2
0014a5   0851     movf	0x51, w             	movfw FRAGMENT1
0014a6   00d3     movwf	0x53               	movwf PREH_D_FRAGMENT1
0014a7   0852     movf	0x52, w             	movfw FRAGMENT2
0014a8   00d4     movwf	0x54               	movwf PREH_D_FRAGMENT2
                                           	; aktualni prehravany soubor i prehravana slozka byly nastaveny...
                                           
0014a9   01ed     clrf	0x6d                	clrf PREH_DATA_POZICE
0014aa   146e     bsf	0x6e, 0              	bsf PREH_STAV0,0			; je zvoleno play
0014ab   14ee     bsf	0x6e, 0x1            	bsf PREH_STAV0,1			; je co prehravat
0014ac   156e     bsf	0x6e, 0x2            	bsf PREH_STAV0,2			; byl automaticky zmenen prehravany soubor/adresar
                                           
0014ad   10cd     bcf	0x4d, 0x1            	bcf VSREG_MODE_L,1			; prehravame normalni rychlosti 
0014ae   106f     bcf	0x6f, 0              	bcf PREH_STAV1,0			; prehravame normalni rychlosti 
                                           
                                           	PROG_PAGE_1	
0014b1   204d     call	0x4d                	call VS_SOFT_RESET
                                           
0014b2   3000     movlw	0                  	movlw VSADDR_MODE
0014b3   00b6     movwf	0x36               	movwf TEMP1
0014b4   084d     movf	0x4d, w             	movfw VSREG_MODE_L
0014b5   00b7     movwf	0x37               	movwf TEMP2
0014b6   01b8     clrf	0x38                	clrf TEMP3
0014b7   201c     call	0x1c                	call VS_WR_REG
                                           	PROG_PAGE_2
                                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                           HLEDEJ_ADRESAR_KONEC
                                           	PROG_PAGE_0
0014bc   2914     goto	0x114               	goto HLEDEJ_ADRESAR_RETURN
                                           
                                            org 0x1800					; PAGE 3
                                           	include "loudness.asm"	; plugin dekoderu "loudness" a podprogramy pro jeho nahrani a obsluhu
                                           ; Plugin LOUDNESS pro dekoder VS1001k umoznoje pri dekodovani mp3 menit prenosovou charakteristiku.
                                           ; Vybirat muzeme celkem z 12 prednastavenych ekvalizeru.
                                           
                                           ; Samotny plugin je treba po resetu nahrat do RAM pameti dekoderu.
                                           ; Pak uz jej muzeme pres uzivatelske registry VS ovladat a poslouchat, jak nam to krasne hraje:)
                                           
                                           ; Je pouzit originalni vzorovy plugin od firmy VLSI (verze 1.41)
                                           ; Pro blizsi informace o pluginu si prectete datasheet ze stranek www.vlsi.fi
                                           
                                           ; Do VS registru WRAMADDR se nejdrive musi nahrat adresa 0x8200 pro zacatek pluginu na adrese 0x4200 
                                           ; (0x4200 + 0x4000 = 0x8200 vis. "6.5.8 WRAMADDR" datasheetu VS1001k)
                                           ; A pote do registru WRAM nasledujici tabulka. Prvni dato je dolni byte slova.
                                           
                                           ;# addr = 0x4200, 379 32-bit words = 1516 bytes
                                           ; org 0x1800					; PAGE 3
001800   3413     retlw	0x13               	retlw 0x13
001801   3436     retlw	0x36               	retlw 0x36
001802   3424     retlw	0x24               	retlw 0x24
001803   3400     retlw	0                  	retlw 0x00
001804   3412     retlw	0x12               	retlw 0x12
001805   343e     retlw	0x3e               	retlw 0x3e
001806   3417     retlw	0x17               	retlw 0x17
001807   34b8     retlw	0xb8               	retlw 0xb8
001808   3412     retlw	0x12               	retlw 0x12
001809   343e     retlw	0x3e               	retlw 0x3e
00180a   3415     retlw	0x15               	retlw 0x15
00180b   3438     retlw	0x38               	retlw 0x38
00180c   3405     retlw	0x5                	retlw 0x05
00180d   343e     retlw	0x3e               	retlw 0x3e
00180e   3414     retlw	0x14               	retlw 0x14
00180f   34b8     retlw	0xb8               	retlw 0xb8
001810   3415     retlw	0x15               	retlw 0x15
001811   3436     retlw	0x36               	retlw 0x36
001812   3424     retlw	0x24               	retlw 0x24
001813   3400     retlw	0                  	retlw 0x00
001814   3400     retlw	0                  	retlw 0x00
001815   3400     retlw	0                  	retlw 0x00
001816   340a     retlw	0xa                	retlw 0x0a
001817   3480     retlw	0x80               	retlw 0x80
001818   3410     retlw	0x10               	retlw 0x10
001819   343e     retlw	0x3e               	retlw 0x3e
00181a   3404     retlw	0x4                	retlw 0x04
00181b   34b8     retlw	0xb8               	retlw 0xb8
00181c   3400     retlw	0                  	retlw 0x00
00181d   3400     retlw	0                  	retlw 0x00
00181e   3482     retlw	0x82               	retlw 0x82
00181f   3400     retlw	0                  	retlw 0x00
001820   3404     retlw	0x4                	retlw 0x04
001821   343e     retlw	0x3e               	retlw 0x3e
001822   3412     retlw	0x12               	retlw 0x12
001823   3478     retlw	0x78               	retlw 0x78
001824   3424     retlw	0x24               	retlw 0x24
001825   3460     retlw	0x60               	retlw 0x60
001826   3424     retlw	0x24               	retlw 0x24
001827   3400     retlw	0                  	retlw 0x00
001828   3404     retlw	0x4                	retlw 0x04
001829   3400     retlw	0                  	retlw 0x00
00182a   3491     retlw	0x91               	retlw 0x91
00182b   34e5     retlw	0xe5               	retlw 0xe5
00182c   3410     retlw	0x10               	retlw 0x10
00182d   3428     retlw	0x28               	retlw 0x28
00182e   3415     retlw	0x15               	retlw 0x15
00182f   348a     retlw	0x8a               	retlw 0x8a
001830   3494     retlw	0x94               	retlw 0x94
001831   3440     retlw	0x40               	retlw 0x40
001832   3424     retlw	0x24               	retlw 0x24
001833   3400     retlw	0                  	retlw 0x00
001834   3400     retlw	0                  	retlw 0x00
001835   3431     retlw	0x31               	retlw 0x31
001836   344c     retlw	0x4c               	retlw 0x4c
001837   3498     retlw	0x98               	retlw 0x98
001838   3484     retlw	0x84               	retlw 0x84
001839   3442     retlw	0x42               	retlw 0x42
00183a   3424     retlw	0x24               	retlw 0x24
00183b   3400     retlw	0                  	retlw 0x00
00183c   3404     retlw	0x4                	retlw 0x04
00183d   3400     retlw	0                  	retlw 0x00
00183e   3412     retlw	0x12               	retlw 0x12
00183f   34e0     retlw	0xe0               	retlw 0xe0
001840   3410     retlw	0x10               	retlw 0x10
001841   3428     retlw	0x28               	retlw 0x28
001842   3445     retlw	0x45               	retlw 0x45
001843   3487     retlw	0x87               	retlw 0x87
001844   3400     retlw	0                  	retlw 0x00
001845   3400     retlw	0                  	retlw 0x00
001846   3491     retlw	0x91               	retlw 0x91
001847   3400     retlw	0                  	retlw 0x00
001848   3410     retlw	0x10               	retlw 0x10
001849   34f1     retlw	0xf1               	retlw 0xf1
00184a   3440     retlw	0x40               	retlw 0x40
00184b   34b8     retlw	0xb8               	retlw 0xb8
00184c   3410     retlw	0x10               	retlw 0x10
00184d   3429     retlw	0x29               	retlw 0x29
00184e   34c0     retlw	0xc0               	retlw 0xc0
00184f   34d3     retlw	0xd3               	retlw 0xd3
001850   3409     retlw	0x9                	retlw 0x09
001851   3430     retlw	0x30               	retlw 0x30
001852   3450     retlw	0x50               	retlw 0x50
001853   3438     retlw	0x38               	retlw 0x38
001854   3404     retlw	0x4                	retlw 0x04
001855   3400     retlw	0                  	retlw 0x00
001856   3412     retlw	0x12               	retlw 0x12
001857   34e2     retlw	0xe2               	retlw 0xe2
001858   3400     retlw	0                  	retlw 0x00
001859   3400     retlw	0                  	retlw 0x00
00185a   3491     retlw	0x91               	retlw 0x91
00185b   3400     retlw	0                  	retlw 0x00
00185c   3410     retlw	0x10               	retlw 0x10
00185d   34f1     retlw	0xf1               	retlw 0xf1
00185e   3450     retlw	0x50               	retlw 0x50
00185f   3498     retlw	0x98               	retlw 0x98
001860   3410     retlw	0x10               	retlw 0x10
001861   3429     retlw	0x29               	retlw 0x29
001862   34c0     retlw	0xc0               	retlw 0xc0
001863   34d3     retlw	0xd3               	retlw 0xd3
001864   3413     retlw	0x13               	retlw 0x13
001865   3430     retlw	0x30               	retlw 0x30
001866   3424     retlw	0x24               	retlw 0x24
001867   3400     retlw	0                  	retlw 0x00
001868   3409     retlw	0x9                	retlw 0x09
001869   3430     retlw	0x30               	retlw 0x30
00186a   34d0     retlw	0xd0               	retlw 0xd0
00186b   341b     retlw	0x1b               	retlw 0x1b
00186c   3410     retlw	0x10               	retlw 0x10
00186d   3428     retlw	0x28               	retlw 0x28
00186e   3480     retlw	0x80               	retlw 0x80
00186f   3490     retlw	0x90               	retlw 0x90
001870   3409     retlw	0x9                	retlw 0x09
001871   3430     retlw	0x30               	retlw 0x30
001872   34c0     retlw	0xc0               	retlw 0xc0
001873   341b     retlw	0x1b               	retlw 0x1b
001874   3410     retlw	0x10               	retlw 0x10
001875   34f1     retlw	0xf1               	retlw 0xf1
001876   3440     retlw	0x40               	retlw 0x40
001877   34b8     retlw	0xb8               	retlw 0xb8
001878   3410     retlw	0x10               	retlw 0x10
001879   3429     retlw	0x29               	retlw 0x29
00187a   3440     retlw	0x40               	retlw 0x40
00187b   34c6     retlw	0xc6               	retlw 0xc6
00187c   3409     retlw	0x9                	retlw 0x09
00187d   3430     retlw	0x30               	retlw 0x30
00187e   3450     retlw	0x50               	retlw 0x50
00187f   3438     retlw	0x38               	retlw 0x38
001880   3404     retlw	0x4                	retlw 0x04
001881   3400     retlw	0                  	retlw 0x00
001882   3412     retlw	0x12               	retlw 0x12
001883   34e2     retlw	0xe2               	retlw 0xe2
001884   3400     retlw	0                  	retlw 0x00
001885   3400     retlw	0                  	retlw 0x00
001886   3491     retlw	0x91               	retlw 0x91
001887   3400     retlw	0                  	retlw 0x00
001888   3410     retlw	0x10               	retlw 0x10
001889   34f1     retlw	0xf1               	retlw 0xf1
00188a   3450     retlw	0x50               	retlw 0x50
00188b   3498     retlw	0x98               	retlw 0x98
00188c   3410     retlw	0x10               	retlw 0x10
00188d   3429     retlw	0x29               	retlw 0x29
00188e   3440     retlw	0x40               	retlw 0x40
00188f   34c6     retlw	0xc6               	retlw 0xc6
001890   3413     retlw	0x13               	retlw 0x13
001891   3430     retlw	0x30               	retlw 0x30
001892   3424     retlw	0x24               	retlw 0x24
001893   3400     retlw	0                  	retlw 0x00
001894   3409     retlw	0x9                	retlw 0x09
001895   3430     retlw	0x30               	retlw 0x30
001896   34d0     retlw	0xd0               	retlw 0xd0
001897   341b     retlw	0x1b               	retlw 0x1b
001898   3410     retlw	0x10               	retlw 0x10
001899   3428     retlw	0x28               	retlw 0x28
00189a   3480     retlw	0x80               	retlw 0x80
00189b   3490     retlw	0x90               	retlw 0x90
00189c   3409     retlw	0x9                	retlw 0x09
00189d   3430     retlw	0x30               	retlw 0x30
00189e   34c0     retlw	0xc0               	retlw 0xc0
00189f   341b     retlw	0x1b               	retlw 0x1b
0018a0   3400     retlw	0                  	retlw 0x00
0018a1   3400     retlw	0                  	retlw 0x00
0018a2   3402     retlw	0x2                	retlw 0x02
0018a3   3401     retlw	0x1                	retlw 0x01
0018a4   3410     retlw	0x10               	retlw 0x10
0018a5   3428     retlw	0x28               	retlw 0x28
0018a6   3415     retlw	0x15               	retlw 0x15
0018a7   348f     retlw	0x8f               	retlw 0x8f
0018a8   3400     retlw	0                  	retlw 0x00
0018a9   3400     retlw	0                  	retlw 0x00
0018aa   3424     retlw	0x24               	retlw 0x24
0018ab   3400     retlw	0                  	retlw 0x00
0018ac   3400     retlw	0                  	retlw 0x00
0018ad   3431     retlw	0x31               	retlw 0x31
0018ae   344c     retlw	0x4c               	retlw 0x4c
0018af   3498     retlw	0x98               	retlw 0x98
0018b0   3484     retlw	0x84               	retlw 0x84
0018b1   3442     retlw	0x42               	retlw 0x42
0018b2   3424     retlw	0x24               	retlw 0x24
0018b3   3400     retlw	0                  	retlw 0x00
0018b4   3404     retlw	0x4                	retlw 0x04
0018b5   3400     retlw	0                  	retlw 0x00
0018b6   3412     retlw	0x12               	retlw 0x12
0018b7   34e0     retlw	0xe0               	retlw 0xe0
0018b8   3410     retlw	0x10               	retlw 0x10
0018b9   3428     retlw	0x28               	retlw 0x28
0018ba   3485     retlw	0x85               	retlw 0x85
0018bb   348d     retlw	0x8d               	retlw 0x8d
0018bc   3400     retlw	0                  	retlw 0x00
0018bd   3400     retlw	0                  	retlw 0x00
0018be   3451     retlw	0x51               	retlw 0x51
0018bf   3400     retlw	0                  	retlw 0x00
0018c0   3480     retlw	0x80               	retlw 0x80
0018c1   3441     retlw	0x41               	retlw 0x41
0018c2   3440     retlw	0x40               	retlw 0x40
0018c3   34b8     retlw	0xb8               	retlw 0xb8
0018c4   3410     retlw	0x10               	retlw 0x10
0018c5   3429     retlw	0x29               	retlw 0x29
0018c6   34c0     retlw	0xc0               	retlw 0xc0
0018c7   34d3     retlw	0xd3               	retlw 0xd3
0018c8   3409     retlw	0x9                	retlw 0x09
0018c9   3430     retlw	0x30               	retlw 0x30
0018ca   3450     retlw	0x50               	retlw 0x50
0018cb   3438     retlw	0x38               	retlw 0x38
0018cc   3409     retlw	0x9                	retlw 0x09
0018cd   3430     retlw	0x30               	retlw 0x30
0018ce   34d0     retlw	0xd0               	retlw 0xd0
0018cf   341b     retlw	0x1b               	retlw 0x1b
0018d0   3410     retlw	0x10               	retlw 0x10
0018d1   3428     retlw	0x28               	retlw 0x28
0018d2   3480     retlw	0x80               	retlw 0x80
0018d3   3490     retlw	0x90               	retlw 0x90
0018d4   3409     retlw	0x9                	retlw 0x09
0018d5   3430     retlw	0x30               	retlw 0x30
0018d6   34c0     retlw	0xc0               	retlw 0xc0
0018d7   341b     retlw	0x1b               	retlw 0x1b
0018d8   3480     retlw	0x80               	retlw 0x80
0018d9   3441     retlw	0x41               	retlw 0x41
0018da   3440     retlw	0x40               	retlw 0x40
0018db   34b8     retlw	0xb8               	retlw 0xb8
0018dc   3410     retlw	0x10               	retlw 0x10
0018dd   3429     retlw	0x29               	retlw 0x29
0018de   3440     retlw	0x40               	retlw 0x40
0018df   34c6     retlw	0xc6               	retlw 0xc6
0018e0   3409     retlw	0x9                	retlw 0x09
0018e1   3430     retlw	0x30               	retlw 0x30
0018e2   3450     retlw	0x50               	retlw 0x50
0018e3   3438     retlw	0x38               	retlw 0x38
0018e4   3409     retlw	0x9                	retlw 0x09
0018e5   3430     retlw	0x30               	retlw 0x30
0018e6   34d0     retlw	0xd0               	retlw 0xd0
0018e7   341b     retlw	0x1b               	retlw 0x1b
0018e8   3410     retlw	0x10               	retlw 0x10
0018e9   3428     retlw	0x28               	retlw 0x28
0018ea   3480     retlw	0x80               	retlw 0x80
0018eb   3490     retlw	0x90               	retlw 0x90
0018ec   3409     retlw	0x9                	retlw 0x09
0018ed   3430     retlw	0x30               	retlw 0x30
0018ee   34c0     retlw	0xc0               	retlw 0xc0
0018ef   341b     retlw	0x1b               	retlw 0x1b
0018f0   3424     retlw	0x24               	retlw 0x24
0018f1   3460     retlw	0x60               	retlw 0x60
0018f2   3424     retlw	0x24               	retlw 0x24
0018f3   3400     retlw	0                  	retlw 0x00
0018f4   3400     retlw	0                  	retlw 0x00
0018f5   3400     retlw	0                  	retlw 0x00
0018f6   3424     retlw	0x24               	retlw 0x24
0018f7   3400     retlw	0                  	retlw 0x00
0018f8   3410     retlw	0x10               	retlw 0x10
0018f9   3428     retlw	0x28               	retlw 0x28
0018fa   3495     retlw	0x95               	retlw 0x95
0018fb   3490     retlw	0x90               	retlw 0x90
0018fc   3400     retlw	0                  	retlw 0x00
0018fd   3400     retlw	0                  	retlw 0x00
0018fe   3424     retlw	0x24               	retlw 0x24
0018ff   3400     retlw	0                  	retlw 0x00
001900   3410     retlw	0x10               	retlw 0x10
001901   3429     retlw	0x29               	retlw 0x29
001902   3440     retlw	0x40               	retlw 0x40
001903   3492     retlw	0x92               	retlw 0x92
001904   3488     retlw	0x88               	retlw 0x88
001905   3441     retlw	0x41               	retlw 0x41
001906   3424     retlw	0x24               	retlw 0x24
001907   3400     retlw	0                  	retlw 0x00
001908   34f4     retlw	0xf4               	retlw 0xf4
001909   3436     retlw	0x36               	retlw 0x36
00190a   3412     retlw	0x12               	retlw 0x12
00190b   3458     retlw	0x58               	retlw 0x58
00190c   34f0     retlw	0xf0               	retlw 0xf0
00190d   3436     retlw	0x36               	retlw 0x36
00190e   3404     retlw	0x4                	retlw 0x04
00190f   3498     retlw	0x98               	retlw 0x98
001910   3405     retlw	0x5                	retlw 0x05
001911   3434     retlw	0x34               	retlw 0x34
001912   3414     retlw	0x14               	retlw 0x14
001913   3490     retlw	0x90               	retlw 0x90
001914   34f3     retlw	0xf3               	retlw 0xf3
001915   3436     retlw	0x36               	retlw 0x36
001916   3424     retlw	0x24               	retlw 0x24
001917   3400     retlw	0                  	retlw 0x00
001918   34f2     retlw	0xf2               	retlw 0xf2
001919   3436     retlw	0x36               	retlw 0x36
00191a   3415     retlw	0x15               	retlw 0x15
00191b   3418     retlw	0x18               	retlw 0x18
00191c   3400     retlw	0                  	retlw 0x00
00191d   3420     retlw	0x20               	retlw 0x20
00191e   3400     retlw	0                  	retlw 0x00
00191f   3400     retlw	0                  	retlw 0x00
001920   34f2     retlw	0xf2               	retlw 0xf2
001921   3436     retlw	0x36               	retlw 0x36
001922   3417     retlw	0x17               	retlw 0x17
001923   3498     retlw	0x98               	retlw 0x98
001924   3413     retlw	0x13               	retlw 0x13
001925   3436     retlw	0x36               	retlw 0x36
001926   3424     retlw	0x24               	retlw 0x24
001927   3400     retlw	0                  	retlw 0x00
001928   3422     retlw	0x22               	retlw 0x22
001929   343e     retlw	0x3e               	retlw 0x3e
00192a   3415     retlw	0x15               	retlw 0x15
00192b   34b8     retlw	0xb8               	retlw 0xb8
00192c   3405     retlw	0x5                	retlw 0x05
00192d   343e     retlw	0x3e               	retlw 0x3e
00192e   3414     retlw	0x14               	retlw 0x14
00192f   34b8     retlw	0xb8               	retlw 0xb8
001930   3425     retlw	0x25               	retlw 0x25
001931   3436     retlw	0x36               	retlw 0x36
001932   3424     retlw	0x24               	retlw 0x24
001933   3400     retlw	0                  	retlw 0x00
001934   3400     retlw	0                  	retlw 0x00
001935   3400     retlw	0                  	retlw 0x00
001936   340a     retlw	0xa                	retlw 0x0a 
001937   3480     retlw	0x80               	retlw 0x80
001938   3410     retlw	0x10               	retlw 0x10
001939   343e     retlw	0x3e               	retlw 0x3e
00193a   3401     retlw	0x1                	retlw 0x01
00193b   3438     retlw	0x38               	retlw 0x38
00193c   3404     retlw	0x4                	retlw 0x04
00193d   3400     retlw	0                  	retlw 0x00
00193e   3400     retlw	0                  	retlw 0x00
00193f   34e0     retlw	0xe0               	retlw 0xe0
001940   3411     retlw	0x11               	retlw 0x11
001941   343e     retlw	0x3e               	retlw 0x3e
001942   3410     retlw	0x10               	retlw 0x10
001943   3478     retlw	0x78               	retlw 0x78
001944   3413     retlw	0x13               	retlw 0x13
001945   343e     retlw	0x3e               	retlw 0x3e
001946   340e     retlw	0xe                	retlw 0x0e 
001947   34f8     retlw	0xf8               	retlw 0xf8
001948   3403     retlw	0x3                	retlw 0x03
001949   343e     retlw	0x3e               	retlw 0x3e
00194a   344c     retlw	0x4c               	retlw 0x4c
00194b   3450     retlw	0x50               	retlw 0x50
00194c   3488     retlw	0x88               	retlw 0x88
00194d   3444     retlw	0x44               	retlw 0x44
00194e   34c0     retlw	0xc0               	retlw 0xc0
00194f   3433     retlw	0x33               	retlw 0x33
001950   3404     retlw	0x4                	retlw 0x04
001951   3400     retlw	0                  	retlw 0x00
001952   34d0     retlw	0xd0               	retlw 0xd0
001953   34e0     retlw	0xe0               	retlw 0xe0
001954   3410     retlw	0x10               	retlw 0x10
001955   3428     retlw	0x28               	retlw 0x28
001956   3495     retlw	0x95               	retlw 0x95
001957   3498     retlw	0x98               	retlw 0x98
001958   3400     retlw	0                  	retlw 0x00
001959   3400     retlw	0                  	retlw 0x00
00195a   34ce     retlw	0xce               	retlw 0xce 
00195b   3403     retlw	0x3                	retlw 0x03
00195c   3410     retlw	0x10               	retlw 0x10
00195d   3424     retlw	0x24               	retlw 0x24
00195e   34ce     retlw	0xce               	retlw 0xce 
00195f   3496     retlw	0x96               	retlw 0x96
001960   3480     retlw	0x80               	retlw 0x80
001961   34b8     retlw	0xb8               	retlw 0xb8
001962   344c     retlw	0x4c               	retlw 0x4c
001963   3410     retlw	0x10               	retlw 0x10
001964   3405     retlw	0x5                	retlw 0x05
001965   3434     retlw	0x34               	retlw 0x34
001966   3424     retlw	0x24               	retlw 0x24
001967   34c0     retlw	0xc0               	retlw 0xc0
001968   3410     retlw	0x10               	retlw 0x10
001969   343f     retlw	0x3f               	retlw 0x3f
00196a   3424     retlw	0x24               	retlw 0x24
00196b   3400     retlw	0                  	retlw 0x00
00196c   3405     retlw	0x5                	retlw 0x05
00196d   343c     retlw	0x3c               	retlw 0x3c
00196e   3424     retlw	0x24               	retlw 0x24
00196f   34c0     retlw	0xc0               	retlw 0xc0
001970   3404     retlw	0x4                	retlw 0x04
001971   3400     retlw	0                  	retlw 0x00
001972   3400     retlw	0                  	retlw 0x00
001973   34e0     retlw	0xe0               	retlw 0xe0
001974   3404     retlw	0x4                	retlw 0x04
001975   3400     retlw	0                  	retlw 0x00
001976   34d0     retlw	0xd0               	retlw 0xd0
001977   34e0     retlw	0xe0               	retlw 0xe0
001978   3470     retlw	0x70               	retlw 0x70
001979   3438     retlw	0x38               	retlw 0x38
00197a   34cc     retlw	0xcc               	retlw 0xcc 
00197b   3413     retlw	0x13               	retlw 0x13
00197c   3404     retlw	0x4                	retlw 0x04
00197d   3400     retlw	0                  	retlw 0x00
00197e   3400     retlw	0                  	retlw 0x00
00197f   34e2     retlw	0xe2               	retlw 0xe2
001980   3410     retlw	0x10               	retlw 0x10
001981   3428     retlw	0x28               	retlw 0x28
001982   3400     retlw	0                  	retlw 0x00
001983   34c4     retlw	0xc4               	retlw 0xc4
001984   3413     retlw	0x13               	retlw 0x13
001985   3430     retlw	0x30               	retlw 0x30
001986   3424     retlw	0x24               	retlw 0x24
001987   3400     retlw	0                  	retlw 0x00
001988   3470     retlw	0x70               	retlw 0x70
001989   3430     retlw	0x30               	retlw 0x30
00198a   3424     retlw	0x24               	retlw 0x24
00198b   3400     retlw	0                  	retlw 0x00
00198c   3480     retlw	0x80               	retlw 0x80
00198d   3440     retlw	0x40               	retlw 0x40
00198e   344c     retlw	0x4c               	retlw 0x4c
00198f   3400     retlw	0                  	retlw 0x00
001990   3404     retlw	0x4                	retlw 0x04
001991   3400     retlw	0                  	retlw 0x00
001992   3400     retlw	0                  	retlw 0x00
001993   34e0     retlw	0xe0               	retlw 0xe0
001994   3410     retlw	0x10               	retlw 0x10
001995   3428     retlw	0x28               	retlw 0x28
001996   3445     retlw	0x45               	retlw 0x45
001997   349b     retlw	0x9b               	retlw 0x9b
001998   3400     retlw	0                  	retlw 0x00
001999   3400     retlw	0                  	retlw 0x00
00199a   3424     retlw	0x24               	retlw 0x24
00199b   3400     retlw	0                  	retlw 0x00
00199c   3400     retlw	0                  	retlw 0x00
00199d   3430     retlw	0x30               	retlw 0x30
00199e   3424     retlw	0x24               	retlw 0x24
00199f   3400     retlw	0                  	retlw 0x00
0019a0   3480     retlw	0x80               	retlw 0x80
0019a1   3440     retlw	0x40               	retlw 0x40
0019a2   3424     retlw	0x24               	retlw 0x24
0019a3   3400     retlw	0                  	retlw 0x00
0019a4   3400     retlw	0                  	retlw 0x00
0019a5   3400     retlw	0                  	retlw 0x00
0019a6   3424     retlw	0x24               	retlw 0x24
0019a7   3400     retlw	0                  	retlw 0x00
0019a8   3410     retlw	0x10               	retlw 0x10
0019a9   3428     retlw	0x28               	retlw 0x28
0019aa   3495     retlw	0x95               	retlw 0x95
0019ab   349c     retlw	0x9c               	retlw 0x9c
0019ac   3490     retlw	0x90               	retlw 0x90
0019ad   3444     retlw	0x44               	retlw 0x44
0019ae   3424     retlw	0x24               	retlw 0x24
0019af   3400     retlw	0                  	retlw 0x00
0019b0   3404     retlw	0x4                	retlw 0x04
0019b1   3400     retlw	0                  	retlw 0x00
0019b2   3400     retlw	0                  	retlw 0x00
0019b3   34e0     retlw	0xe0               	retlw 0xe0
0019b4   3404     retlw	0x4                	retlw 0x04
0019b5   3400     retlw	0                  	retlw 0x00
0019b6   34d0     retlw	0xd0               	retlw 0xd0
0019b7   34e0     retlw	0xe0               	retlw 0xe0
0019b8   3470     retlw	0x70               	retlw 0x70
0019b9   3438     retlw	0x38               	retlw 0x38
0019ba   3424     retlw	0x24               	retlw 0x24
0019bb   3400     retlw	0                  	retlw 0x00
0019bc   3404     retlw	0x4                	retlw 0x04
0019bd   3400     retlw	0                  	retlw 0x00
0019be   3400     retlw	0                  	retlw 0x00
0019bf   34e2     retlw	0xe2               	retlw 0xe2
0019c0   3413     retlw	0x13               	retlw 0x13
0019c1   3430     retlw	0x30               	retlw 0x30
0019c2   3424     retlw	0x24               	retlw 0x24
0019c3   3400     retlw	0                  	retlw 0x00
0019c4   3490     retlw	0x90               	retlw 0x90
0019c5   3444     retlw	0x44               	retlw 0x44
0019c6   3400     retlw	0                  	retlw 0x00
0019c7   3420     retlw	0x20               	retlw 0x20
0019c8   3400     retlw	0                  	retlw 0x00
0019c9   3400     retlw	0                  	retlw 0x00
0019ca   3480     retlw	0x80               	retlw 0x80
0019cb   3400     retlw	0                  	retlw 0x00
0019cc   3410     retlw	0x10               	retlw 0x10
0019cd   3428     retlw	0x28               	retlw 0x28
0019ce   3495     retlw	0x95               	retlw 0x95
0019cf   349f     retlw	0x9f               	retlw 0x9f
0019d0   3401     retlw	0x1                	retlw 0x01
0019d1   3400     retlw	0                  	retlw 0x00
0019d2   3410     retlw	0x10               	retlw 0x10
0019d3   34e0     retlw	0xe0               	retlw 0xe0
0019d4   3410     retlw	0x10               	retlw 0x10
0019d5   3400     retlw	0                  	retlw 0x00
0019d6   3480     retlw	0x80               	retlw 0x80
0019d7   34a2     retlw	0xa2               	retlw 0xa2
0019d8   3409     retlw	0x9                	retlw 0x09
0019d9   3430     retlw	0x30               	retlw 0x30
0019da   3440     retlw	0x40               	retlw 0x40
0019db   3420     retlw	0x20               	retlw 0x20
0019dc   340f     retlw	0xf                	retlw 0x0f 
0019dd   3400     retlw	0                  	retlw 0x00
0019de   3400     retlw	0                  	retlw 0x00
0019df   347c     retlw	0x7c               	retlw 0x7c
0019e0   3409     retlw	0x9                	retlw 0x09
0019e1   3430     retlw	0x30               	retlw 0x30
0019e2   3440     retlw	0x40               	retlw 0x40
0019e3   3420     retlw	0x20               	retlw 0x20
0019e4   3420     retlw	0x20               	retlw 0x20
0019e5   3400     retlw	0                  	retlw 0x00
0019e6   3400     retlw	0                  	retlw 0x00
0019e7   3400     retlw	0                  	retlw 0x00
0019e8   3409     retlw	0x9                	retlw 0x09
0019e9   3430     retlw	0x30               	retlw 0x30
0019ea   3440     retlw	0x40               	retlw 0x40
0019eb   3420     retlw	0x20               	retlw 0x20
0019ec   3407     retlw	0x7                	retlw 0x07
0019ed   3400     retlw	0                  	retlw 0x00
0019ee   3400     retlw	0                  	retlw 0x00
0019ef   34e0     retlw	0xe0               	retlw 0xe0
0019f0   3410     retlw	0x10               	retlw 0x10
0019f1   3428     retlw	0x28               	retlw 0x28
0019f2   3400     retlw	0                  	retlw 0x00
0019f3   34c2     retlw	0xc2               	retlw 0xc2
0019f4   3409     retlw	0x9                	retlw 0x09
0019f5   3430     retlw	0x30               	retlw 0x30
0019f6   3400     retlw	0                  	retlw 0x00
0019f7   3420     retlw	0x20               	retlw 0x20
0019f8   3400     retlw	0                  	retlw 0x00
0019f9   3464     retlw	0x64               	retlw 0x64
0019fa   3424     retlw	0x24               	retlw 0x24
0019fb   3400     retlw	0                  	retlw 0x00
0019fc   3400     retlw	0                  	retlw 0x00
0019fd   3400     retlw	0                  	retlw 0x00
0019fe   34c0     retlw	0xc0               	retlw 0xc0
0019ff   3400     retlw	0                  	retlw 0x00
001a00   3410     retlw	0x10               	retlw 0x10
001a01   3428     retlw	0x28               	retlw 0x28
001a02   34d5     retlw	0xd5               	retlw 0xd5
001a03   34a2     retlw	0xa2               	retlw 0xa2
001a04   3400     retlw	0                  	retlw 0x00
001a05   3400     retlw	0                  	retlw 0x00
001a06   3424     retlw	0x24               	retlw 0x24
001a07   3400     retlw	0                  	retlw 0x00
001a08   340e     retlw	0xe                	retlw 0x0e 
001a09   3400     retlw	0                  	retlw 0x00
001a0a   3440     retlw	0x40               	retlw 0x40
001a0b   3491     retlw	0x91               	retlw 0x91
001a0c   3409     retlw	0x9                	retlw 0x09
001a0d   3430     retlw	0x30               	retlw 0x30
001a0e   3440     retlw	0x40               	retlw 0x40
001a0f   3420     retlw	0x20               	retlw 0x20
001a10   3411     retlw	0x11               	retlw 0x11
001a11   3400     retlw	0                  	retlw 0x00
001a12   3440     retlw	0x40               	retlw 0x40
001a13   3497     retlw	0x97               	retlw 0x97
001a14   3409     retlw	0x9                	retlw 0x09
001a15   3430     retlw	0x30               	retlw 0x30
001a16   3440     retlw	0x40               	retlw 0x40
001a17   3420     retlw	0x20               	retlw 0x20
001a18   3420     retlw	0x20               	retlw 0x20
001a19   3400     retlw	0                  	retlw 0x00
001a1a   3400     retlw	0                  	retlw 0x00
001a1b   3400     retlw	0                  	retlw 0x00
001a1c   3409     retlw	0x9                	retlw 0x09
001a1d   3430     retlw	0x30               	retlw 0x30
001a1e   3440     retlw	0x40               	retlw 0x40
001a1f   3420     retlw	0x20               	retlw 0x20
001a20   3407     retlw	0x7                	retlw 0x07
001a21   3400     retlw	0                  	retlw 0x00
001a22   3400     retlw	0                  	retlw 0x00
001a23   34d7     retlw	0xd7               	retlw 0xd7
001a24   3410     retlw	0x10               	retlw 0x10
001a25   3428     retlw	0x28               	retlw 0x28
001a26   3400     retlw	0                  	retlw 0x00
001a27   34c2     retlw	0xc2               	retlw 0xc2
001a28   3409     retlw	0x9                	retlw 0x09
001a29   3430     retlw	0x30               	retlw 0x30
001a2a   3400     retlw	0                  	retlw 0x00
001a2b   3420     retlw	0x20               	retlw 0x20
001a2c   3400     retlw	0                  	retlw 0x00
001a2d   3464     retlw	0x64               	retlw 0x64
001a2e   3424     retlw	0x24               	retlw 0x24
001a2f   3400     retlw	0                  	retlw 0x00
001a30   3400     retlw	0                  	retlw 0x00
001a31   3400     retlw	0                  	retlw 0x00
001a32   3400     retlw	0                  	retlw 0x00
001a33   3401     retlw	0x1                	retlw 0x01
001a34   3410     retlw	0x10               	retlw 0x10
001a35   3428     retlw	0x28               	retlw 0x28
001a36   3415     retlw	0x15               	retlw 0x15
001a37   34a6     retlw	0xa6               	retlw 0xa6
001a38   3400     retlw	0                  	retlw 0x00
001a39   3400     retlw	0                  	retlw 0x00
001a3a   3424     retlw	0x24               	retlw 0x24
001a3b   3400     retlw	0                  	retlw 0x00
001a3c   3411     retlw	0x11               	retlw 0x11
001a3d   3400     retlw	0                  	retlw 0x00
001a3e   3440     retlw	0x40               	retlw 0x40
001a3f   3466     retlw	0x66               	retlw 0x66
001a40   3409     retlw	0x9                	retlw 0x09
001a41   3430     retlw	0x30               	retlw 0x30
001a42   3440     retlw	0x40               	retlw 0x40
001a43   3420     retlw	0x20               	retlw 0x20
001a44   340e     retlw	0xe                	retlw 0x0e 
001a45   3400     retlw	0                  	retlw 0x00
001a46   3440     retlw	0x40               	retlw 0x40
001a47   34ba     retlw	0xba               	retlw 0xba
001a48   3409     retlw	0x9                	retlw 0x09
001a49   3430     retlw	0x30               	retlw 0x30
001a4a   3440     retlw	0x40               	retlw 0x40
001a4b   3420     retlw	0x20               	retlw 0x20
001a4c   3420     retlw	0x20               	retlw 0x20
001a4d   3400     retlw	0                  	retlw 0x00
001a4e   3400     retlw	0                  	retlw 0x00
001a4f   3400     retlw	0                  	retlw 0x00
001a50   3409     retlw	0x9                	retlw 0x09
001a51   3430     retlw	0x30               	retlw 0x30
001a52   3440     retlw	0x40               	retlw 0x40
001a53   3420     retlw	0x20               	retlw 0x20
001a54   3407     retlw	0x7                	retlw 0x07
001a55   3400     retlw	0                  	retlw 0x00
001a56   3480     retlw	0x80               	retlw 0x80
001a57   34c2     retlw	0xc2               	retlw 0xc2
001a58   3410     retlw	0x10               	retlw 0x10
001a59   3428     retlw	0x28               	retlw 0x28
001a5a   3400     retlw	0                  	retlw 0x00
001a5b   34c2     retlw	0xc2               	retlw 0xc2
001a5c   3409     retlw	0x9                	retlw 0x09
001a5d   3430     retlw	0x30               	retlw 0x30
001a5e   3400     retlw	0                  	retlw 0x00
001a5f   3420     retlw	0x20               	retlw 0x20
001a60   3400     retlw	0                  	retlw 0x00
001a61   3464     retlw	0x64               	retlw 0x64
001a62   3424     retlw	0x24               	retlw 0x24
001a63   3400     retlw	0                  	retlw 0x00
001a64   3400     retlw	0                  	retlw 0x00
001a65   3400     retlw	0                  	retlw 0x00
001a66   3440     retlw	0x40               	retlw 0x40
001a67   3401     retlw	0x1                	retlw 0x01
001a68   3410     retlw	0x10               	retlw 0x10
001a69   3428     retlw	0x28               	retlw 0x28
001a6a   3455     retlw	0x55               	retlw 0x55
001a6b   34a9     retlw	0xa9               	retlw 0xa9
001a6c   3400     retlw	0                  	retlw 0x00
001a6d   3400     retlw	0                  	retlw 0x00
001a6e   3424     retlw	0x24               	retlw 0x24
001a6f   3400     retlw	0                  	retlw 0x00
001a70   3412     retlw	0x12               	retlw 0x12
001a71   3400     retlw	0                  	retlw 0x00
001a72   3480     retlw	0x80               	retlw 0x80
001a73   3414     retlw	0x14               	retlw 0x14
001a74   3409     retlw	0x9                	retlw 0x09
001a75   3430     retlw	0x30               	retlw 0x30
001a76   3440     retlw	0x40               	retlw 0x40
001a77   3420     retlw	0x20               	retlw 0x20
001a78   340e     retlw	0xe                	retlw 0x0e 
001a79   3400     retlw	0                  	retlw 0x00
001a7a   3400     retlw	0                  	retlw 0x00
001a7b   3429     retlw	0x29               	retlw 0x29
001a7c   3409     retlw	0x9                	retlw 0x09
001a7d   3430     retlw	0x30               	retlw 0x30
001a7e   3440     retlw	0x40               	retlw 0x40
001a7f   3420     retlw	0x20               	retlw 0x20
001a80   3420     retlw	0x20               	retlw 0x20
001a81   3400     retlw	0                  	retlw 0x00
001a82   3400     retlw	0                  	retlw 0x00
001a83   3400     retlw	0                  	retlw 0x00
001a84   3409     retlw	0x9                	retlw 0x09
001a85   3430     retlw	0x30               	retlw 0x30
001a86   3440     retlw	0x40               	retlw 0x40
001a87   3420     retlw	0x20               	retlw 0x20
001a88   3407     retlw	0x7                	retlw 0x07
001a89   3400     retlw	0                  	retlw 0x00
001a8a   3440     retlw	0x40               	retlw 0x40
001a8b   34e1     retlw	0xe1               	retlw 0xe1
001a8c   3410     retlw	0x10               	retlw 0x10
001a8d   3428     retlw	0x28               	retlw 0x28
001a8e   3400     retlw	0                  	retlw 0x00
001a8f   34c2     retlw	0xc2               	retlw 0xc2
001a90   3409     retlw	0x9                	retlw 0x09
001a91   3430     retlw	0x30               	retlw 0x30
001a92   3400     retlw	0                  	retlw 0x00
001a93   3420     retlw	0x20               	retlw 0x20
001a94   3400     retlw	0                  	retlw 0x00
001a95   3464     retlw	0x64               	retlw 0x64
001a96   3424     retlw	0x24               	retlw 0x24
001a97   3400     retlw	0                  	retlw 0x00
001a98   3400     retlw	0                  	retlw 0x00
001a99   3400     retlw	0                  	retlw 0x00
001a9a   3480     retlw	0x80               	retlw 0x80
001a9b   3401     retlw	0x1                	retlw 0x01
001a9c   3410     retlw	0x10               	retlw 0x10
001a9d   3428     retlw	0x28               	retlw 0x28
001a9e   3455     retlw	0x55               	retlw 0x55
001a9f   34ac     retlw	0xac               	retlw 0xac
001aa0   3400     retlw	0                  	retlw 0x00
001aa1   3400     retlw	0                  	retlw 0x00
001aa2   3424     retlw	0x24               	retlw 0x24
001aa3   3400     retlw	0                  	retlw 0x00
001aa4   3410     retlw	0x10               	retlw 0x10
001aa5   3400     retlw	0                  	retlw 0x00
001aa6   3400     retlw	0                  	retlw 0x00
001aa7   3400     retlw	0                  	retlw 0x00
001aa8   3480     retlw	0x80               	retlw 0x80
001aa9   34b8     retlw	0xb8               	retlw 0xb8
001aaa   3440     retlw	0x40               	retlw 0x40
001aab   34a0     retlw	0xa0               	retlw 0xa0
001aac   3409     retlw	0x9                	retlw 0x09
001aad   3430     retlw	0x30               	retlw 0x30
001aae   3440     retlw	0x40               	retlw 0x40
001aaf   3420     retlw	0x20               	retlw 0x20
001ab0   3438     retlw	0x38               	retlw 0x38
001ab1   3400     retlw	0                  	retlw 0x00
001ab2   3400     retlw	0                  	retlw 0x00
001ab3   3429     retlw	0x29               	retlw 0x29
001ab4   3409     retlw	0x9                	retlw 0x09
001ab5   3430     retlw	0x30               	retlw 0x30
001ab6   3440     retlw	0x40               	retlw 0x40
001ab7   3420     retlw	0x20               	retlw 0x20
001ab8   3438     retlw	0x38               	retlw 0x38
001ab9   3400     retlw	0                  	retlw 0x00
001aba   3480     retlw	0x80               	retlw 0x80
001abb   3410     retlw	0x10               	retlw 0x10
001abc   3410     retlw	0x10               	retlw 0x10
001abd   3428     retlw	0x28               	retlw 0x28
001abe   3400     retlw	0                  	retlw 0x00
001abf   34c2     retlw	0xc2               	retlw 0xc2
001ac0   3409     retlw	0x9                	retlw 0x09
001ac1   3430     retlw	0x30               	retlw 0x30
001ac2   3400     retlw	0                  	retlw 0x00
001ac3   3420     retlw	0x20               	retlw 0x20
001ac4   3400     retlw	0                  	retlw 0x00
001ac5   3464     retlw	0x64               	retlw 0x64
001ac6   3424     retlw	0x24               	retlw 0x24
001ac7   3400     retlw	0                  	retlw 0x00
001ac8   3400     retlw	0                  	retlw 0x00
001ac9   3400     retlw	0                  	retlw 0x00
001aca   34c0     retlw	0xc0               	retlw 0xc0
001acb   3401     retlw	0x1                	retlw 0x01
001acc   3410     retlw	0x10               	retlw 0x10
001acd   3428     retlw	0x28               	retlw 0x28
001ace   3495     retlw	0x95               	retlw 0x95
001acf   34af     retlw	0xaf               	retlw 0xaf
001ad0   3400     retlw	0                  	retlw 0x00
001ad1   3400     retlw	0                  	retlw 0x00
001ad2   3424     retlw	0x24               	retlw 0x24
001ad3   3400     retlw	0                  	retlw 0x00
001ad4   3418     retlw	0x18               	retlw 0x18
001ad5   3400     retlw	0                  	retlw 0x00
001ad6   3400     retlw	0                  	retlw 0x00
001ad7   3400     retlw	0                  	retlw 0x00
001ad8   3409     retlw	0x9                	retlw 0x09
001ad9   3430     retlw	0x30               	retlw 0x30
001ada   3440     retlw	0x40               	retlw 0x40
001adb   3420     retlw	0x20               	retlw 0x20
001adc   3439     retlw	0x39               	retlw 0x39
001add   3400     retlw	0                  	retlw 0x00
001ade   3400     retlw	0                  	retlw 0x00
001adf   34fc     retlw	0xfc               	retlw 0xfc
001ae0   3409     retlw	0x9                	retlw 0x09
001ae1   3430     retlw	0x30               	retlw 0x30
001ae2   3440     retlw	0x40               	retlw 0x40
001ae3   3420     retlw	0x20               	retlw 0x20
001ae4   3438     retlw	0x38               	retlw 0x38
001ae5   3400     retlw	0                  	retlw 0x00
001ae6   3400     retlw	0                  	retlw 0x00
001ae7   3429     retlw	0x29               	retlw 0x29
001ae8   3409     retlw	0x9                	retlw 0x09
001ae9   3430     retlw	0x30               	retlw 0x30
001aea   3440     retlw	0x40               	retlw 0x40
001aeb   3420     retlw	0x20               	retlw 0x20
001aec   3438     retlw	0x38               	retlw 0x38
001aed   3400     retlw	0                  	retlw 0x00
001aee   3480     retlw	0x80               	retlw 0x80
001aef   3410     retlw	0x10               	retlw 0x10
001af0   3410     retlw	0x10               	retlw 0x10
001af1   3428     retlw	0x28               	retlw 0x28
001af2   3400     retlw	0                  	retlw 0x00
001af3   34c2     retlw	0xc2               	retlw 0xc2
001af4   3409     retlw	0x9                	retlw 0x09
001af5   3430     retlw	0x30               	retlw 0x30
001af6   3400     retlw	0                  	retlw 0x00
001af7   3420     retlw	0x20               	retlw 0x20
001af8   3400     retlw	0                  	retlw 0x00
001af9   3464     retlw	0x64               	retlw 0x64
001afa   3424     retlw	0x24               	retlw 0x24
001afb   3400     retlw	0                  	retlw 0x00
001afc   3400     retlw	0                  	retlw 0x00
001afd   3400     retlw	0                  	retlw 0x00
001afe   3400     retlw	0                  	retlw 0x00
001aff   3402     retlw	0x2                	retlw 0x02
001b00   3410     retlw	0x10               	retlw 0x10
001b01   3428     retlw	0x28               	retlw 0x28
001b02   34d5     retlw	0xd5               	retlw 0xd5
001b03   34b2     retlw	0xb2               	retlw 0xb2
001b04   3401     retlw	0x1                	retlw 0x01
001b05   3400     retlw	0                  	retlw 0x00
001b06   3410     retlw	0x10               	retlw 0x10
001b07   34e0     retlw	0xe0               	retlw 0xe0
001b08   3415     retlw	0x15               	retlw 0x15
001b09   3400     retlw	0                  	retlw 0x00
001b0a   3400     retlw	0                  	retlw 0x00
001b0b   3458     retlw	0x58               	retlw 0x58
001b0c   3409     retlw	0x9                	retlw 0x09
001b0d   3430     retlw	0x30               	retlw 0x30
001b0e   3440     retlw	0x40               	retlw 0x40
001b0f   3420     retlw	0x20               	retlw 0x20
001b10   3438     retlw	0x38               	retlw 0x38
001b11   3400     retlw	0                  	retlw 0x00
001b12   34c0     retlw	0xc0               	retlw 0xc0
001b13   3488     retlw	0x88               	retlw 0x88
001b14   3409     retlw	0x9                	retlw 0x09
001b15   3430     retlw	0x30               	retlw 0x30
001b16   3440     retlw	0x40               	retlw 0x40
001b17   3420     retlw	0x20               	retlw 0x20
001b18   3438     retlw	0x38               	retlw 0x38
001b19   3400     retlw	0                  	retlw 0x00
001b1a   3440     retlw	0x40               	retlw 0x40
001b1b   3433     retlw	0x33               	retlw 0x33
001b1c   3409     retlw	0x9                	retlw 0x09
001b1d   3430     retlw	0x30               	retlw 0x30
001b1e   3440     retlw	0x40               	retlw 0x40
001b1f   3420     retlw	0x20               	retlw 0x20
001b20   3438     retlw	0x38               	retlw 0x38
001b21   3400     retlw	0                  	retlw 0x00
001b22   3480     retlw	0x80               	retlw 0x80
001b23   3410     retlw	0x10               	retlw 0x10
001b24   3410     retlw	0x10               	retlw 0x10
001b25   3428     retlw	0x28               	retlw 0x28
001b26   3400     retlw	0                  	retlw 0x00
001b27   34c2     retlw	0xc2               	retlw 0xc2
001b28   3409     retlw	0x9                	retlw 0x09
001b29   3430     retlw	0x30               	retlw 0x30
001b2a   3400     retlw	0                  	retlw 0x00
001b2b   3420     retlw	0x20               	retlw 0x20
001b2c   3400     retlw	0                  	retlw 0x00
001b2d   3464     retlw	0x64               	retlw 0x64
001b2e   3424     retlw	0x24               	retlw 0x24
001b2f   3400     retlw	0                  	retlw 0x00
001b30   3400     retlw	0                  	retlw 0x00
001b31   3400     retlw	0                  	retlw 0x00
001b32   3440     retlw	0x40               	retlw 0x40
001b33   3402     retlw	0x2                	retlw 0x02
001b34   3410     retlw	0x10               	retlw 0x10
001b35   3428     retlw	0x28               	retlw 0x28
001b36   3415     retlw	0x15               	retlw 0x15
001b37   34b6     retlw	0xb6               	retlw 0xb6
001b38   3400     retlw	0                  	retlw 0x00
001b39   3400     retlw	0                  	retlw 0x00
001b3a   3424     retlw	0x24               	retlw 0x24
001b3b   3400     retlw	0                  	retlw 0x00
001b3c   3419     retlw	0x19               	retlw 0x19
001b3d   3400     retlw	0                  	retlw 0x00
001b3e   3400     retlw	0                  	retlw 0x00
001b3f   34d3     retlw	0xd3               	retlw 0xd3
001b40   3409     retlw	0x9                	retlw 0x09
001b41   3430     retlw	0x30               	retlw 0x30
001b42   3440     retlw	0x40               	retlw 0x40
001b43   3420     retlw	0x20               	retlw 0x20
001b44   3406     retlw	0x6                	retlw 0x06
001b45   3400     retlw	0                  	retlw 0x00
001b46   3400     retlw	0                  	retlw 0x00
001b47   342d     retlw	0x2d               	retlw 0x2d
001b48   3409     retlw	0x9                	retlw 0x09
001b49   3430     retlw	0x30               	retlw 0x30
001b4a   3440     retlw	0x40               	retlw 0x40
001b4b   3420     retlw	0x20               	retlw 0x20
001b4c   3438     retlw	0x38               	retlw 0x38
001b4d   3400     retlw	0                  	retlw 0x00
001b4e   3440     retlw	0x40               	retlw 0x40
001b4f   3408     retlw	0x8                	retlw 0x08
001b50   3409     retlw	0x9                	retlw 0x09
001b51   3430     retlw	0x30               	retlw 0x30
001b52   3440     retlw	0x40               	retlw 0x40
001b53   3420     retlw	0x20               	retlw 0x20
001b54   3438     retlw	0x38               	retlw 0x38
001b55   3400     retlw	0                  	retlw 0x00
001b56   3480     retlw	0x80               	retlw 0x80
001b57   3410     retlw	0x10               	retlw 0x10
001b58   3410     retlw	0x10               	retlw 0x10
001b59   3428     retlw	0x28               	retlw 0x28
001b5a   3400     retlw	0                  	retlw 0x00
001b5b   34c2     retlw	0xc2               	retlw 0xc2
001b5c   3409     retlw	0x9                	retlw 0x09
001b5d   3430     retlw	0x30               	retlw 0x30
001b5e   3400     retlw	0                  	retlw 0x00
001b5f   3420     retlw	0x20               	retlw 0x20
001b60   3400     retlw	0                  	retlw 0x00
001b61   3464     retlw	0x64               	retlw 0x64
001b62   3424     retlw	0x24               	retlw 0x24
001b63   3400     retlw	0                  	retlw 0x00
001b64   3400     retlw	0                  	retlw 0x00
001b65   3400     retlw	0                  	retlw 0x00
001b66   3480     retlw	0x80               	retlw 0x80
001b67   3402     retlw	0x2                	retlw 0x02
001b68   3410     retlw	0x10               	retlw 0x10
001b69   3428     retlw	0x28               	retlw 0x28
001b6a   3415     retlw	0x15               	retlw 0x15
001b6b   34b9     retlw	0xb9               	retlw 0xb9
001b6c   3400     retlw	0                  	retlw 0x00
001b6d   3400     retlw	0                  	retlw 0x00
001b6e   3424     retlw	0x24               	retlw 0x24
001b6f   3400     retlw	0                  	retlw 0x00
001b70   3410     retlw	0x10               	retlw 0x10
001b71   3400     retlw	0                  	retlw 0x00
001b72   3400     retlw	0                  	retlw 0x00
001b73   3400     retlw	0                  	retlw 0x00
001b74   3480     retlw	0x80               	retlw 0x80
001b75   34b8     retlw	0xb8               	retlw 0xb8
001b76   3440     retlw	0x40               	retlw 0x40
001b77   34a0     retlw	0xa0               	retlw 0xa0
001b78   3409     retlw	0x9                	retlw 0x09
001b79   3430     retlw	0x30               	retlw 0x30
001b7a   3440     retlw	0x40               	retlw 0x40
001b7b   3420     retlw	0x20               	retlw 0x20
001b7c   3438     retlw	0x38               	retlw 0x38
001b7d   3400     retlw	0                  	retlw 0x00
001b7e   3480     retlw	0x80               	retlw 0x80
001b7f   3466     retlw	0x66               	retlw 0x66
001b80   3409     retlw	0x9                	retlw 0x09
001b81   3430     retlw	0x30               	retlw 0x30
001b82   3440     retlw	0x40               	retlw 0x40
001b83   3420     retlw	0x20               	retlw 0x20
001b84   3438     retlw	0x38               	retlw 0x38
001b85   3400     retlw	0                  	retlw 0x00
001b86   3400     retlw	0                  	retlw 0x00
001b87   3429     retlw	0x29               	retlw 0x29
001b88   3410     retlw	0x10               	retlw 0x10
001b89   3428     retlw	0x28               	retlw 0x28
001b8a   3400     retlw	0                  	retlw 0x00
001b8b   34c2     retlw	0xc2               	retlw 0xc2
001b8c   3409     retlw	0x9                	retlw 0x09
001b8d   3430     retlw	0x30               	retlw 0x30
001b8e   3400     retlw	0                  	retlw 0x00
001b8f   3420     retlw	0x20               	retlw 0x20
001b90   3400     retlw	0                  	retlw 0x00
001b91   3464     retlw	0x64               	retlw 0x64
001b92   3424     retlw	0x24               	retlw 0x24
001b93   3400     retlw	0                  	retlw 0x00
001b94   3400     retlw	0                  	retlw 0x00
001b95   3400     retlw	0                  	retlw 0x00
001b96   34c0     retlw	0xc0               	retlw 0xc0
001b97   3402     retlw	0x2                	retlw 0x02
001b98   3410     retlw	0x10               	retlw 0x10
001b99   3428     retlw	0x28               	retlw 0x28
001b9a   3455     retlw	0x55               	retlw 0x55
001b9b   34bc     retlw	0xbc               	retlw 0xbc
001b9c   3400     retlw	0                  	retlw 0x00
001b9d   3400     retlw	0                  	retlw 0x00
001b9e   3424     retlw	0x24               	retlw 0x24
001b9f   3400     retlw	0                  	retlw 0x00
001ba0   3418     retlw	0x18               	retlw 0x18
001ba1   3400     retlw	0                  	retlw 0x00
001ba2   3400     retlw	0                  	retlw 0x00
001ba3   3400     retlw	0                  	retlw 0x00
001ba4   3409     retlw	0x9                	retlw 0x09
001ba5   3430     retlw	0x30               	retlw 0x30
001ba6   3440     retlw	0x40               	retlw 0x40
001ba7   3420     retlw	0x20               	retlw 0x20
001ba8   3439     retlw	0x39               	retlw 0x39
001ba9   3400     retlw	0                  	retlw 0x00
001baa   3400     retlw	0                  	retlw 0x00
001bab   34fc     retlw	0xfc               	retlw 0xfc
001bac   3409     retlw	0x9                	retlw 0x09
001bad   3430     retlw	0x30               	retlw 0x30
001bae   3440     retlw	0x40               	retlw 0x40
001baf   3420     retlw	0x20               	retlw 0x20
001bb0   3438     retlw	0x38               	retlw 0x38
001bb1   3400     retlw	0                  	retlw 0x00
001bb2   3400     retlw	0                  	retlw 0x00
001bb3   347b     retlw	0x7b               	retlw 0x7b
001bb4   3409     retlw	0x9                	retlw 0x09
001bb5   3430     retlw	0x30               	retlw 0x30
001bb6   3440     retlw	0x40               	retlw 0x40
001bb7   3420     retlw	0x20               	retlw 0x20
001bb8   3438     retlw	0x38               	retlw 0x38
001bb9   3400     retlw	0                  	retlw 0x00
001bba   3440     retlw	0x40               	retlw 0x40
001bbb   3433     retlw	0x33               	retlw 0x33
001bbc   3410     retlw	0x10               	retlw 0x10
001bbd   3428     retlw	0x28               	retlw 0x28
001bbe   3400     retlw	0                  	retlw 0x00
001bbf   34c2     retlw	0xc2               	retlw 0xc2
001bc0   3409     retlw	0x9                	retlw 0x09
001bc1   3430     retlw	0x30               	retlw 0x30
001bc2   3400     retlw	0                  	retlw 0x00
001bc3   3420     retlw	0x20               	retlw 0x20
001bc4   3400     retlw	0                  	retlw 0x00
001bc5   3464     retlw	0x64               	retlw 0x64
001bc6   3424     retlw	0x24               	retlw 0x24
001bc7   3400     retlw	0                  	retlw 0x00
001bc8   3400     retlw	0                  	retlw 0x00
001bc9   3400     retlw	0                  	retlw 0x00
001bca   3400     retlw	0                  	retlw 0x00
001bcb   3403     retlw	0x3                	retlw 0x03
001bcc   3410     retlw	0x10               	retlw 0x10
001bcd   3428     retlw	0x28               	retlw 0x28
001bce   3495     retlw	0x95               	retlw 0x95
001bcf   34bf     retlw	0xbf               	retlw 0xbf
001bd0   3400     retlw	0                  	retlw 0x00
001bd1   3400     retlw	0                  	retlw 0x00
001bd2   3424     retlw	0x24               	retlw 0x24
001bd3   3400     retlw	0                  	retlw 0x00
001bd4   3415     retlw	0x15               	retlw 0x15
001bd5   3400     retlw	0                  	retlw 0x00
001bd6   3400     retlw	0                  	retlw 0x00
001bd7   3458     retlw	0x58               	retlw 0x58
001bd8   3409     retlw	0x9                	retlw 0x09
001bd9   3430     retlw	0x30               	retlw 0x30
001bda   3440     retlw	0x40               	retlw 0x40
001bdb   3420     retlw	0x20               	retlw 0x20
001bdc   3438     retlw	0x38               	retlw 0x38
001bdd   3400     retlw	0                  	retlw 0x00
001bde   34c0     retlw	0xc0               	retlw 0xc0
001bdf   3488     retlw	0x88               	retlw 0x88
001be0   3409     retlw	0x9                	retlw 0x09
001be1   3430     retlw	0x30               	retlw 0x30
001be2   3440     retlw	0x40               	retlw 0x40
001be3   3420     retlw	0x20               	retlw 0x20
001be4   3438     retlw	0x38               	retlw 0x38
001be5   3400     retlw	0                  	retlw 0x00
001be6   3480     retlw	0x80               	retlw 0x80
001be7   3466     retlw	0x66               	retlw 0x66
001be8   3409     retlw	0x9                	retlw 0x09
001be9   3430     retlw	0x30               	retlw 0x30
001bea   3440     retlw	0x40               	retlw 0x40
001beb   3420     retlw	0x20               	retlw 0x20
001bec   3438     retlw	0x38               	retlw 0x38
001bed   3400     retlw	0                  	retlw 0x00
001bee   34c0     retlw	0xc0               	retlw 0xc0
001bef   3424     retlw	0x24               	retlw 0x24
001bf0   3410     retlw	0x10               	retlw 0x10
001bf1   3428     retlw	0x28               	retlw 0x28
001bf2   3400     retlw	0                  	retlw 0x00
001bf3   34c2     retlw	0xc2               	retlw 0xc2
001bf4   3409     retlw	0x9                	retlw 0x09
001bf5   3430     retlw	0x30               	retlw 0x30
001bf6   3400     retlw	0                  	retlw 0x00
001bf7   3420     retlw	0x20               	retlw 0x20
001bf8   3400     retlw	0                  	retlw 0x00
001bf9   3464     retlw	0x64               	retlw 0x64
001bfa   3424     retlw	0x24               	retlw 0x24
001bfb   3400     retlw	0                  	retlw 0x00
001bfc   3410     retlw	0x10               	retlw 0x10
001bfd   3400     retlw	0                  	retlw 0x00
001bfe   3400     retlw	0                  	retlw 0x00
001bff   3400     retlw	0                  	retlw 0x00
001c00   3410     retlw	0x10               	retlw 0x10
001c01   3428     retlw	0x28               	retlw 0x28
001c02   3415     retlw	0x15               	retlw 0x15
001c03   34c2     retlw	0xc2               	retlw 0xc2
001c04   3400     retlw	0                  	retlw 0x00
001c05   3400     retlw	0                  	retlw 0x00
001c06   3424     retlw	0x24               	retlw 0x24
001c07   3400     retlw	0                  	retlw 0x00
001c08   3409     retlw	0x9                	retlw 0x09
001c09   3430     retlw	0x30               	retlw 0x30
001c0a   3440     retlw	0x40               	retlw 0x40
001c0b   3420     retlw	0x20               	retlw 0x20
001c0c   3409     retlw	0x9                	retlw 0x09
001c0d   3430     retlw	0x30               	retlw 0x30
001c0e   3440     retlw	0x40               	retlw 0x40
001c0f   3420     retlw	0x20               	retlw 0x20
001c10   3438     retlw	0x38               	retlw 0x38
001c11   3400     retlw	0                  	retlw 0x00
001c12   3480     retlw	0x80               	retlw 0x80
001c13   3414     retlw	0x14               	retlw 0x14
001c14   3409     retlw	0x9                	retlw 0x09
001c15   3430     retlw	0x30               	retlw 0x30
001c16   3440     retlw	0x40               	retlw 0x40
001c17   3420     retlw	0x20               	retlw 0x20
001c18   3438     retlw	0x38               	retlw 0x38
001c19   3400     retlw	0                  	retlw 0x00
001c1a   3400     retlw	0                  	retlw 0x00
001c1b   3452     retlw	0x52               	retlw 0x52
001c1c   3409     retlw	0x9                	retlw 0x09
001c1d   3430     retlw	0x30               	retlw 0x30
001c1e   3400     retlw	0                  	retlw 0x00
001c1f   3420     retlw	0x20               	retlw 0x20
001c20   3401     retlw	0x1                	retlw 0x01
001c21   3400     retlw	0                  	retlw 0x00
001c22   3410     retlw	0x10               	retlw 0x10
001c23   34e1     retlw	0xe1               	retlw 0xe1
001c24   3400     retlw	0                  	retlw 0x00
001c25   3400     retlw	0                  	retlw 0x00
001c26   3400     retlw	0                  	retlw 0x00
001c27   3400     retlw	0                  	retlw 0x00
001c28   3400     retlw	0                  	retlw 0x00
001c29   3400     retlw	0                  	retlw 0x00
001c2a   3401     retlw	0x1                	retlw 0x01
001c2b   3401     retlw	0x1                	retlw 0x01
001c2c   3412     retlw	0x12               	retlw 0x12
001c2d   3464     retlw	0x64               	retlw 0x64
001c2e   3400     retlw	0                  	retlw 0x00
001c2f   34a0     retlw	0xa0               	retlw 0xa0
001c30   3400     retlw	0                  	retlw 0x00
001c31   3400     retlw	0                  	retlw 0x00
001c32   3440     retlw	0x40               	retlw 0x40
001c33   3400     retlw	0                  	retlw 0x00
001c34   3410     retlw	0x10               	retlw 0x10
001c35   3428     retlw	0x28               	retlw 0x28
001c36   3419     retlw	0x19               	retlw 0x19
001c37   34c4     retlw	0xc4               	retlw 0xc4
001c38   3404     retlw	0x4                	retlw 0x04
001c39   3400     retlw	0                  	retlw 0x00
001c3a   3490     retlw	0x90               	retlw 0x90
001c3b   34e5     retlw	0xe5               	retlw 0xe5
001c3c   3490     retlw	0x90               	retlw 0x90
001c3d   3440     retlw	0x40               	retlw 0x40
001c3e   3424     retlw	0x24               	retlw 0x24
001c3f   3400     retlw	0                  	retlw 0x00
001c40   3400     retlw	0                  	retlw 0x00
001c41   3438     retlw	0x38               	retlw 0x38
001c42   3424     retlw	0x24               	retlw 0x24
001c43   3400     retlw	0                  	retlw 0x00
001c44   34f3     retlw	0xf3               	retlw 0xf3
001c45   3436     retlw	0x36               	retlw 0x36
001c46   3424     retlw	0x24               	retlw 0x24
001c47   3440     retlw	0x40               	retlw 0x40
001c48   34f3     retlw	0xf3               	retlw 0xf3
001c49   3436     retlw	0x36               	retlw 0x36
001c4a   340e     retlw	0xe                	retlw 0x0e 
001c4b   34d8     retlw	0xd8               	retlw 0xd8
001c4c   34f1     retlw	0xf1               	retlw 0xf1
001c4d   3436     retlw	0x36               	retlw 0x36
001c4e   3410     retlw	0x10               	retlw 0x10
001c4f   3458     retlw	0x58               	retlw 0x58
001c50   34f0     retlw	0xf0               	retlw 0xf0
001c51   3436     retlw	0x36               	retlw 0x36
001c52   3401     retlw	0x1                	retlw 0x01
001c53   3418     retlw	0x18               	retlw 0x18
001c54   3405     retlw	0x5                	retlw 0x05
001c55   3434     retlw	0x34               	retlw 0x34
001c56   3414     retlw	0x14               	retlw 0x14
001c57   3490     retlw	0x90               	retlw 0x90
001c58   34e3     retlw	0xe3               	retlw 0xe3
001c59   3436     retlw	0x36               	retlw 0x36
001c5a   3424     retlw	0x24               	retlw 0x24
001c5b   3400     retlw	0                  	retlw 0x00
001c5c   3400     retlw	0                  	retlw 0x00
001c5d   3420     retlw	0x20               	retlw 0x20
001c5e   3400     retlw	0                  	retlw 0x00
001c5f   3400     retlw	0                  	retlw 0x00
001c60   34f2     retlw	0xf2               	retlw 0xf2
001c61   3436     retlw	0x36               	retlw 0x36
001c62   3415     retlw	0x15               	retlw 0x15
001c63   3498     retlw	0x98               	retlw 0x98
001c64   3412     retlw	0x12               	retlw 0x12
001c65   343e     retlw	0x3e               	retlw 0x3e
001c66   3417     retlw	0x17               	retlw 0x17
001c67   34b8     retlw	0xb8               	retlw 0xb8
001c68   3412     retlw	0x12               	retlw 0x12
001c69   343e     retlw	0x3e               	retlw 0x3e
001c6a   3415     retlw	0x15               	retlw 0x15
001c6b   3438     retlw	0x38               	retlw 0x38
001c6c   3414     retlw	0x14               	retlw 0x14
001c6d   343e     retlw	0x3e               	retlw 0x3e
001c6e   3411     retlw	0x11               	retlw 0x11
001c6f   3438     retlw	0x38               	retlw 0x38
001c70   3414     retlw	0x14               	retlw 0x14
001c71   343e     retlw	0x3e               	retlw 0x3e
001c72   3413     retlw	0x13               	retlw 0x13
001c73   34b8     retlw	0xb8               	retlw 0xb8
001c74   3415     retlw	0x15               	retlw 0x15
001c75   343e     retlw	0x3e               	retlw 0x3e
001c76   340d     retlw	0xd                	retlw 0x0d 
001c77   3438     retlw	0x38               	retlw 0x38
001c78   3410     retlw	0x10               	retlw 0x10
001c79   343e     retlw	0x3e               	retlw 0x3e
001c7a   3401     retlw	0x1                	retlw 0x01
001c7b   3438     retlw	0x38               	retlw 0x38
001c7c   3410     retlw	0x10               	retlw 0x10
001c7d   343e     retlw	0x3e               	retlw 0x3e
001c7e   3403     retlw	0x3                	retlw 0x03
001c7f   34b8     retlw	0xb8               	retlw 0xb8
001c80   3411     retlw	0x11               	retlw 0x11
001c81   343e     retlw	0x3e               	retlw 0x3e
001c82   3405     retlw	0x5                	retlw 0x05
001c83   3438     retlw	0x38               	retlw 0x38
001c84   3411     retlw	0x11               	retlw 0x11
001c85   343e     retlw	0x3e               	retlw 0x3e
001c86   3407     retlw	0x7                	retlw 0x07
001c87   34b8     retlw	0xb8               	retlw 0xb8
001c88   3403     retlw	0x3                	retlw 0x03
001c89   343e     retlw	0x3e               	retlw 0x3e
001c8a   340e     retlw	0xe                	retlw 0x0e 
001c8b   34f8     retlw	0xf8               	retlw 0xf8
001c8c   3400     retlw	0                  	retlw 0x00
001c8d   34f4     retlw	0xf4               	retlw 0xf4
001c8e   3497     retlw	0x97               	retlw 0x97
001c8f   3444     retlw	0x44               	retlw 0x44
001c90   3400     retlw	0                  	retlw 0x00
001c91   3400     retlw	0                  	retlw 0x00
001c92   340a     retlw	0xa                	retlw 0x0a 
001c93   3400     retlw	0                  	retlw 0x00
001c94   3433     retlw	0x33               	retlw 0x33
001c95   3437     retlw	0x37               	retlw 0x37
001c96   3424     retlw	0x24               	retlw 0x24
001c97   3400     retlw	0                  	retlw 0x00
001c98   3424     retlw	0x24               	retlw 0x24
001c99   3437     retlw	0x37               	retlw 0x37
001c9a   3424     retlw	0x24               	retlw 0x24
001c9b   3480     retlw	0x80               	retlw 0x80
001c9c   3401     retlw	0x1                	retlw 0x01
001c9d   3400     retlw	0                  	retlw 0x00
001c9e   3414     retlw	0x14               	retlw 0x14
001c9f   34e0     retlw	0xe0               	retlw 0xe0
001ca0   3420     retlw	0x20               	retlw 0x20
001ca1   3400     retlw	0                  	retlw 0x00
001ca2   3415     retlw	0x15               	retlw 0x15
001ca3   3401     retlw	0x1                	retlw 0x01
001ca4   3490     retlw	0x90               	retlw 0x90
001ca5   3440     retlw	0x40               	retlw 0x40
001ca6   34c5     retlw	0xc5               	retlw 0xc5
001ca7   341f     retlw	0x1f               	retlw 0x1f
001ca8   3410     retlw	0x10               	retlw 0x10
001ca9   3424     retlw	0x24               	retlw 0x24
001caa   3440     retlw	0x40               	retlw 0x40
001cab   34d0     retlw	0xd0               	retlw 0xd0
001cac   3420     retlw	0x20               	retlw 0x20
001cad   3400     retlw	0                  	retlw 0x00
001cae   3493     retlw	0x93               	retlw 0x93
001caf   3400     retlw	0                  	retlw 0x00
001cb0   348e     retlw	0x8e               	retlw 0x8e 
001cb1   34bf     retlw	0xbf               	retlw 0xbf
001cb2   3404     retlw	0x4                	retlw 0x04
001cb3   3400     retlw	0                  	retlw 0x00
001cb4   3448     retlw	0x48               	retlw 0x48
001cb5   34f1     retlw	0xf1               	retlw 0xf1
001cb6   3424     retlw	0x24               	retlw 0x24
001cb7   3400     retlw	0                  	retlw 0x00
001cb8   3487     retlw	0x87               	retlw 0x87
001cb9   34bd     retlw	0xbd               	retlw 0xbd
001cba   3448     retlw	0x48               	retlw 0x48
001cbb   34ac     retlw	0xac               	retlw 0xac
001cbc   3409     retlw	0x9                	retlw 0x09
001cbd   34fe     retlw	0xfe               	retlw 0xfe
001cbe   3449     retlw	0x49               	retlw 0x49
001cbf   3428     retlw	0x28               	retlw 0x28
001cc0   3407     retlw	0x7                	retlw 0x07
001cc1   3452     retlw	0x52               	retlw 0x52
001cc2   3448     retlw	0x48               	retlw 0x48
001cc3   3429     retlw	0x29               	retlw 0x29
001cc4   3407     retlw	0x7                	retlw 0x07
001cc5   3452     retlw	0x52               	retlw 0x52
001cc6   344c     retlw	0x4c               	retlw 0x4c
001cc7   3429     retlw	0x29               	retlw 0x29
001cc8   34d6     retlw	0xd6               	retlw 0xd6
001cc9   3458     retlw	0x58               	retlw 0x58
001cca   3485     retlw	0x85               	retlw 0x85
001ccb   341c     retlw	0x1c               	retlw 0x1c
001ccc   34de     retlw	0xde               	retlw 0xde 
001ccd   3458     retlw	0x58               	retlw 0x58
001cce   3445     retlw	0x45               	retlw 0x45
001ccf   341c     retlw	0x1c               	retlw 0x1c
001cd0   34be     retlw	0xbe               	retlw 0xbe 
001cd1   3446     retlw	0x46               	retlw 0x46
001cd2   3462     retlw	0x62               	retlw 0x62
001cd3   341f     retlw	0x1f               	retlw 0x1f
001cd4   34d2     retlw	0xd2               	retlw 0xd2
001cd5   344f     retlw	0x4f               	retlw 0x4f
001cd6   3404     retlw	0x4                	retlw 0x04
001cd7   3492     retlw	0x92               	retlw 0x92
001cd8   34c2     retlw	0xc2               	retlw 0xc2
001cd9   344c     retlw	0x4c               	retlw 0x4c
001cda   3424     retlw	0x24               	retlw 0x24
001cdb   3400     retlw	0                  	retlw 0x00
001cdc   34c6     retlw	0xc6               	retlw 0xc6
001cdd   344c     retlw	0x4c               	retlw 0x4c
001cde   3424     retlw	0x24               	retlw 0x24
001cdf   3400     retlw	0                  	retlw 0x00
001ce0   34ea     retlw	0xea               	retlw 0xea 
001ce1   34f1     retlw	0xf1               	retlw 0xf1
001ce2   3443     retlw	0x43               	retlw 0x43
001ce3   343c     retlw	0x3c               	retlw 0x3c
001ce4   34e2     retlw	0xe2               	retlw 0xe2
001ce5   344d     retlw	0x4d               	retlw 0x4d
001ce6   3421     retlw	0x21               	retlw 0x21
001ce7   343c     retlw	0x3c               	retlw 0x3c
001ce8   3486     retlw	0x86               	retlw 0x86
001ce9   344c     retlw	0x4c               	retlw 0x4c
001cea   3445     retlw	0x45               	retlw 0x45
001ceb   341c     retlw	0x1c               	retlw 0x1c
001cec   3410     retlw	0x10               	retlw 0x10
001ced   343f     retlw	0x3f               	retlw 0x3f
001cee   3424     retlw	0x24               	retlw 0x24
001cef   3440     retlw	0x40               	retlw 0x40
001cf0   3410     retlw	0x10               	retlw 0x10
001cf1   3428     retlw	0x28               	retlw 0x28
001cf2   3452     retlw	0x52               	retlw 0x52
001cf3   34d0     retlw	0xd0               	retlw 0xd0
001cf4   34d8     retlw	0xd8               	retlw 0xd8
001cf5   343f     retlw	0x3f               	retlw 0x3f
001cf6   3424     retlw	0x24               	retlw 0x24
001cf7   3400     retlw	0                  	retlw 0x00
001cf8   3410     retlw	0x10               	retlw 0x10
001cf9   3428     retlw	0x28               	retlw 0x28
001cfa   3454     retlw	0x54               	retlw 0x54
001cfb   34d0     retlw	0xd0               	retlw 0xd0
001cfc   341f     retlw	0x1f               	retlw 0x1f 
001cfd   3400     retlw	0                  	retlw 0x00
001cfe   34c3     retlw	0xc3               	retlw 0xc3
001cff   34ff     retlw	0xff               	retlw 0xff
001d00   34e0     retlw	0xe0               	retlw 0xe0
001d01   340f     retlw	0xf                	retlw 0x0f
001d02   3403     retlw	0x3                	retlw 0x03
001d03   3400     retlw	0                  	retlw 0x00
001d04   3480     retlw	0x80               	retlw 0x80
001d05   3438     retlw	0x38               	retlw 0x38
001d06   3424     retlw	0x24               	retlw 0x24
001d07   34c0     retlw	0xc0               	retlw 0xc0
001d08   34f3     retlw	0xf3               	retlw 0xf3
001d09   3437     retlw	0x37               	retlw 0x37
001d0a   3424     retlw	0x24               	retlw 0x24
001d0b   3400     retlw	0                  	retlw 0x00
001d0c   3404     retlw	0x4                	retlw 0x04
001d0d   343f     retlw	0x3f               	retlw 0x3f
001d0e   3424     retlw	0x24               	retlw 0x24
001d0f   3480     retlw	0x80               	retlw 0x80
001d10   34f3     retlw	0xf3               	retlw 0xf3
001d11   3436     retlw	0x36               	retlw 0x36
001d12   340e     retlw	0xe                	retlw 0x0e 
001d13   34d8     retlw	0xd8               	retlw 0xd8
001d14   34f1     retlw	0xf1               	retlw 0xf1
001d15   3436     retlw	0x36               	retlw 0x36
001d16   3407     retlw	0x7                	retlw 0x07
001d17   3498     retlw	0x98               	retlw 0x98
001d18   34f1     retlw	0xf1               	retlw 0xf1
001d19   3436     retlw	0x36               	retlw 0x36
001d1a   3405     retlw	0x5                	retlw 0x05
001d1b   3418     retlw	0x18               	retlw 0x18
001d1c   34f0     retlw	0xf0               	retlw 0xf0
001d1d   3436     retlw	0x36               	retlw 0x36
001d1e   3403     retlw	0x3                	retlw 0x03
001d1f   3498     retlw	0x98               	retlw 0x98
001d20   34f0     retlw	0xf0               	retlw 0xf0
001d21   3436     retlw	0x36               	retlw 0x36
001d22   3401     retlw	0x1                	retlw 0x01
001d23   3418     retlw	0x18               	retlw 0x18
001d24   34f5     retlw	0xf5               	retlw 0xf5
001d25   3436     retlw	0x36               	retlw 0x36
001d26   340d     retlw	0xd                	retlw 0x0d 
001d27   3418     retlw	0x18               	retlw 0x18
001d28   34f4     retlw	0xf4               	retlw 0xf4
001d29   3436     retlw	0x36               	retlw 0x36
001d2a   3413     retlw	0x13               	retlw 0x13
001d2b   3498     retlw	0x98               	retlw 0x98
001d2c   34f4     retlw	0xf4               	retlw 0xf4
001d2d   3436     retlw	0x36               	retlw 0x36
001d2e   3411     retlw	0x11               	retlw 0x11
001d2f   3418     retlw	0x18               	retlw 0x18
001d30   34f2     retlw	0xf2               	retlw 0xf2
001d31   3436     retlw	0x36               	retlw 0x36
001d32   3415     retlw	0x15               	retlw 0x15
001d33   3418     retlw	0x18               	retlw 0x18
001d34   3400     retlw	0                  	retlw 0x00
001d35   3420     retlw	0x20               	retlw 0x20
001d36   3400     retlw	0                  	retlw 0x00
001d37   3400     retlw	0                  	retlw 0x00
001d38   34f2     retlw	0xf2               	retlw 0xf2
001d39   3436     retlw	0x36               	retlw 0x36
001d3a   3417     retlw	0x17               	retlw 0x17
001d3b   3498     retlw	0x98               	retlw 0x98
001d3c   3412     retlw	0x12               	retlw 0x12
001d3d   343e     retlw	0x3e               	retlw 0x3e
001d3e   3417     retlw	0x17               	retlw 0x17
001d3f   34b8     retlw	0xb8               	retlw 0xb8
001d40   3412     retlw	0x12               	retlw 0x12
001d41   343e     retlw	0x3e               	retlw 0x3e
001d42   3415     retlw	0x15               	retlw 0x15
001d43   3438     retlw	0x38               	retlw 0x38
001d44   3414     retlw	0x14               	retlw 0x14
001d45   343e     retlw	0x3e               	retlw 0x3e
001d46   3411     retlw	0x11               	retlw 0x11
001d47   3438     retlw	0x38               	retlw 0x38
001d48   3414     retlw	0x14               	retlw 0x14
001d49   343e     retlw	0x3e               	retlw 0x3e
001d4a   3413     retlw	0x13               	retlw 0x13
001d4b   34b8     retlw	0xb8               	retlw 0xb8
001d4c   3415     retlw	0x15               	retlw 0x15
001d4d   343e     retlw	0x3e               	retlw 0x3e
001d4e   340d     retlw	0xd                	retlw 0x0d 
001d4f   3438     retlw	0x38               	retlw 0x38
001d50   3410     retlw	0x10               	retlw 0x10
001d51   343e     retlw	0x3e               	retlw 0x3e
001d52   3401     retlw	0x1                	retlw 0x01
001d53   3438     retlw	0x38               	retlw 0x38
001d54   3410     retlw	0x10               	retlw 0x10
001d55   343e     retlw	0x3e               	retlw 0x3e
001d56   3403     retlw	0x3                	retlw 0x03
001d57   34b8     retlw	0xb8               	retlw 0xb8
001d58   3411     retlw	0x11               	retlw 0x11
001d59   343e     retlw	0x3e               	retlw 0x3e
001d5a   3405     retlw	0x5                	retlw 0x05
001d5b   3438     retlw	0x38               	retlw 0x38
001d5c   3411     retlw	0x11               	retlw 0x11
001d5d   343e     retlw	0x3e               	retlw 0x3e
001d5e   3407     retlw	0x7                	retlw 0x07
001d5f   34b8     retlw	0xb8               	retlw 0xb8
001d60   3413     retlw	0x13               	retlw 0x13
001d61   343e     retlw	0x3e               	retlw 0x3e
001d62   340e     retlw	0xe                	retlw 0x0e 
001d63   34f8     retlw	0xf8               	retlw 0xf8
001d64   3486     retlw	0x86               	retlw 0x86
001d65   34bd     retlw	0xbd               	retlw 0xbd
001d66   3497     retlw	0x97               	retlw 0x97
001d67   3444     retlw	0x44               	retlw 0x44
001d68   3409     retlw	0x9                	retlw 0x09
001d69   3430     retlw	0x30               	retlw 0x30
001d6a   340c     retlw	0xc                	retlw 0x0c 
001d6b   341d     retlw	0x1d               	retlw 0x1d
001d6c   3401     retlw	0x1                	retlw 0x01
001d6d   3400     retlw	0                  	retlw 0x00
001d6e   3414     retlw	0x14               	retlw 0x14
001d6f   34e0     retlw	0xe0               	retlw 0xe0
001d70   3420     retlw	0x20               	retlw 0x20
001d71   3400     retlw	0                  	retlw 0x00
001d72   34d5     retlw	0xd5               	retlw 0xd5
001d73   3400     retlw	0                  	retlw 0x00
001d74   3491     retlw	0x91               	retlw 0x91
001d75   3440     retlw	0x40               	retlw 0x40
001d76   34e2     retlw	0xe2               	retlw 0xe2
001d77   34e2     retlw	0xe2               	retlw 0xe2
001d78   3411     retlw	0x11               	retlw 0x11
001d79   3437     retlw	0x37               	retlw 0x37
001d7a   3424     retlw	0x24               	retlw 0x24
001d7b   3440     retlw	0x40               	retlw 0x40
001d7c   3410     retlw	0x10               	retlw 0x10
001d7d   3424     retlw	0x24               	retlw 0x24
001d7e   34c0     retlw	0xc0               	retlw 0xc0
001d7f   34dd     retlw	0xdd               	retlw 0xdd
001d80   34f8     retlw	0xf8               	retlw 0xf8
001d81   3437     retlw	0x37               	retlw 0x37
001d82   340a     retlw	0xa                	retlw 0x0a 
001d83   3498     retlw	0x98               	retlw 0x98
001d84   3489     retlw	0x89               	retlw 0x89
001d85   3445     retlw	0x45               	retlw 0x45
001d86   3448     retlw	0x48               	retlw 0x48
001d87   3406     retlw	0x6                	retlw 0x06
001d88   340d     retlw	0xd                	retlw 0x0d 
001d89   34fe     retlw	0xfe               	retlw 0xfe
001d8a   3448     retlw	0x48               	retlw 0x48
001d8b   3421     retlw	0x21               	retlw 0x21
001d8c   3417     retlw	0x17               	retlw 0x17
001d8d   3450     retlw	0x50               	retlw 0x50
001d8e   3448     retlw	0x48               	retlw 0x48
001d8f   34a6     retlw	0xa6               	retlw 0xa6
001d90   34b6     retlw	0xb6               	retlw 0xb6
001d91   344d     retlw	0x4d               	retlw 0x4d
001d92   3485     retlw	0x85               	retlw 0x85
001d93   3448     retlw	0x48               	retlw 0x48
001d94   3484     retlw	0x84               	retlw 0x84
001d95   3443     retlw	0x43               	retlw 0x43
001d96   3443     retlw	0x43               	retlw 0x43
001d97   3448     retlw	0x48               	retlw 0x48
001d98   3431     retlw	0x31               	retlw 0x31
001d99   34fe     retlw	0xfe               	retlw 0xfe
001d9a   3466     retlw	0x66               	retlw 0x66
001d9b   3467     retlw	0x67               	retlw 0x67
001d9c   34ae     retlw	0xae               	retlw 0xae 
001d9d   3450     retlw	0x50               	retlw 0x50
001d9e   3424     retlw	0x24               	retlw 0x24
001d9f   3400     retlw	0                  	retlw 0x00
001da0   34be     retlw	0xbe               	retlw 0xbe 
001da1   3446     retlw	0x46               	retlw 0x46
001da2   3400     retlw	0                  	retlw 0x00
001da3   3492     retlw	0x92               	retlw 0x92
001da4   34d7     retlw	0xd7               	retlw 0xd7
001da5   344e     retlw	0x4e               	retlw 0x4e
001da6   3464     retlw	0x64               	retlw 0x64
001da7   3465     retlw	0x65               	retlw 0x65
001da8   3430     retlw	0x30               	retlw 0x30
001da9   34fe     retlw	0xfe               	retlw 0xfe
001daa   3481     retlw	0x81               	retlw 0x81
001dab   3440     retlw	0x40               	retlw 0x40
001dac   34aa     retlw	0xaa               	retlw 0xaa 
001dad   3450     retlw	0x50               	retlw 0x50
001dae   34e0     retlw	0xe0               	retlw 0xe0
001daf   3440     retlw	0x40               	retlw 0x40
001db0   34ba     retlw	0xba               	retlw 0xba 
001db1   3444     retlw	0x44               	retlw 0x44
001db2   3424     retlw	0x24               	retlw 0x24
001db3   3400     retlw	0                  	retlw 0x00
001db4   34ea     retlw	0xea               	retlw 0xea
001db5   346f     retlw	0x6f               	retlw 0x6f
001db6   3424     retlw	0x24               	retlw 0x24
001db7   3400     retlw	0                  	retlw 0x00
001db8   3482     retlw	0x82               	retlw 0x82
001db9   344c     retlw	0x4c               	retlw 0x4c
001dba   3424     retlw	0x24               	retlw 0x24
001dbb   3400     retlw	0                  	retlw 0x00
001dbc   3400     retlw	0                  	retlw 0x00
001dbd   3400     retlw	0                  	retlw 0x00
001dbe   3424     retlw	0x24               	retlw 0x24
001dbf   3400     retlw	0                  	retlw 0x00
001dc0   3410     retlw	0x10               	retlw 0x10
001dc1   3428     retlw	0x28               	retlw 0x28
001dc2   34d2     retlw	0xd2               	retlw 0xd2
001dc3   34dd     retlw	0xdd               	retlw 0xdd
001dc4   34eb     retlw	0xeb               	retlw 0xeb
001dc5   344e     retlw	0x4e               	retlw 0x4e
001dc6   3462     retlw	0x62               	retlw 0x62
001dc7   3463     retlw	0x63               	retlw 0x63
001dc8   3482     retlw	0x82               	retlw 0x82
001dc9   344c     retlw	0x4c               	retlw 0x4c
001dca   3424     retlw	0x24               	retlw 0x24
001dcb   3400     retlw	0                  	retlw 0x00
001dcc   3400     retlw	0                  	retlw 0x00
001dcd   3400     retlw	0                  	retlw 0x00
001dce   3424     retlw	0x24               	retlw 0x24
001dcf   3400     retlw	0                  	retlw 0x00
001dd0   3410     retlw	0x10               	retlw 0x10
001dd1   3428     retlw	0x28               	retlw 0x28
001dd2   34d4     retlw	0xd4               	retlw 0xd4
001dd3   34dd     retlw	0xdd               	retlw 0xdd
001dd4   341f     retlw	0x1f               	retlw 0x1f 
001dd5   3400     retlw	0                  	retlw 0x00
001dd6   34c1     retlw	0xc1               	retlw 0xc1
001dd7   34ff     retlw	0xff               	retlw 0xff
001dd8   34e0     retlw	0xe0               	retlw 0xe0
001dd9   340f     retlw	0xf                	retlw 0x0f
001dda   3401     retlw	0x1                	retlw 0x01
001ddb   3400     retlw	0                  	retlw 0x00
001ddc   34ea     retlw	0xea               	retlw 0xea
001ddd   344e     retlw	0x4e               	retlw 0x4e
001dde   3401     retlw	0x1                	retlw 0x01
001ddf   3422     retlw	0x22               	retlw 0x22
001de0   3411     retlw	0x11               	retlw 0x11
001de1   343f     retlw	0x3f               	retlw 0x3f
001de2   3424     retlw	0x24               	retlw 0x24
001de3   3440     retlw	0x40               	retlw 0x40
001de4   3410     retlw	0x10               	retlw 0x10
001de5   3428     retlw	0x28               	retlw 0x28
001de6   3400     retlw	0                  	retlw 0x00
001de7   34d1     retlw	0xd1               	retlw 0xd1
001de8   34f8     retlw	0xf8               	retlw 0xf8
001de9   343f     retlw	0x3f               	retlw 0x3f
001dea   34cc     retlw	0xcc               	retlw 0xcc
001deb   349b     retlw	0x9b               	retlw 0x9b
                                           
                                           
                                           ;-----------------------------------------------------------------------
                                           ;-----------------------------------------------------------------------
                                           ; podprogramy pro nahrani pluginu
                                           ;-----------------------------------------------------------------------
                                           ;-----------------------------------------------------------------------
                                           
                                           CTI_TABULKU
001dec   0861     movf	0x61, w             	movfw ZAZNAM2
001ded   008a     movwf	0xa                	movwf PCLATH
001dee   0860     movf	0x60, w             	movfw ZAZNAM1
001def   0082     movwf	0x2                	movwf PCL
                                           
                                           ;-----------------------------------------------------------------------
                                           
                                           VS_LOAD_PLUGIN		; nahraje plugin do RAM dekodeku
001df0   3007     movlw	0x7                	movlw VSADDR_WRAMADDR 
001df1   00b6     movwf	0x36               	movwf TEMP1		; do TEMP1 dame adresu registru 
001df2   3000     movlw	0                  	movlw 0x00
001df3   00b7     movwf	0x37               	movwf TEMP2		; do TEMP2 dame dolni slabiku zapisovaneho slova
001df4   3082     movlw	0x82               	movlw 0x82
001df5   00b8     movwf	0x38               	movwf TEMP3		; do TEMP3 dame horni slabiku zapisovaneho slova
                                           
                                           	PROG_PAGE_1
001df8   201c     call	0x1c                	call VS_WR_REG
                                           	PROG_PAGE_3
                                           			; Do VS registru WRAMADDR se nejdrive musi nahrat adresa 0x8200 pro zacatek pluginu na adrese 0x4200 
                                           			; (0x4200 + 0x4000 = 0x8200 vis. "6.5.8 WRAMADDR" datasheetu VS1001k)
                                           			;
                                           	; a ted jdeme nahravat samotny plugin
                                           	; tabulku s pluginem mame na adrese 0x1800..0x1DEB (1516 bytes)
001dfb   3000     movlw	0                  	movlw 0x00
001dfc   00e0     movwf	0x60               	movwf ZAZNAM1
001dfd   3018     movlw	0x18               	movlw 0x18
001dfe   00e1     movwf	0x61               	movwf ZAZNAM2
                                           VS_LOAD_PLUGIN_LOAD
001dff   3006     movlw	0x6                	movlw VSADDR_WRAM
001e00   00b6     movwf	0x36               	movwf TEMP1		; do TEMP1 dame adresu registru 
001e01   25ec     call	0x5ec               	call CTI_TABULKU
001e02   00b7     movwf	0x37               	movwf TEMP2		; do TEMP2 dame dolni slabiku zapisovaneho slova
001e03   0ae0     incf	0x60, f             	incf ZAZNAM1,f
001e04   25ec     call	0x5ec               	call CTI_TABULKU
001e05   00b8     movwf	0x38               	movwf TEMP3		; do TEMP3 dame horni slabiku zapisovaneho slova
                                           	PROG_PAGE_1
001e08   201c     call	0x1c                	call VS_WR_REG
                                           	PROG_PAGE_3
                                           
001e0b   0ae0     incf	0x60, f             	incf ZAZNAM1,f
001e0c   1903     btfsc	0x3, 0x2           	btfsc STATUS,Z
001e0d   0ae1     incf	0x61, f             	incf ZAZNAM2,f
                                           
001e0e   0861     movf	0x61, w             	movfw ZAZNAM2
001e0f   3c1d     sublw	0x1d               	sublw 0x1D
001e10   1d03     btfss	0x3, 0x2           	btfss STATUS,Z 
001e11   2dff     goto	0x5ff               	goto VS_LOAD_PLUGIN_LOAD
                                           
001e12   0860     movf	0x60, w             	movfw ZAZNAM1
001e13   3cec     sublw	0xec               	sublw 0xEC
001e14   1d03     btfss	0x3, 0x2           	btfss STATUS,Z 
001e15   2dff     goto	0x5ff               	goto VS_LOAD_PLUGIN_LOAD
                                           
001e16   01af     clrf	0x2f                	clrf VS_LOUDNESS
                                           	PROG_PAGE_1
001e19   204d     call	0x4d                	call VS_SOFT_RESET
                                           	PROG_PAGE_3	
001e1c   0008     return                   	return
                                           ;-----------------------------------------------------------------------
                                           ;**********************************************************
                                            org	0x2100		; tabulka v pameti EEPROM (256 bytu)
002100   0030     dw	0x30  ;unknown opcode 	de	0x30, 0x30, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00
002101   0030     dw	0x30  ;unknown opcode 
002102   00c3     movwf	0x43               
002103   0000     nop                      
002104   0000     nop                      
002105   0000     nop                      
002106   0000     nop                      
002107   0000     nop                      
002108   0000     nop                      	de	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
002109   0000     nop                      
00210a   0000     nop                      
00210b   0000     nop                      
00210c   0000     nop                      
00210d   0000     nop                      
00210e   0000     nop                      
00210f   0000     nop                      
002110   0000     nop                      	de	0x00, 0x00, 0x00
002111   0000     nop                      
002112   0000     nop                      
                                           	END
                                           ;**********************************************************
                                           ; data v EEPROM maji nasledujici vyznam:
                                           ;
                                           ;  +----------+------------------------+-----------------+ 
                                           ;  |  adresa  |  ekvivalentni registr  |  kdy se nacita  |  
                                           ;  +----------+------------------------+-----------------+  
                                           ;  |   0      | HLASITOST_L            |                 |
                                           ;  |   1      | HLASITOST_L            |  pri startu     |
                                           ;  |   2      | PREH_STAV0             |                 |
                                           ;  |   3      | PREH_STAV1             |                 |
                                           ;  +----------+------------------------+-----------------+ 
                                           ;  |   4      | ZACATEK_DAT1           |                 |
                                           ;  |   5      | ZACATEK_DAT2           |  po naƒçten√≠ odd√≠lu 
                                           ;  |   6      | ZACATEK_DAT3           |  se zkontroluje PREH_ADR_CL
                                           ;  |   7      | ZACATEK_DAT4           |  v EEPROM, zda se jedna 
                                           ;  |   8      | PREH_ADR_CL1           |  o stejny oddil, ktery byl nacten
                                           ;  |   9      | PREH_ADR_CL2           |  pri posledni prehrane skladbe,
                                           ;  |   A      | PREH_ADR_CL3           |  a pokud ano a zaroven je zvolen
                                           ;  |   B      | PREH_ADR_CL4           |  sedmi bit PREH_STAV0 (prehravat
                                           ;  |   C      | PREH_ZAZNAM1           |  ihned po nacteni oddilu),
                                           ;  |   D      | PREH_ZAZNAM2           |  tak se nactou ostatni hodnoty 
                                           ;  |   E      | PREH_CITAC_PREV	       |  z EEPROM. To m√° za n√°sledek, 
                                           ;  |   F      | PREH_DATA_CL1          |  ze se zacne prehravat od mista, 
                                           ;  |  10      | PREH_DATA_CL2          |  kde se posledne skoncilo...
                                           ;  |  11      | PREH_DATA_CL3          |                 |
                                           ;  |  12      | PREH_DATA_CL4          |                 |
                                           ;  +----------+------------------------+-----------------+ 
                                           ;
                                           ; vsechny hodnoty se do EEPROM z RAM kopiruje pokazde, kdyz skonci MP3
